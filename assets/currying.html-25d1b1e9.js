import{_ as n,o as s,c as a,a as t}from"./app-d4c6289a.js";const p={},e=t(`<h2 id="什么是柯里化" tabindex="-1"><a class="header-anchor" href="#什么是柯里化" aria-hidden="true">#</a> 什么是柯里化</h2><p>把接受<strong>多个参数的函数</strong>变换成接受一个<strong>单一参数</strong>（最初函数的第一个参数）的函数，并且返回一个新的函数的技术，新函数<strong>接受余下参数并返回运算结果</strong>。</p><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p><strong>固定某些参数</strong>，得到一个接收余下参数的函数</p><p>这样可以给我们带来这些</p><ol><li>参数复用，让我们少些部分重复的参数</li><li>延迟执行，得到函数后，执行的是几点可以由我们决定</li></ol><h2 id="函数柯里化的实现" tabindex="-1"><a class="header-anchor" href="#函数柯里化的实现" aria-hidden="true">#</a> 函数柯里化的实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//固定参数</span>
<span class="token keyword">function</span> <span class="token function">fixParamCurry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//获取除了fn以外的所有参数</span>
  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//调用传入的函数，并将调用fixParamCurry时传入的参数和调用fn传入的参数结合传入fn函数</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  length <span class="token operator">=</span> length <span class="token operator">||</span> fn<span class="token punctuation">.</span>length
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//传入的参数没有达到fn所需的参数数量</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">&lt;</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//[fn,arg1,arg2,...]</span>
  		<span class="token keyword">const</span> combine <span class="token operator">=</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token comment">//调用fixParamCurry返回一个已经【固定部分参数】的函数</span>
      <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token function">fixParamCurry</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>combine<span class="token punctuation">)</span><span class="token punctuation">,</span>length <span class="token operator">-</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token comment">//已经达到fn所需的参数数量</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><h3 id="参数复用" tabindex="-1"><a class="header-anchor" href="#参数复用" aria-hidden="true">#</a> 参数复用</h3><p>固定部分总是重复的参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span>url<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> ajaxCurry <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>ajax<span class="token punctuation">)</span>
<span class="token keyword">const</span> postAjax <span class="token operator">=</span> <span class="token function">ajaxCurry</span><span class="token punctuation">(</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> postServerAAjax <span class="token operator">=</span> <span class="token function">postAjax</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.serverA.com&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> postServerBAjax <span class="token operator">=</span> <span class="token function">postAjax</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.serverB.com&#39;</span><span class="token punctuation">)</span>

<span class="token function">postServerAAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;22&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bind函数" tabindex="-1"><a class="header-anchor" href="#bind函数" aria-hidden="true">#</a> bind函数</h3><p><code>bind</code> 函数就是一个很典型的柯里化使用场景，让我们先看一下 <code>bind</code> 的简单使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> boundFunc <span class="token operator">=</span> <span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">boundFunc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 输出：</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// Hello, Alice</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ul><li>函数更加灵活和可重用。通过柯里化，可以将一个多参数的函数转换为一系列单参数的函数，使函数更加灵活和可重用。</li><li>可以<strong>避免重复的代码</strong>。通过柯里化，可以避免在调用函数时重复地传递参数，从而避免了重复的代码。</li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><ul><li>可能会降低性能。通过柯里化，函数的性能可能会降低，因为需要额外的内存来存储函数的返回值和参数。</li><li>可能会增加代码复杂度。通过柯里化，可能会增加代码的复杂度，因为需要处理额外的参数和函数返回值。</li></ul>`,19),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","currying.html.vue"]]);export{r as default};
