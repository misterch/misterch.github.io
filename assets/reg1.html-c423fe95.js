import{_ as t,r as p,o,c,b as n,d as s,e as l,a}from"./app-d4c6289a.js";const r={},i=a(`<h2 id="捕获性分组" tabindex="-1"><a class="header-anchor" href="#捕获性分组" aria-hidden="true">#</a> 捕获性分组()</h2><p>捕获性分组以小括号()来实现，会把<strong>每个分组里匹配的值保存起来</strong></p><p>比如利用捕获性分组把hello world互换成world hello</p><h3 id="通过exec函数" tabindex="-1"><a class="header-anchor" href="#通过exec函数" aria-hidden="true">#</a> 通过exec函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z]+)\\s([a-z]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// exec方法返回的是一个数组，包含匹配到的字符串以及分组(也称子串)里的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;hello world&#39;,&#39;hello&#39;,&#39;world&#39;]  </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;hello world&#39; 匹配到的字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;hello&#39; 第一个分组([a-z]+)的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;world&#39; 第二个分组([a-z]+)的值</span>

<span class="token keyword">var</span> n_str <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&#39; &#39;</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n_str<span class="token punctuation">)</span> <span class="token comment">//world hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过属性-1-9" tabindex="-1"><a class="header-anchor" href="#通过属性-1-9" aria-hidden="true">#</a> 通过属性$1-9</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>            
<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z]+)\\s([a-z]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> 
pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个地方必须运行正则匹配一次，方式不限，可以是test()、exec()、以及String的正则方式</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span> <span class="token comment">//&#39;hello&#39; 第一个分组([a-z]+)的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">)</span> <span class="token comment">//&#39;world&#39; 第二个分组([a-z]+)的值</span>

<span class="token keyword">var</span> n_str <span class="token operator">=</span> RegExp<span class="token punctuation">.</span>$2<span class="token operator">+</span><span class="token string">&#39; &#39;</span><span class="token operator">+</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n_str<span class="token punctuation">)</span> <span class="token comment">//world hello</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过string的replace" tabindex="-1"><a class="header-anchor" href="#通过string的replace" aria-hidden="true">#</a> 通过String的replace()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z]+)\\s([a-z]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> n_str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">&quot;$2 $1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里的$1、$2与方法二里的RegExp.$1、RegExp.$2作用是相同的。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n_str<span class="token punctuation">)</span> <span class="token comment">//world hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非捕获性分组" tabindex="-1"><a class="header-anchor" href="#非捕获性分组" aria-hidden="true">#</a> 非捕获性分组(?😃</h2><p>非捕获性分组工作模式下分组(?:)会作为匹配校验，并出现在匹配结果字符里面，但不作为子匹配返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//先看用捕获性分组匹配会返回什么</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;000aaa111&#39;</span><span class="token punctuation">;</span>             
<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z]+)(\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//捕获性分组匹配</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[&#39;aaa111&#39;,&#39;aaa&#39;,&#39;111&#39;]   结果子串也获取到了，这并不是我们想要的结果</span>


<span class="token comment">//非捕获性分组</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;000aaa111&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pattern2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:[a-z]+)(?:\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//非捕获性分组匹配</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">//[&#39;aaa111&#39;]  结果正确    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前瞻分组" tabindex="-1"><a class="header-anchor" href="#前瞻分组" aria-hidden="true">#</a> 前瞻分组</h2>`,13),u=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("前瞻分组会作为匹配校验，但"),n("strong",null,"不会出现在匹配结果"),s("字符里面，且不作为子匹配返回")])],-1),d=a(`<h3 id="正向前瞻" tabindex="-1"><a class="header-anchor" href="#正向前瞻" aria-hidden="true">#</a> 正向前瞻(?=)</h3><p>后面<strong>必须有</strong>，且值为<code>?=</code>后面所匹配到的字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//正向前瞻，匹配.jpg后缀文件名</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;123.jpg,456.gif,abc.jpg&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+(?=\\.jpg)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[123,abc]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>(?=\\.jpg)</code>表示匹配的字符串后面必须跟有**.jpg**的字符</p><h3 id="反向前瞻" tabindex="-1"><a class="header-anchor" href="#反向前瞻" aria-hidden="true">#</a> 反向前瞻(?!)</h3><p>后面<strong>不能有</strong>，且值为<code>?=</code>后面所匹配到的字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//反向前瞻，匹配3个及以上的a，而且后面不能有000的字符</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;aaa000 aaaa111 aaaaaaa222&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> partern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a{3,}(?!000)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">//反向前瞻匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>partern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;aaaa&#39;, &#39;aaaaaaa&#39;]   返回结果正确，没有匹配aaa000</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>(?!000)</code>表示匹配的字符串后面不能跟有<strong>000</strong>的字符串</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>捕获性分组使用<code>()</code>，每个分组匹配的值都会<strong>保存起来</strong>，可以使用$1，$2来访问分组匹配的字符</li><li>非捕获性分组使用<code>(?:)</code>，分组会作为<strong>匹配校验</strong>，且<strong>出现在匹配结果中</strong>，不作为子匹配返回</li><li>前瞻分组，分组只作为<strong>匹配校验</strong>，<strong>不出现在匹配结果中</strong>，不作为子匹配返回，一般使用<strong>match()</strong></li><li>正向前瞻使用<code>(?=jpg)</code>，匹配的字符<strong>后面</strong>必须<strong>有</strong>jpg</li><li>反向前瞻使用<code>(?!jpg)</code>，匹配的字符<strong>后面</strong>必须<strong>无</strong>jpg</li></ol><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,11),k={href:"https://www.cnblogs.com/xiuluo--angel/p/7100312.html",target:"_blank",rel:"noopener noreferrer"};function g(v,m){const e=p("ExternalLinkIcon");return o(),c("div",null,[i,u,d,n("p",null,[n("a",k,[s("正则表达式------捕获性分组，非捕获性分组，前瞻，后瞻 - 学着总结，学会总结 - 博客园 (cnblogs.com)"),l(e)])])])}const x=t(r,[["render",g],["__file","reg1.html.vue"]]);export{x as default};
