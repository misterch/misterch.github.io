import{_ as e,o as t,c,b as o,a as s}from"./app-d4c6289a.js";const n={},r=o("div",{class:"custom-container tip"},[o("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[o("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[o("circle",{cx:"12",cy:"12",r:"9"}),o("path",{d:"M12 8h.01"}),o("path",{d:"M11 12h1v4h1"})])]),o("p",{class:"custom-container-title"},"TIP"),o("p",null,"不同于reactivity api，composition api提供的函数很多事与组件深度绑定的，不能脱离组件存在")],-1),d=s('<h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> setup</h2><p><code>setup</code>函数在<strong>组件被赋值后立即执行</strong>，<strong>早于</strong>所有生命周期钩子函数</p><p>在<code>setup</code>函数中，<strong>返回的对象会暴露给模板和组件实例</strong></p><p><code>setup</code>自身不含有对组件实例的访问权，<strong>即在<code>setup</code>中访问<code>this</code>是<code>undefined</code></strong></p><p><code>setup(props,context)</code>有两个参数</p><p><strong>props</strong>：传给组件的响应式对象，解构<code>props</code>可以使用<code>toRefs()</code>和<code>toRef()</code>，否则直接解构失去响应性</p><p><strong>context</strong>：<code>setup</code>上下文对象，非响应式，可直接解构</p><p><code>context</code>对象含有的属性：<code>attrs</code>、<code>slots</code>、<code>emit</code>、<code>expose</code>等</p><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2>',9),i=o("div",{class:"custom-container tip"},[o("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[o("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[o("circle",{cx:"12",cy:"12",r:"9"}),o("path",{d:"M12 8h.01"}),o("path",{d:"M11 12h1v4h1"})])]),o("p",{class:"custom-container-title"},"面试题1"),o("p",null,"Q：组合式API比选项式API有哪些优势？"),o("p",null,"A："),o("ol",null,[o("li",null,"为了更好的逻辑复用和代码组织")]),o("p",null,"有了组合式API，配合响应式API，可以在组件内部进行更加细粒度的控制，使得组件中不同的功能高度聚合，提升了代码的可维护性。对于不同组件的相同功能，也能够更好的复用。"),o("ol",{start:"2"},[o("li",null,"更好的类型推断")]),o("p",null,"相比于选项式API，组合式API中没有了指向奇怪的this，所有API变得更加函数式，这有利于类型推断系统（比如TS深度配合）")],-1),l=[r,d,i];function p(a,h){return t(),c("div",null,l)}const g=e(n,[["render",p],["__file","composition.html.vue"]]);export{g as default};
