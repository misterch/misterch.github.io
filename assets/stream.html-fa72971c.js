import{_ as n,o as s,c as a,a as e}from"./app-d4c6289a.js";const t={},p=e(`<h2 id="什么是流" tabindex="-1"><a class="header-anchor" href="#什么是流" aria-hidden="true">#</a> 什么是流</h2><p>流是只数据的流动，数据从一个地方缓缓地流动到另一个地方</p><p>流是有方向的</p><p>可读流（Readable）：数据从源头流向内存</p><p>可写流（Writable）：数据从内存流向源头</p><p>双工流（Duplex）：数据既可从源头流向内存，又可从内存流向源头</p><h2 id="为什么需要流" tabindex="-1"><a class="header-anchor" href="#为什么需要流" aria-hidden="true">#</a> 为什么需要流</h2><h3 id="其他介质和内存的数据规模不一致" tabindex="-1"><a class="header-anchor" href="#其他介质和内存的数据规模不一致" aria-hidden="true">#</a> 其他介质和内存的数据规模不一致</h3><p>磁盘可储存数据量巨大，内存可储存数据量有限</p><p>如果一下子将磁盘中的数据读到内存中，内存压力会十分大</p><h3 id="其他介质和内存的数据处理能力不一致" tabindex="-1"><a class="header-anchor" href="#其他介质和内存的数据处理能力不一致" aria-hidden="true">#</a> 其他介质和内存的数据处理能力不一致</h3><p>磁盘、网卡等可读写速度比内存慢得多</p><p>如果内存将数据高速存到磁盘，磁盘就有可能满载来处理内存流过来的数据，这时候磁盘处理其他任务就会十分缓慢</p><h2 id="什么是文件流" tabindex="-1"><a class="header-anchor" href="#什么是文件流" aria-hidden="true">#</a> 什么是文件流</h2><p>内存数据和磁盘文件数据之间的流动</p><h2 id="文件流的创建" tabindex="-1"><a class="header-anchor" href="#文件流的创建" aria-hidden="true">#</a> 文件流的创建</h2><h3 id="创建文件可读流" tabindex="-1"><a class="header-anchor" href="#创建文件可读流" aria-hidden="true">#</a> 创建文件可读流</h3><p><code>fs.createReadStream(path[,options]):fs.ReadStream</code></p><p><code>options</code>：</p><ul><li><code>encoding</code>：编码方式（不指定则是Buffer）</li><li><code>start</code>：起始字节</li><li><code>end</code>：结束字节</li><li><code>highWaterMark</code>：每次读取数量（默认读64kb字节数） <ul><li>如果<code>encoding</code>有值，该数量表示一个字符数</li><li>如果<code>encoding</code>为<code>null</code>，该数量表示字节数</li></ul></li><li><code>autoClose</code>：文件读完后自动关闭</li></ul><p>返回<code>Readable</code>的子类<code>ReadStream</code>的实例</p><h4 id="readstream实例方法" tabindex="-1"><a class="header-anchor" href="#readstream实例方法" aria-hidden="true">#</a> <code>ReadStream</code>实例方法</h4><ul><li><code>rs.pause()</code>：暂停读取，触发pause事件</li><li><code>rs.resume()</code>：恢复读取，触发resume事件</li><li><strong><code>rs.pipe(ws)</code></strong><ul><li>将可读流连接到可写流</li><li>返回参数的值</li><li><strong>该方法可以解决内存被压问题</strong></li></ul></li></ul><h4 id="readstream实例事件" tabindex="-1"><a class="header-anchor" href="#readstream实例事件" aria-hidden="true">#</a> <code>ReadStream</code>实例事件</h4><p><code>rs.on(&#39;open&#39;)</code>：文件打开事件，文件被打开后触发</p><p><code>rs.on(&#39;data&#39;,chunk=&gt;{})</code>：</p><ul><li>读取到一部分数据后触发</li><li>注册<code>data</code>事件后，才会真正开始读取</li><li>每次读取<code>highWatermark</code>指定的数量</li><li>回调函数中会附带读取到的数据</li></ul><p><code>rs.on(&#39;error&#39;)</code>：读文件出错</p><p><code>rs.on(&#39;end&#39;)</code>：读文件结束，end触发后才会触发close</p><p><code>rs.on(&#39;close&#39;)</code>：文件被关闭后触发，可通过<code>rs.close()</code>手动关闭，或文件读取完成后自动关闭</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span><span class="token string">&#39;utf-8&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件被打开了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;根据highWatermark读取到的内容&#39;</span><span class="token punctuation">,</span>chunk<span class="token punctuation">)</span>
  <span class="token comment">//每次读取一部分数据到变量中，即读取到内存中</span>
  str<span class="token operator">+=</span>chunk
<span class="token punctuation">}</span><span class="token punctuation">)</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">// 可以手动关闭</span>
  <span class="token comment">// 可以在on(&#39;data&#39;)事件完成后自动触发</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建文件可写流" tabindex="-1"><a class="header-anchor" href="#创建文件可写流" aria-hidden="true">#</a> 创建文件可写流</h3><p><code>fs.createWriteStream(path[,options]):fs.WriteStream</code></p><p><code>options</code>：</p><ul><li><p><code>encoding</code>：编码方式（不指定则是Buffer）</p></li><li><p><code>flags</code>：操作文件的方式</p><ul><li>w：覆盖</li><li>a：追加</li></ul></li><li><p><code>start</code>：起始字节</p></li><li><p><code>highWaterMark</code>：每次最多写入的字节数（默认16kb）</p></li></ul><p>返回<code>Writable</code>的子类<code>WriteStream</code>的实例</p><h4 id="writestream实例事件" tabindex="-1"><a class="header-anchor" href="#writestream实例事件" aria-hidden="true">#</a> <code>WriteStream</code>实例事件</h4><p><code>ws.on(&#39;open&#39;)</code>：跟读取流一样</p><p><code>ws.on(&#39;close&#39;)</code>：跟读取流一样</p><p><code>ws.on(&#39;error&#39;)</code>：跟读取流一样</p><h4 id="writestream实例方法" tabindex="-1"><a class="header-anchor" href="#writestream实例方法" aria-hidden="true">#</a> <code>WriteStream</code>实例方法</h4><p><code>ws.write(data)</code>：写入数据</p><ul><li><p><code>data</code>可以是字符串或者Buffer</p></li><li><p>返回一个boolean值</p><ul><li>true：写入通道没有被填满，接下来的数据可以直接写入，无需排队</li><li>false：写入通道目前已被填满，接下来的数据将进入写入队列，<strong>要注意内存背压问题，因为写入队列是内存中的数据，是有限的</strong></li></ul><p>例如<code>highWaterMark:3</code>，写入一个<strong>汉字</strong>，一个汉字占3个字节，这时返回<strong>false</strong>，因为已经填满了通道</p></li><li><p>当写入队列清空时，会触发<code>drain</code>事件</p></li></ul><p><code>ws.end([data])</code>：结束写入，将自动关闭文件（默认自动关闭autoClose）</p><p>​ <code>data</code>是可选的，表示关闭前的最后一次写入</p><p><strong>解决背压问题</strong></p><p>当要写入的数据远远超过<code>highWaterMark</code>，造成数据积在内存中，产生内存背压问题，要解决背压问题，可以利用<code>drain</code>事件，这个事件会在<strong>写入队列清空</strong>时触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">flags</span><span class="token operator">:</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token comment">//3Byte</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
    flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
    i<span class="token operator">++</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 通道清空了就继续写入</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;drain&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过文件流复制文件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> from <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;./text.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> to <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;./text.copy.txt&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
  <span class="token comment">//产生背压了，暂停读取到内存，等待写入队列清空</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
    rs<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 监听写入队列，队列清空，触发drain事件，读取继续</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;drain&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  rs<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//关闭写入流</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//10~24的代码其实就是rs.pipe()的实现</span>
rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","stream.html.vue"]]);export{u as default};
