import{_ as r,r as s,o as t,c as o,b as a,d as p,e as i,a as e}from"./app-d4c6289a.js";const d="/assets/renderpoint-04af79e6.png",c="/assets/renderprogress-a4f987a8.png",h="/assets/meetcss-88e8ae52.png",l="/assets/meetjs-810349d0.png",g="/assets/wholerender-b4ee1c58.png",u="/assets/reflow-73807b7e.png",m={},f=e('<h2 id="渲染时间点" tabindex="-1"><a class="header-anchor" href="#渲染时间点" aria-hidden="true">#</a> 渲染时间点</h2><p><img src="'+d+'" alt=""></p><p>当浏览器的<strong>网络线程</strong>收到HTML文档后，会产生一个<strong>渲染任务</strong>，并将其传递给<strong>渲染主线程的消息队列</strong></p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，<strong>开启渲染流程</strong></p><h2 id="渲染主线程" tabindex="-1"><a class="header-anchor" href="#渲染主线程" aria-hidden="true">#</a> 渲染主线程</h2><p><img src="'+c+'" alt=""></p><h3 id="解析html" tabindex="-1"><a class="header-anchor" href="#解析html" aria-hidden="true">#</a> 解析HTML</h3><p>第一步是解析HTML</p><p>解析过程中遇到CSS解析CSS，遇到JS执行JS。<strong>为了提高解析效率</strong>，浏览器在开始解析前，会启动一个<strong>预解析线程</strong>，率先下载HTML中的外部CSS文件和外部JS文件</p><p><img src="'+h+'" alt=""></p><p>如果主线程解析到<code>link</code>位置，此时外部的CSS文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析CSS的工作是在预解析线程中进行的。<strong>这就是CSS不会阻塞HTML解析的根本原因</strong></p><p><img src="'+l+'" alt=""></p><p>如果主线程解析到<code>script</code>位置，会<strong>停止解析HTML</strong>，转而等待JS文件下载好，并将全局代码解析执行完成后，才能继续接续HTML。这是因为JS代码的执行过程<strong>可能会修改当前的DOM树</strong>，所以DOM树的生成必须停止。这就是JS会阻塞HTML解析的根本原因</p><p>第一步完成后，会得到DOM树和CSSOM树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在CSSOM树中</p>',14),_=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"总结"),a("p",null,"CSS不会阻塞HTML解析：CSS是在预解析线程中进行"),a("p",null,"JS会阻塞HTML解析：JS可能会修改当前DOM树")],-1),S=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//可以一行代码修改全局的div元素都加上红色边框</span>
<span class="token comment">//随便找一个样式表styleSheets，给元素添加一个规则</span>
document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;border:1px solid red&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样式计算style" tabindex="-1"><a class="header-anchor" href="#样式计算style" aria-hidden="true">#</a> 样式计算style</h3><p>主线程会遍历得到DOM树，依次为树中的<strong>每个节点计算出他最终的样式</strong></p><p>在这一过程中，很多预设值会变成绝对值，比如red会变成rgb(255,0,0)；相对单位会变成绝对单位，不如em变成px</p><p>这一步完成后，户得到一颗带有样式的DOM树</p><h3 id="布局layout" tabindex="-1"><a class="header-anchor" href="#布局layout" aria-hidden="true">#</a> 布局layout</h3><p>布局阶段会依次遍历DOM树的每一个节点，<strong>计算每个节点的几何信息</strong>。例如节点的宽高、相对位置</p><p>大部分时候，DOM树和布局树并不一一对应。比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；不过使用伪元素选择器，虽然DOM树中不存在这些伪元素，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒，匿名块盒等等都会导致DOM树和布局树无法一一对应</p><h3 id="分层layer" tabindex="-1"><a class="header-anchor" href="#分层layer" aria-hidden="true">#</a> 分层layer</h3><p>主线程会使用一套复杂的策略对整个布局树中进行分层</p><p>分层的好处在于，将来某一个层改变后，<strong>仅会对改层进行后续处理，从而提高效率</strong></p><p>滚动条、堆叠上下文、transform、opacity等样式会或多或少影响分层结果</p><p>为经常变动的节点设置will-change会单独设置一个分层，提高这个节点的响应效率</p><h3 id="绘制paint" tabindex="-1"><a class="header-anchor" href="#绘制paint" aria-hidden="true">#</a> 绘制paint</h3><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容改如何画出来（类似于canvas）</p><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余的工作将由合成线程完成</p><h2 id="合成线程" tabindex="-1"><a class="header-anchor" href="#合成线程" aria-hidden="true">#</a> 合成线程</h2><h3 id="分块tiling" tabindex="-1"><a class="header-anchor" href="#分块tiling" aria-hidden="true">#</a> 分块tiling</h3><p>合成线程首先对每个图层进行分块，将其划分为多个小区域</p><p>分块的工作会从线程池中拿出多个线程同时进行分块工作</p><h3 id="光栅化raster" tabindex="-1"><a class="header-anchor" href="#光栅化raster" aria-hidden="true">#</a> 光栅化raster</h3><p>光栅化是将<strong>每个块变成位图</strong></p><p>合成线程会将块信息交给GPU进程（这是浏览器的GPU进程），以极高的速度完成光栅化</p><p>GPU进程会启动多个线程来完成光栅化，并且优先处理靠近视口区域的快</p><p>此过程会用到GPU加速</p><h3 id="画draw" tabindex="-1"><a class="header-anchor" href="#画draw" aria-hidden="true">#</a> 画draw</h3><p><img src="`+g+'" alt=""></p><p>合成线程计算出每个位图在屏幕上的位置，交给GPU（调用显卡）进行最终呈现</p><p>合成线程拿到每个层、每个块的位图后，生成一个个<strong>指引quad</strong>信息</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形</p><p><strong>变形发生在合成线程，与渲染主线程无关，这就是transform效率高的本质原因</strong></p><p>合成线程会把quad提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像</p><p>渲染进程是在沙盒中的，与操作系统的硬件是隔离的，保证了安全</p><h2 id="reflow" tabindex="-1"><a class="header-anchor" href="#reflow" aria-hidden="true">#</a> reflow</h2><p><img src="'+u+'" alt=""></p><p>本质是重新计算layout树，过程很影响效率</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发layout</p><p>为了避免连续多次操作导致布局树反复计算，浏览器户合并这些操作，当JS代码全部完成后再进行统一计算。所以改动属性造成的reflow是异步完成的</p><p>也同样因为如此，<strong>当JS获取布局属性时，就可能造成无法获取得到最新的布局信息</strong></p><p>浏览器在反复权衡下最终决定获取属性立即reflow</p><h2 id="repaint" tabindex="-1"><a class="header-anchor" href="#repaint" aria-hidden="true">#</a> repaint</h2><p>本质是重新根据分层信息计算绘制指令</p><p>当改动了可见样式后，就需要重新计算，会引发repaint</p><p>由于元素的布局信息也属于可见样式，所以reflow一定会引起repaint</p><h2 id="为什么transform效率高" tabindex="-1"><a class="header-anchor" href="#为什么transform效率高" aria-hidden="true">#</a> 为什么transform效率高</h2><p>因为transform既不影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个<strong>draw</strong>阶段</p><p>由于draw阶段在合成线程中，所以transform的变化几乎不会影响渲染主线程。所以渲染主线程无论多么忙碌，也不会影响transform的变化</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',48),x={href:"https://ke.qq.com/course/5892689/13883868337269329#term_id=106109971",target:"_blank",rel:"noopener noreferrer"};function b(k,M){const n=s("ExternalLinkIcon");return t(),o("div",null,[f,_,S,a("p",null,[a("a",x,[p("原理-浏览器渲染原理-HTML/CSS教程-腾讯课堂 (qq.com)"),i(n)])])])}const v=r(m,[["render",b],["__file","render.html.vue"]]);export{v as default};
