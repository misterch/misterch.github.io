import{_ as t,r as p,o,c as i,b as n,d as s,e,a as l}from"./app-d4c6289a.js";const c={},r=l(`<h2 id="eslint配置" tabindex="-1"><a class="header-anchor" href="#eslint配置" aria-hidden="true">#</a> eslint配置</h2><ul><li>eslint <strong>解析器</strong></li><li>@babel/eslint-parser：是一个babel parser解析器，lint所有有效的babel代码</li><li>@typescript-eslint/parser：是 <code>typescript</code> parser解析器</li><li>vue-eslint-parser：是一个 <code>.vue</code>文件解析器，对vue文件中 <code>&lt;template&gt;</code>进行lint</li><li>@typescript-eslint/eslint-plugin：是typescript插件，包含ts代码检查规则 <strong>拓展规则插件</strong></li></ul><p>使用：在plugins中引入插件的规则，在extends中使用插件的规则使其生效，rules中可对插件的规则进行自定义配置</p><ul><li>eslint-plugin-vue：lint所有vue语法的规则的插件</li><li>eslint-plugin-import：供对ES6+ import/export语法的支持</li><li>eslint-plugin-node：添加对node的eslint支持</li><li>eslint-plugin-prettier：格式化js，html，css，json等语言</li></ul><p>配置typescript、vue、jsx的语法检测，prettier作为格式化代码规则</p><h3 id="配置-eslintrc" tabindex="-1"><a class="header-anchor" href="#配置-eslintrc" aria-hidden="true">#</a> 配置.eslintrc.*</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// @see https://eslint.bootcss.com/docs/rules/</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">jest</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">/* 使用vue-eslint-parser对vue文件中template 进行lint*/</span>
    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;vue-eslint-parser&#39;</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/** 优先级低于 parser 的语法解析配置 */</span>
    <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@typescript-eslint/parser&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">jsxPragma</span><span class="token operator">:</span> <span class="token string">&#39;React&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">/* 继承已有的规则 */</span>
    <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;plugin:vue/vue3-essential&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;plugin:prettier/recommended&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@typescript-eslint&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">/*
     * &quot;off&quot; 或 0    ==&gt;  关闭规则
     * &quot;warn&quot; 或 1   ==&gt;  打开的规则作为警告（不影响代码执行）
     * &quot;error&quot; 或 2  ==&gt;  规则作为一个错误（代码不能执行，界面报错）
     */</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// eslint（https://eslint.bootcss.com/docs/rules/）</span>
        <span class="token string-property property">&#39;no-var&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 要求使用 let 或 const 而不是 var</span>
        <span class="token string-property property">&#39;no-multiple-empty-lines&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 不允许多个空行</span>
        <span class="token string-property property">&#39;no-console&#39;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;no-debugger&#39;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;no-unexpected-multiline&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 禁止空余的多行</span>
        <span class="token string-property property">&#39;no-useless-escape&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 禁止不必要的转义字符</span>

        <span class="token comment">// typeScript (https://typescript-eslint.io/rules)</span>
        <span class="token string-property property">&#39;@typescript-eslint/no-unused-vars&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 禁止定义未使用的变量</span>
        <span class="token string-property property">&#39;@typescript-eslint/prefer-ts-expect-error&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 禁止使用 @ts-ignore</span>
        <span class="token string-property property">&#39;@typescript-eslint/no-explicit-any&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 禁止使用 any 类型</span>
        <span class="token string-property property">&#39;@typescript-eslint/no-non-null-assertion&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;@typescript-eslint/no-namespace&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 禁止使用自定义 TypeScript 模块和命名空间。</span>
        <span class="token string-property property">&#39;@typescript-eslint/semi&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>

        <span class="token comment">// eslint-plugin-vue (https://eslint.vuejs.org/rules/)</span>
        <span class="token string-property property">&#39;vue/multi-word-component-names&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 要求组件名称始终为 “-” 链接的单词</span>
        <span class="token string-property property">&#39;vue/script-setup-uses-vars&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 防止&lt;script setup&gt;使用的变量&lt;template&gt;被标记为未使用</span>
        <span class="token string-property property">&#39;vue/no-mutating-props&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 不允许组件 prop的改变</span>
        <span class="token string-property property">&#39;vue/attribute-hyphenation&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 对模板中的自定义组件强制执行属性命名样式</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置package-json" tabindex="-1"><a class="header-anchor" href="#配置package-json" aria-hidden="true">#</a> 配置package.json</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint src&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;fix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint src --fix&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令后就能对指定目录下的代码进行语法检测或者修复</p><h2 id="prettier配置" tabindex="-1"><a class="header-anchor" href="#prettier配置" aria-hidden="true">#</a> prettier配置</h2><p>需要安装一下两个插件</p><ul><li>eslint-plugin-prettier：将prettier配置成一个eslint插件，让其当做一个linter规则来运行</li><li>eslint-config-prettier：包含了eslint规则，用于关闭eslint有关代码格式化的配置</li></ul><h3 id="配置-eslintrc-1" tabindex="-1"><a class="header-anchor" href="#配置-eslintrc-1" aria-hidden="true">#</a> 配置 <code>.eslintrc.*</code></h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  extends<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;plugin:prettier/recommended&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bracketSpacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;htmlWhitespaceSensitivity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ignore&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;endOfLine&quot;</span><span class="token operator">:</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置package-json-1" tabindex="-1"><a class="header-anchor" href="#配置package-json-1" aria-hidden="true">#</a> 配置package.json</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write \\&quot;./**/*.{html,vue,ts,js,json,md}\\&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行该命令后，就会把所有符合要求的代码进行格式化</p><h2 id="stylelint配置" tabindex="-1"><a class="header-anchor" href="#stylelint配置" aria-hidden="true">#</a> stylelint配置</h2><p>安装相关插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> sass sass-loader postcss postcss-scss postcss-html stylelint-config-prettier stylelint-config-recess-order stylelint-scss stylelint-config-recommended-scss stylelint-config-standard-scss stylelint-config-standard stylelint-config-standard-vue stylelint-order <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>stylelint</li><li>stylelint-config-standard：stylelint拓展插件，最基本的检查规则</li><li>stylelint-config-prettier：配置stylelint和prettier兼容，关闭冲突部分</li><li>stylelint-config-recess-order：配置stylelint css属性书写顺序，需要安装 <code>stylelint-order</code></li><li>检查 <code>scss</code>语法 <code>stylelint-config-recommended-scss</code>或者 <code>stylelint-config-standard-scss</code> 捆绑安装 <code>stylelint-scss</code>、<code>postcss-scss</code><code>stylelint-scss</code>：增加scss语法解析支持 <code>postcss-scss</code>：检查指定文件的样式，如 <code>.scss</code>，<code>.vue</code>，<code>.html</code>，<code>.css</code></li><li>检查 <code>.vue</code>文件的样式书写： 安装 <code>stylelint-config-standard-vue</code> 在vue文件中使用scss，需要安装 <code>stylelint-config-standard-scss</code>，且设置 <code>stylelint-config-standard-vue</code>为 <code>stylelint-config-standard-vue/scss</code>，解析vue文件中的template stylelint默认不解析非css文件，<code>stylelint-config-html</code>插件可以支持非css文件的解析，捆绑安装 <code>postcss-html</code>，可重写指定某些文件的配置</li></ul><h3 id="配置-stylelintrc" tabindex="-1"><a class="header-anchor" href="#配置-stylelintrc" aria-hidden="true">#</a> 配置 .stylelintrc.*</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// @see https://stylelint.bootcss.com/</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugin</span><span class="token operator">:</span> 
    <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;stylelint-config-standard&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 配置stylelint拓展插件</span>
      <span class="token string">&#39;stylelint-config-recommended-scss&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;stylelint-config-recommended-vue/scss&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 配置 vue 中 scss 样式格式化</span>
      <span class="token string">&#39;stylelint-config-html/vue&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认不解析非css文件，插件可以支持非css文件的解析，捆绑安装postcss-html</span>
      <span class="token string">&#39;stylelint-config-recess-order&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 配置stylelint css属性书写顺序插件,</span>
      <span class="token string">&#39;stylelint-config-prettier&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 配置stylelint和prettier兼容</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;**/*.(scss|css|vue|html)&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">customSyntax</span><span class="token operator">:</span> <span class="token string">&#39;postcss-scss&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;**/*.(html|vue)&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">customSyntax</span><span class="token operator">:</span> <span class="token string">&#39;postcss-html&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ignoreFiles</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;**/*.js&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;**/*.jsx&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;**/*.tsx&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;**/*.ts&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;**/*.json&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;**/*.md&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;**/*.yaml&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * null  =&gt; 关闭该规则
     * always =&gt; 必须
     */</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;value-keyword-case&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 在 css 中使用 v-bind，不报错</span>
        <span class="token string-property property">&#39;no-descending-specificity&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器</span>
        <span class="token string-property property">&#39;function-url-quotes&#39;</span><span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 要求或禁止 URL 的引号 &quot;always(必须加上引号)&quot;|&quot;never(没有引号)&quot;</span>
        <span class="token string-property property">&#39;no-empty-source&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 关闭禁止空源码</span>
        <span class="token string-property property">&#39;selector-class-pattern&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 关闭强制选择器类名的格式</span>
        <span class="token string-property property">&#39;property-no-unknown&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 禁止未知的属性(true 为不允许)</span>
        <span class="token string-property property">&#39;block-opening-brace-space-before&#39;</span><span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span> <span class="token comment">//大括号之前必须有一个空格或不能有空白符</span>
        <span class="token string-property property">&#39;value-no-vendor-prefix&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 关闭 属性值前缀 --webkit-box</span>
        <span class="token string-property property">&#39;property-no-vendor-prefix&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 关闭 属性前缀 -webkit-mask</span>
        <span class="token string-property property">&#39;selector-pseudo-class-no-unknown&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token comment">// 不允许未知的选择器</span>
            <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">ignorePseudoClasses</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;global&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;v-deep&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;deep&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略属性，修改element默认样式的时候能使用到</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置package-json-2" tabindex="-1"><a class="header-anchor" href="#配置package-json-2" aria-hidden="true">#</a> 配置package.json</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;lint:style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint src/**/*.{css,scss,vue} --cache --fix&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commitlint配置" tabindex="-1"><a class="header-anchor" href="#commitlint配置" aria-hidden="true">#</a> commitlint配置</h2><p>可以对commit信息进行检查是否符合规范</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> @commitlint/config-conventional @commitlint/cli <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>@commitlint/cli</li><li>@commitlint/config-conventional</li></ul><h3 id="配置commitlint-config-cjs" tabindex="-1"><a class="header-anchor" href="#配置commitlint-config-cjs" aria-hidden="true">#</a> 配置commitlint.config.cjs</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@commitlint/config-conventional&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 校验规则</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;type-enum&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token number">2</span><span class="token punctuation">,</span>
            <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span>
                <span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;fix&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;docs&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;refactor&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;perf&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;chore&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;revert&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;type-case&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;type-empty&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;scope-empty&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;scope-case&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;subject-full-stop&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;subject-case&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;header-max-length&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置package-json-3" tabindex="-1"><a class="header-anchor" href="#配置package-json-3" aria-hidden="true">#</a> 配置package.json</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
     <span class="token property">&quot;commitlint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commitlint --config commitlint.config.cjs -e -V&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置后，配合husky在提交commit填写commit信息的时候，就需要使用配置中的规则，否则无法正常提交</p><h3 id="commitizen" tabindex="-1"><a class="header-anchor" href="#commitizen" aria-hidden="true">#</a> commitizen</h3><p>使用commitizen工具可以帮助我们编写符合规范的commit信息</p><p>安装 <code>pnpm add commitizen -D</code></p><p>使用 <code>commitizen</code>安装 <code>cz-conventional-changelog</code>，并且初始化 <code>cz-conventional-changelog</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pnpx commitizen init cz-conventional-changelog <span class="token parameter variable">--pnpm</span> --save-dev --save-exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成后，package.json中有相关commitizen的配置信息</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//自己配置commit</span>
    <span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span><span class="token string">&quot;./node_module/cz-conventional-changelog&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置husky" tabindex="-1"><a class="header-anchor" href="#配置husky" aria-hidden="true">#</a> 配置husky</h2><p>虽然在项目中已经集成好了代码检查工具并配置好了，但是需要每次手动去执行命令才会格式化代码，很麻烦</p><p>而且如果没有格式化就提交到远程仓库中，那么这个规范也就没有用了</p><p>需要强制让开发者按照代码规范来提交代码，就可以使用husky</p><blockquote><p>husky是在代码提交之前触发git hook来完成提交前的事情，如代码格式化</p></blockquote><p>安装husky <code>pnpm add husky -D</code></p><p>初始化husky <code>npx husky-init</code>，会在根目录下生成一个**.husky<strong>目录，在这个目录下会有一个</strong>pre-commit**文件，这个文件里面的命令在我们执行commit的时候就会执行</p><p>可以自定义husky的配置目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>husky <span class="token function">install</span> gitHooks/husky
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就会在项目根目录下创建gitHooks目录和husky子目录</p><h3 id="npm生命周期" tabindex="-1"><a class="header-anchor" href="#npm生命周期" aria-hidden="true">#</a> npm生命周期</h3><p>初始化husky时也会在 <code>package.json</code>中的 <code>script</code>创建一个 <code>prepare</code>命令，<code>prepare</code>是<strong>npm脚本命令操作的生命周期</strong>中的一个阶段，执行 <code>install</code>的时候会触发该操作</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>npm7+执行install命令时，按照顺序依次执行对应的命令：</p><ul><li>preinstall -&gt; install -&gt; postinstall -&gt; prepublish -&gt; preprepare -&gt; postprepare</li></ul><h3 id="设置githook" tabindex="-1"><a class="header-anchor" href="#设置githook" aria-hidden="true">#</a> 设置githook</h3><h4 id="pre-commit钩子" tabindex="-1"><a class="header-anchor" href="#pre-commit钩子" aria-hidden="true">#</a> pre-commit钩子</h4><p>在提交commit信息前执行的钩子</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

<span class="token function">pnpm</span> run <span class="token function">format</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的意思是在commit前先执行 <code>pnpm run format</code>，格式化代码，<strong>但没有提交到暂存库中</strong>，需要<code>git add .</code>将格式化后的代码再提交一次（使用<a href="#%E9%85%8D%E7%BD%AElint-staged">lint-staged</a>解决这个问题）</p><h4 id="commit-msg钩子" tabindex="-1"><a class="header-anchor" href="#commit-msg钩子" aria-hidden="true">#</a> commit-msg钩子</h4><p>这个钩子会拦截提交的commit信息，对信息进行分析，使用commitlint检查提交commit信息是否符合规范</p><p>新建一个 <code>commit-msg</code>钩子文件</p><p><code> npx husky add .husky/commit-msg</code></p><p>在填写完commit信息时执行 <code>commit-msg</code>钩子检测书写的commit是否符合规则</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

npx --no-install commitlint <span class="token parameter variable">--edit</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置lint-staged" tabindex="-1"><a class="header-anchor" href="#配置lint-staged" aria-hidden="true">#</a> 配置lint-staged</h2><p>提交代码的时候，我们只希望对提交的部分代码进行lint检查，而不影响其他代码，这时就需要使用lint-staged工具</p><p>这个工具一般结合husky一起使用，它能够让husky的hook触发的命令<strong>只作用于git add到暂存区的文件</strong></p><p>安装 <code>pnpm add lint-staged -D</code></p><p>在 <code>package.json</code>中配置 <code>lint-staged</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;pnpm run format&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>pre-commit</code>钩子</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>
<span class="token comment">#原来的</span>
<span class="token function">pnpm</span> run <span class="token function">format</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token comment">#使用lint-staged后，修改为执行lint-staged</span>
<span class="token function">npm</span> run lint-staged

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样配置后，当提交 <code>commit</code>的时候，就会触发 <code>pre-commit</code>钩子，钩子执行 <code>lint-staged</code>配置的脚本，实现提交代码时<strong>只检测暂存区</strong>的文件</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,79),u={href:"https://www.bilibili.com/video/BV1Xh411V7b5",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/lhz_333/article/details/126461947",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7256975111563100217",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/jiaoshou/p/12250278.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7243311106684862521",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7257182484046643258",target:"_blank",rel:"noopener noreferrer"};function g(y,h){const a=p("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[n("a",u,[s("尚硅谷Vue项目实战硅谷甄选，vue3项目+TypeScript前端项目一套通关"),e(a)])]),n("p",null,[n("a",d,[s("husky + lint-staged + commitizen 配置提交代码规范_husky lint-staged_倔强的小绵羊的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",k,[s("前端团队规范——husky + lint-staged 构建代码检查工作流（兼容Sourcetree） - 掘金 (juejin.cn)"),e(a)])]),n("p",null,[n("a",m,[s("lint-staged 使用教程 - 较瘦 - 博客园 (cnblogs.com)"),e(a)])]),n("p",null,[s("美化commit内容"),n("a",v,[s("采用 cz-customizable 规范代码提交信息 - 掘金 (juejin.cn)"),e(a)])]),n("p",null,[s("美化commit和CHANGELOG内容"),n("a",b,[s("第六章-git commit的提交规范+commit-message+changlog - 掘金 (juejin.cn)"),e(a)])])])}const q=t(c,[["render",g],["__file","husky.html.vue"]]);export{q as default};
