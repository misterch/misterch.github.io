import{_ as o,r as c,o as p,c as i,b as n,d as s,e,a as t}from"./app-d4c6289a.js";const l={},r=t(`<h2 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h2><p><code>Buffer</code>类是JavaScript中<code>Uint8Array</code>的子类，可以将<code>Buffer</code>看成一个<strong>储存二进制</strong>的数组，数组中的每一项可以<strong>保存8位二进制数</strong>，即数组中每一项可以保存<strong>1字节数据</strong></p><p><code>1Byte</code>可以表示<code>00000000</code>至<code>11111111</code>，即<code>2^8=256种状态</code></p><p><code>Buffer</code>中的每一项使用<strong>十六进制</strong>表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建数组长度为3的Buffer对象，每项可以保存1个字节（8bit）的数据，总共可以保存3字节（24bit）的数据</span>
<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">//&lt;Buffer 31 32 33&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Uint8Array</code>：数组每项最多只能储存最大8bit（1byte）共<code>2^8=256</code>种状态</p><ul><li>二进制：0000 0000 - 1111 1111</li><li>十六进制：00 - FF</li></ul><p><code>Uint16Array</code>：数组每项最多只能储存最大16bit（2byte）共<code>2^16=65535</code>种状态</p><ul><li>二进制：0000 0000 0000 0000 - 1111 1111 1111 1111</li><li>十六进制：0000 - FFFF</li></ul><p>如果<code>Uint8Array(4)</code>的长度是<code>4byte（4*8=32bit）</code>，[0b1111111,0b1111111,0,0]=[127,127,0,0]=[0x7f,0x7f，0,0]</p><p>用<code>Uint16Array</code>表示长度为<code>2byte（24bit）</code>，[0b111111101111111,0,0]=[32639,0]</p><p>用<code>Uint32Array</code>表示长度为<code>1byte（32bit）</code>，[0b111111101111111]=[32639,0]</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//为方便理解，使用有符号整数数组</span>
<span class="token comment">//创建一个4字节的TypedArray</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">// -128(-2^7)~ 127(2^7 - 1)</span>
<span class="token keyword">var</span> u8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span>4arr<span class="token punctuation">)</span>
<span class="token comment">//u8 = [0b01111111,0b01111111,0,0]</span>
<span class="token comment">//使用Int16Array来表示的话，因为每项最大可以储存2字节，所以长度为4的Int8Array可以表示长度为2的Int16Array，即Int8Array的每两项合并为Int16Array的一项</span>
<span class="token comment">//即u16 = [0b0111111101111111,0]</span>
<span class="token comment">//使用十进制表示 u16 = [32639,0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ascii" tabindex="-1"><a class="header-anchor" href="#ascii" aria-hidden="true">#</a> ASCII</h2><p>计算机内部所有信息最终都是一个二进制值，每个二进制位有两种状态<code>0</code>和<code>1</code>，8个二进制位可以表示有2^8=256种状态，每个状态可以对应一个符号，从<code>00000000</code>到<code>11111111</code>。</p><p>由美国制定的一套字符编码，对英语字符与二进制位之间的关系做了统一的规定，被称为ASCII码。</p>`,10),d={href:"https://tool.oschina.net/commons?type=4",target:"_blank",rel:"noopener noreferrer"},u=n("code",null,"SPACE",-1),k=n("code",null,"00100000",-1),b=n("code",null,"A",-1),m=n("code",null,"01000001",-1),v=t(`<p>每个字符占1个字节</p><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h2><p>定义：Base64是一种二进制到文本的编码方案，将任意二进制数据转换为由64个可打印ASCII字符组成的字符串</p><p>用途：通常用于文本协议（HTTP、JSON）中安全传输二进制数据</p><p>特点：</p><ul><li>每3字节二进制数据（即3*8=24bit）被编码成4个Base64字符（每个字符占6位）</li><li>若原始数据长度不足3字节，会用<code>=</code>填充</li></ul><p><img src="https://i-blog.csdnimg.cn/blog_migrate/6bd937a20b29714171b1669cfca0d4ab.png" alt=""></p><h3 id="转换原理" tabindex="-1"><a class="header-anchor" href="#转换原理" aria-hidden="true">#</a> 转换原理</h3><ol><li>将待转换的字符串<strong>每三个字节为一组</strong>，每个字节8bit，总共24bit二进制位（6和8最小公倍数为24）</li><li>将24个二进制位<strong>每6个一组</strong>（从左往右分），共分为4组</li><li>每组前面添加<strong>两个0</strong>，每组6个变为8个二进制位，共32个二进制位，即<strong>4个字节</strong></li><li>根据Base64编码对照表获得的对应的值</li></ol><h3 id="btoa—编码为base64" tabindex="-1"><a class="header-anchor" href="#btoa—编码为base64" aria-hidden="true">#</a> btoa—编码为Base64</h3><p><strong>功能：<strong>将</strong>二进制字符串</strong>（通常是ASCII或UTF-8文本）编码为Base64字符串</p><p><strong>语法：</strong><code>btoa(stringToEncode)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> encoded <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span> <span class="token comment">//SGVsbG8=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li><p>只能直接编码ASCII字符（如a-z、A-Z、0-9、+、/）</p></li><li><p>如果字符串包含非 ASCII 字符（如中文、表情符号等），需先转换为 UTF-8 编码的二进制形式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span> <span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="atob—解码base64" tabindex="-1"><a class="header-anchor" href="#atob—解码base64" aria-hidden="true">#</a> atob—解码Base64</h3><p><strong>功能</strong>：将Base64字符串解码为原始二进制字符串</p><p><strong>语法</strong>：<code>atob(encodedStr)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> decoded <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">&quot;SGVsbG8=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Hello&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><ul><li>解码结果通常是ASCII或二进制字符串</li><li>如果原始内容是UTF-8文本（如中文），需要进一步处理</li></ul><h2 id="将buffer转换成字符" tabindex="-1"><a class="header-anchor" href="#将buffer转换成字符" aria-hidden="true">#</a> 将Buffer转换成字符</h2><p><code>Buffer</code>储存的是一组由二进制组成的数组，为方便显示使用十六进制显示</p><p>现在有一个Buffer数据，在计算机内部是这样的</p><p><code>001100010011001000110011</code></p><p>使用<code>console.log</code>来在控制台打印，显示的是十六进制格式</p><p><code>&lt;Buffer 31 32 33&gt;</code></p><p>将Buffer转换为ASCII编码格式的字符串</p><p><code>Uint8Array</code>中，每项最大能储存<strong>2^8=256</strong>种状态，刚好能储存整个ASCII字符集</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建长度为3的Uint8Array数组,用来模拟二进制数据</span>
<span class="token keyword">const</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">//存入16进制数据</span>
buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x31</span>
buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x32</span>
buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>String.fromCharCode(code)</code>可以传入<code>unicode</code>编码返回字符串</p><p>使用<code>charCodeAt(str)</code>可以获得字符串所对应的<code>unicode</code>编码</p><p><code>unicode</code>字符集包含世界上几乎所有字符的标准字符编码系统</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token operator">...</span>buf<span class="token punctuation">)</span> <span class="token comment">//123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="处理非ascii字符-utf-8" tabindex="-1"><a class="header-anchor" href="#处理非ascii字符-utf-8" aria-hidden="true">#</a> 处理非ASCII字符（UTF-8）</h2><ul><li><p>Node环境</p><p>使用<code>Buffer</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;你好&#39;</span>
<span class="token comment">//将utf-8字符串转换成buffer</span>
<span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token comment">// 编码</span>
<span class="token keyword">const</span> base64 <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 解码</span>
<span class="token keyword">const</span> decodeStr <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>浏览器环境</p><p>使用<code>TextEncoder</code>和<code>TextDecoder</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">encodeBase64</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//将utf-8字符串编码成Buffer</span>
  <span class="token comment">// Uint8Array([228,189,160,229,165,189])</span>
	<span class="token keyword">const</span> arrayBuffer <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  <span class="token comment">// 接收多个unicode值，返回unicode编码的字符，也可以说是ascii字符</span>
  <span class="token comment">// 228-&gt;ä, 189-&gt;½</span>
  <span class="token keyword">const</span> ascii <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token operator">...</span>arrayBuffer<span class="token punctuation">)</span>
	<span class="token comment">//base64编码</span>
	<span class="token keyword">const</span> base64 <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span>ascii<span class="token punctuation">)</span>
  <span class="token keyword">return</span> base64
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span><span class="token parameter">base64</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 将base64解码成ascii字符</span>
  <span class="token keyword">const</span> ascii <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span>
  <span class="token comment">// 将ascii字符串一一对应字符的ascii码值</span>
  <span class="token keyword">const</span> asciiArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>ascii<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token operator">=&gt;</span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 将数组转换成Uint8Array</span>
  <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>asciiArr<span class="token punctuation">)</span>
  <span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>
  <span class="token keyword">return</span> str
<span class="token punctuation">}</span>
<span class="token comment">//解码，将base64编码解码成原始数据</span>
<span class="token keyword">const</span> base64ToBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Uint8Array</code>每项可以表示1字节的数据，而ASCII字符集的每个字符等于1字节，所以<code>Uint8Array</code>的每项可以一对一表示一个ASCII字符，转换成base64时不会产生非ASCII字符集转换错误问题</p>`,38),f=n("iframe",{height:"600",scrolling:"no",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true",src:"https://stackblitz.com/edit/stackblitz-starters-83v38lwz?file=index.js"},null,-1),g=t('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>ASCII是字符集，Base64是编码方案</li><li>ASCII直接表示字符，Base64表示二进制数据的编码形式</li><li>Base64编码结果完全有ASCII字符组成</li><li>非ASCII字符需通过字符集转为二进制，再Base64编码</li><li><code>Uint8Array</code>每项能储存<strong>8bit（1Byte）<strong>数据，即一个字节可以表示</strong>2^8=256</strong>种状态</li><li>标准ASCII字符集包含128个字符，直范围0到127（00000000-01111111）；拓展ASCII包含剩下的128个拓展字符</li><li>ASCII每个字符占用1字节（8bit），而<code>Uint8Array</code>每位也是储存1字节数据，因此<code>Uint8Array</code>可以一对一表示ASCII字符集</li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',3),h={href:"https://www.json.cn/document/base64/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://c.biancheng.net/c/ascii/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://misterch.github.io/blogs/node/2024/buffer.html",target:"_blank",rel:"noopener noreferrer"};function I(w,_){const a=c("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[n("a",d,[s("ASCII码"),e(a)]),s("一共规定了128个字符的编码（无符号正整数，二进制第一位始终为0），比如空格"),u,s("是32（二进制"),k,s("），大写字母"),b,s("是65（二进制"),m,s("）。")]),v,f,g,n("p",null,[n("a",h,[s("Base64编码对照表 - JSON中文网"),e(a)])]),n("p",null,[n("a",y,[s("ASCII码对照表，ASCII码一览表（非常详细） - C语言中文网"),e(a)])]),n("p",null,[n("a",A,[s("Node.js中的Buffer类及字符编码 | Ben's Blog"),e(a)])])])}const S=o(l,[["render",I],["__file","binarytobase64.html.vue"]]);export{S as default};
