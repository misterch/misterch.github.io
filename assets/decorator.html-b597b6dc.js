import{_ as s,o as a,c as t,b as n,d as p,a as e}from"./app-d4c6289a.js";const o={},c=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,"是一项实验性特性，未来版本可能会发生改变"),n("p",null,"typescript中需要开启才能使用"),n("p",null,"装饰器只能用在类及类的属性和方法上，是与类相关的语法"),n("p",null,[p("Typescript使用装饰器需要开启 "),n("code",null,"experimentalDecoration: true")])],-1),l=e(`<h2 id="解决的问题" tabindex="-1"><a class="header-anchor" href="#解决的问题" aria-hidden="true">#</a> 解决的问题</h2><ol><li>分离关注点</li></ol><p>关注点的问题：在定义某个东西时，应该最清楚该东西的情况</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginId <span class="token operator">=</span> loginId
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginpwd <span class="token operator">=</span> loginpwd
  <span class="token punctuation">}</span>
  
  <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//例如在定义loginid时是最清楚loginid的情况，但现在需要在该函数中对属性进行判断</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>重复代码</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginId <span class="token operator">=</span> loginId
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginpwd <span class="token operator">=</span> loginpwd
  <span class="token punctuation">}</span>
  
  <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loginid<span class="token punctuation">.</span>length<span class="token operator">&gt;=</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginid<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">//重复代码</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loginpwd<span class="token punctuation">.</span>length<span class="token operator">&gt;=</span><span class="token number">6</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginpwd<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>产生以上问题的根源：某些信息，在定义时，能够附加的信息量有限</p><p>例如定义了一个loginid，是一个string类型，但是无法告诉系统loginid长度在3-5之间</p></blockquote><h2 id="装饰器作用" tabindex="-1"><a class="header-anchor" href="#装饰器作用" aria-hidden="true">#</a> 装饰器作用</h2><p>为某些<strong>属性、类、参数、方法</strong>提供元数据信息</p><p>元数据：描述数据的数据</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
  @<span class="token keyword">require</span> <span class="token comment">//描述数据loginid的元数据</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">range</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
  loginid<span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装饰器本质" tabindex="-1"><a class="header-anchor" href="#装饰器本质" aria-hidden="true">#</a> 装饰器本质</h2><p>在JS中，装饰器本质是一个<strong>函数</strong></p><p>装饰器可以修饰类、属性、方法、参数</p><h2 id="装饰器类型" tabindex="-1"><a class="header-anchor" href="#装饰器类型" aria-hidden="true">#</a> 装饰器类型</h2><h3 id="类装饰器" tabindex="-1"><a class="header-anchor" href="#类装饰器" aria-hidden="true">#</a> 类装饰器</h3><h4 id="参数是类本身" tabindex="-1"><a class="header-anchor" href="#参数是类本身" aria-hidden="true">#</a> 参数是类本身</h4><p>装饰器本质是一个函数，类装饰器接收一个参数，这个<strong>参数是类本身</strong></p><blockquote><p>类装饰器的运行时间：在类定义后直接运行</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定义一个类就会执行&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>new ()=&gt;object</code>表示约束<code>target</code>是一个构造函数（类）</p></blockquote><h4 id="可以返回一个新的类" tabindex="-1"><a class="header-anchor" href="#可以返回一个新的类" aria-hidden="true">#</a> 可以返回一个新的类</h4><p><strong>返回的新的类会替换掉装饰目标</strong></p><p>类装饰器可以返回一个新的类，但不建议这么做，因为类装饰器是一个<strong>通用</strong>的函数，在继承target后无法知道继承了什么属性和方法，无法得到类型检查，会报错</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//target无法确认是一个什么类型，B继承后也无法知道继承了什么属性和方法</span>
  <span class="token comment">//target是在运行时才能确定的，是动态的</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token keyword">extends</span> <span class="token class-name">target</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span> <span class="token comment">//报错</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span>
  prop1<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;A的属性&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prop1<span class="token punctuation">)</span><span class="token comment">//可以调用，因为继承了A</span>
<span class="token comment">//a是B的实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造函数有参数" tabindex="-1"><a class="header-anchor" href="#构造函数有参数" aria-hidden="true">#</a> 构造函数有参数</h4><p>如果构造函数有参数，则需要这样写<code>new (...args:any[])=&gt;object</code>来约束<code>target</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> prop1<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="给装饰器加额外信息-装饰器工厂" tabindex="-1"><a class="header-anchor" href="#给装饰器加额外信息-装饰器工厂" aria-hidden="true">#</a> 给装饰器加额外信息（装饰器工厂）</h4><p>装饰器是一个函数，函数接收类本身，如果在给类使用装饰器时就调用了装饰器，这时装饰器应该要返回一个函数，返回的这个函数才是类装饰器</p><p><a href="#%E8%A3%85%E9%A5%B0%E5%99%A8%E5%B7%A5%E5%8E%82">装饰器工厂</a>：调用函数后返回一个装饰器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>msg<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>object<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//给类添加属性</span>
    target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>prop <span class="token operator">=</span> msg
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span><span class="token punctuation">(</span><span class="token string">&#39;修饰A的装饰器&#39;</span><span class="token punctuation">)</span><span class="token comment">//调用了装饰器函数，就需要返回一个装饰器</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span>
  <span class="token comment">//开启索引签名，就可以访问类中未必有的属性</span>
  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;my name is&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//如果A中没有开启索引签名，会报错</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token comment">//ben 修饰A的装饰器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多个装饰器" tabindex="-1"><a class="header-anchor" href="#多个装饰器" aria-hidden="true">#</a> 多个装饰器</h4><p>多个装饰器，执行顺序<strong>由下往上</strong>执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>object

<span class="token keyword">function</span> <span class="token function">d1</span><span class="token punctuation">(</span>target<span class="token operator">:</span>constructor<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">d2</span><span class="token punctuation">(</span>target<span class="token operator">:</span>constructor<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">d1</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">d2</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//先输出d2后输出d1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果调用了装饰器，按照调用顺序从上往下执行，调用返回了一个装饰器，装饰器执行顺序不变，依旧是从下往上执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>object

<span class="token keyword">function</span> <span class="token function">d1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d1&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token operator">:</span>constructor<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d1 deco&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">d2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d2&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token operator">:</span>constructor<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d2 deco&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">d1</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">d2</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//先按照函数调用顺序执行输出d1，d2，后按照装饰器的调用顺序执行输出d2 deco，d1 deco </span>
<span class="token comment">//d1-&gt;d2-&gt;d2 deco-&gt;d1 deco </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从编译结果也可以看出来</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//调用d1返回装饰器，调用d2返回装饰器</span>
<span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">d1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">d2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">A</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性装饰器" tabindex="-1"><a class="header-anchor" href="#属性装饰器" aria-hidden="true">#</a> 属性装饰器</h3><p>属性装饰器也是一个函数，函数需要<strong>两个参数</strong></p><ol><li>如果是静态属性，则为类本身；如果是实例属性，则为类的原型（prototype）</li><li>固定为一个字符串，表示属性名</li></ol><h4 id="实例属性" tabindex="-1"><a class="header-anchor" href="#实例属性" aria-hidden="true">#</a> 实例属性</h4><p>装饰器的第一个参数target是类的原型对象</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>prop<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//属性是实例属性，target是类的原型对象</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token operator">===</span><span class="token constant">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  prop1<span class="token operator">:</span><span class="token builtin">string</span>
  
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  prop2<span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态属性" tabindex="-1"><a class="header-anchor" href="#静态属性" aria-hidden="true">#</a> 静态属性</h4><p>装饰器的第一个参数target是类本身</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>prop<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>prop<span class="token punctuation">)</span>
  
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  <span class="token keyword">static</span> prop1<span class="token operator">:</span><span class="token builtin">string</span>
  
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  prop2<span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法装饰器" tabindex="-1"><a class="header-anchor" href="#方法装饰器" aria-hidden="true">#</a> 方法装饰器</h3><p>方法装饰器有三个参数</p><ol><li>对于静态成员就是类本身，对于实例对象就是类的原型对象</li><li>方法的名字</li><li>方法的属性描述符，value就是目对象的内容</li></ol><p>可以修改类的方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">Get</span> <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> deco<span class="token operator">:</span><span class="token function-variable function">MethodDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>desc<span class="token operator">:</span>PropertyDescriptor<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
			desc<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> deco
<span class="token punctuation">}</span>
<span class="token comment">//即将丢弃的函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">outdated</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>attr<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>desc<span class="token operator">:</span>PropertyDescriptor<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> old <span class="token operator">=</span> desc<span class="token punctuation">.</span>value
  desc<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>attr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">此方法即将丢弃</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token function">old</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Http</span> <span class="token punctuation">{</span>
	<span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;http://www.test.com/api/getList?page=1&#39;</span><span class="token punctuation">)</span>
	<span class="token function">getList</span><span class="token punctuation">(</span>data<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//执行getList方法的时候就会执行Get装饰器，请求数据，然后返回给getList</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">outdated</span></span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装饰器工厂" tabindex="-1"><a class="header-anchor" href="#装饰器工厂" aria-hidden="true">#</a> 装饰器工厂</h3><p>产生装饰器的函数</p><p>是一个高阶函数，这个函数返回一个装饰器</p><p>柯里化：将原本接收多个参数的函数变成每次只接收一个参数的函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">Base</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> deco<span class="token operator">:</span><span class="token function-variable function">ClassDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		<span class="token comment">//target就是A的构造函数</span>
		target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> name
		target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hihi&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> deco
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Base</span></span><span class="token punctuation">(</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数装饰器" tabindex="-1"><a class="header-anchor" href="#参数装饰器" aria-hidden="true">#</a> 参数装饰器</h3><p>前端用处不大，比较少用</p><p>依赖注入，依赖倒置</p><p>函数有三个参数</p><ol><li>静态方法：类本身；实例方法：类的原型</li><li>方法名称</li><li>在参数列表中的索引</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MyMath</span> <span class="token punctuation">{</span>
  <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>method<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>index<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//MyMath,sum,1</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>method<span class="token punctuation">,</span>index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一些有用的库" tabindex="-1"><a class="header-anchor" href="#一些有用的库" aria-hidden="true">#</a> 一些有用的库</h2><p><code>reflect-metadata</code>：可以很方便地添加元数据</p><p>使用该库并开启<code>emitDecoratoreMedadata</code>，在TS编译结果中会将约束的类型作为元数据加入到相应位置，这样TS的类型检查就可以在<strong>运行时</strong>执行</p><p><code>class-validator</code>：可以使用装饰器给属性添加验证规则，使用验证函数对属性进行验证</p><p><code>class-transformer</code>：可以将一个平面对象（例如是服务器返回的一个用户数组对象），利用一个类将其转化成该类的对象，然后就可以使用该类上面的方法</p><h2 id="aop" tabindex="-1"><a class="header-anchor" href="#aop" aria-hidden="true">#</a> AOP</h2><p>AOP：面向切面编程，是一种编程方式，属于面向对象开发</p><p>将一些在业务中共同出现的功能块，横向切分，以达到分离关注点的目的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">RegUser</span><span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  usename<span class="token operator">:</span><span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  pwd<span class="token operator">:</span><span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  gender<span class="token operator">:</span><span class="token string">&#39;male&#39;</span><span class="token operator">|</span><span class="token string">&#39;female&#39;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  age<span class="token operator">:</span><span class="token builtin">number</span>
  <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">{</span>
    <span class="token comment">//save只处理保存到数据库</span>
    <span class="token comment">//但是在保存之前需要对数据进行验证</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//save</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//将验证逻辑从RegUser分离出来，形成一个公共函数，这样无论对RegUser还是其他类型，都可以使用</span>
<span class="token comment">//是一个复杂的验证逻辑业务的横切面，只做验证这个业务，形成单独模块，达到分离关注点的目的</span>
<span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73),i=[c,l];function u(r,d){return a(),t("div",null,i)}const v=s(o,[["render",u],["__file","decorator.html.vue"]]);export{v as default};
