import{_ as n,o as s,c as a,a as e}from"./app-d4c6289a.js";const p={},t=e(`<h2 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型" aria-hidden="true">#</a> 对象类型</h2><h3 id="鸭子辩型法" tabindex="-1"><a class="header-anchor" href="#鸭子辩型法" aria-hidden="true">#</a> 鸭子辩型法</h3><p>即子结构辩型法：目标类型需要某一些特征，赋值的类型只要能满足目标类型的特征就可以</p><p><strong>鸭子辩型法主要使用在对象类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>
  sound<span class="token operator">:</span> <span class="token string">&#39;嘎嘎嘎&#39;</span><span class="token punctuation">,</span>
  <span class="token function">swin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;伪装成鸭子的人&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  sound<span class="token operator">:</span> <span class="token string">&#39;嘎嘎嘎&#39;</span> <span class="token keyword">as</span> <span class="token string">&#39;嘎嘎嘎&#39;</span><span class="token punctuation">,</span>
  <span class="token function">swin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我会模仿鸭子叫，我也会游泳&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//可以正确赋值给Duck类型的变量</span>
<span class="token keyword">const</span> duck<span class="token operator">:</span>Duck <span class="token operator">=</span> person
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值类型子结构符合目标类型的特征，就可以正确赋值</p><h4 id="对象字面量赋值" tabindex="-1"><a class="header-anchor" href="#对象字面量赋值" aria-hidden="true">#</a> 对象字面量赋值</h4><p>如果直接使用<strong>对象字面量</strong>赋值时，会进行更加严格的判断</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>
  sound<span class="token operator">:</span> <span class="token string">&#39;嘎嘎嘎&#39;</span><span class="token punctuation">,</span>
  <span class="token function">swin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token comment">//会对name属性和age属性报错，因为Duck不存在这些属性</span>
<span class="token keyword">const</span> duck<span class="token operator">:</span>Duck <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;伪装成鸭子的人&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  sound<span class="token operator">:</span> <span class="token string">&#39;嘎嘎嘎&#39;</span> <span class="token keyword">as</span> <span class="token string">&#39;嘎嘎嘎&#39;</span><span class="token punctuation">,</span>
  <span class="token function">swin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我会模仿鸭子叫，我也会游泳&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Sum</span><span class="token punctuation">{</span>
  <span class="token punctuation">(</span>num1<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>num2<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>num2<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">number</span>
<span class="token keyword">type</span> <span class="token class-name">Sum</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>num1<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>num2<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><p>传递给目标函数的参数可以少但不能多</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token comment">//forEach函数有三个参数，但可以根据需求要不要使用其他参数</span>
<span class="token comment">//但是不能传多过3个参数</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><p>要求返回必须返回，且类型必须符合要求；不要求返回也可以返回</p>`,16),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","typeCompatibility.html.vue"]]);export{r as default};
