import{_ as p,o as t,c as e,a,b as n,d as s}from"./app-d4c6289a.js";const o={},c=a('<h2 id="什么是面向对象" tabindex="-1"><a class="header-anchor" href="#什么是面向对象" aria-hidden="true">#</a> 什么是面向对象</h2><p>面向对象是编程思想，它提出<strong>一切以对象（划分类）为切入点</strong>思考问题</p><p>其他编程思想</p><ul><li>面向过程：以功能流程为思考切入点，不太适合大型应用</li><li>函数式编程：以数学运算为思考切入点</li></ul><h2 id="类的继承" tabindex="-1"><a class="header-anchor" href="#类的继承" aria-hidden="true">#</a> 类的继承</h2><h3 id="继承的作用" tabindex="-1"><a class="header-anchor" href="#继承的作用" aria-hidden="true">#</a> 继承的作用</h3><p>继承可以描述类与类之间的关系</p><p>如果A和B都是类，并且可以描述为<strong>A是B</strong>，则A和B形成继承关系</p><ul><li>B是父类，A是子类</li><li>B派生A，A继承自B</li><li>B是A的基类，A是B的派生类</li></ul><blockquote><p>篮球是一个类，球是一个类，篮球是球，篮球继承了球</p></blockquote><h3 id="成员的重写" tabindex="-1"><a class="header-anchor" href="#成员的重写" aria-hidden="true">#</a> 成员的重写</h3><p>子类中覆盖父类的成员</p><p>子类重写父类的属性或方法，不能改变类型，需要保证类型的匹配</p>',13),i=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"❗注意：在继承关系中，this的指向是动态的，调用方法时，根据具体的调用者确定this指向"),n("p",null,[s("❗注意：在"),n("strong",null,"子类方法"),s("中，可以使用super访问父类的成员；如果子类没有重写父类成员，this和super都可以使用，但如果子类重写了父类成员，super访问的是父类成员，this访问的是子类成员")])],-1),l=a(`<h3 id="类型匹配" tabindex="-1"><a class="header-anchor" href="#类型匹配" aria-hidden="true">#</a> 类型匹配</h3><p>使用鸭子辩型法</p><p>子类对象始终可以赋值给父类，面向对象中，这种现象叫里氏替换原则</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Tank</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;坦克&#39;</span>
  life<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span>
  <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发射&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">PlayerTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;玩家坦克&#39;</span>
  <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发射&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//hello,我是玩家坦克</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello,我是&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//可以将子类对象赋值给父类对象</span>
<span class="token keyword">const</span> tank<span class="token operator">:</span>Tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayerTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//只能使用共同拥有的属性和方法，父类有的子类一定有，子类有的父类不一定有</span>
tank<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//需要使用instanceof来判断对象是否是具体子类的类型</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>tank <span class="token keyword">instanceof</span> <span class="token class-name">PlayerTank</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  tank<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单根性和传递性" tabindex="-1"><a class="header-anchor" href="#单根性和传递性" aria-hidden="true">#</a> 单根性和传递性</h3><p>单根性：每个类最多只能拥有一个父类</p><p>传递性：如果A是B的父类，并且B是C的父类，则可以认为A也是C的父类</p><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h2><p>有时某个类只表示一个抽象概念，主要用于提取子类共有的成员，而不能直接创建他的对象。该类可以作为抽象类</p><p><code>abstract class Tank{}</code>，给类加上<code>abstract </code>就表示这是一个抽象类</p><h3 id="抽象成员" tabindex="-1"><a class="header-anchor" href="#抽象成员" aria-hidden="true">#</a> 抽象成员</h3><p>父类中，可能知道有些成员是必须存在的，但不知道该成员的值或实现是什么，因此，需要一种强约束，让继承该类的子类，必须实现该成员</p><p>在<strong>抽象类中</strong>的成员前加上<code>abstract</code>表示抽象成员，必须在子类中实现</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Chess</span><span class="token punctuation">{</span>
  x<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  y<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">abstract</span> <span class="token keyword">readonly</span> name<span class="token operator">:</span><span class="token builtin">string</span>
  <span class="token keyword">abstract</span> <span class="token function">move</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>targetY<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设计模式——模板模式" tabindex="-1"><a class="header-anchor" href="#设计模式——模板模式" aria-hidden="true">#</a> 设计模式——模板模式</h3><p>有些方法所有的子类实现的流程完全一致，只是流程中的某个步骤具体实现不一致，可以将该方法提取到父类，在父类中完成整个流程的实现，遇到实现不一致的方法时，将该方法做成抽象方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Chess</span><span class="token punctuation">{</span>
  x<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  y<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">abstract</span> <span class="token keyword">readonly</span> name<span class="token operator">:</span><span class="token builtin">string</span>
  <span class="token function">move</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>targetY<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;边界判断&#39;</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;移动到的位置是否有己方棋子&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token punctuation">,</span>targetY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> targetX
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> targetY
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>targetY<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;马&#39;</span>
  <span class="token comment">//实现抽象方法</span>
  <span class="token keyword">protected</span> <span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>targetY<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h2><p>附着在类上的成员，只能通过类调用，不属于实例对象</p><h3 id="静态方法中的this" tabindex="-1"><a class="header-anchor" href="#静态方法中的this" aria-hidden="true">#</a> 静态方法中的this</h3><p>this指向当前类</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//this指向User</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设计模式——单例模式" tabindex="-1"><a class="header-anchor" href="#设计模式——单例模式" aria-hidden="true">#</a> 设计模式——单例模式</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> _board<span class="token operator">?</span><span class="token operator">:</span>ChessBoard
  <span class="token keyword">static</span> <span class="token function">createBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>ChessBoard<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_board<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_board
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_board
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> b1 <span class="token operator">=</span> ChessBoard<span class="token punctuation">.</span><span class="token function">createBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b2 <span class="token operator">=</span> ChessBoard<span class="token punctuation">.</span><span class="token function">createBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b1<span class="token operator">===</span>b2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="再谈接口" tabindex="-1"><a class="header-anchor" href="#再谈接口" aria-hidden="true">#</a> 再谈接口</h2><p>接口用于约束类、对象、函数，是一个类型契约</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> type<span class="token operator">:</span><span class="token builtin">string</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token keyword">public</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello,我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;狗&#39;</span>
  <span class="token comment">//计算</span>
  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">//跳舞</span>
  <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;狮子&#39;</span>
  <span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;老虎&#39;</span>
  <span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Monkey</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;猴子&#39;</span>
  <span class="token comment">//平衡</span>
  <span class="token function">singlePlankBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">//钢丝</span>
  <span class="token function">wireWalking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token keyword">const</span> animals<span class="token operator">:</span>Animals<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;二狗&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token string">&#39;悟空&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Lion</span><span class="token punctuation">(</span><span class="token string">&#39;狮子王&#39;</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token string">&#39;王老虎&#39;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>

animals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//根据判断类型来使用某种能力</span>
  <span class="token comment">//类型中的能力可能会变化的，一旦能力变化可能就会出错</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Lion</span> <span class="token operator">||</span> a <span class="token keyword">instanceof</span> <span class="token class-name">Tiger</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    a<span class="token punctuation">.</span><span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    a<span class="token punctuation">.</span><span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个类都有各自的能力，如果不使用接口实现时，会有一些问题</p><ol><li>对能力（成员函数）没有强约束力</li><li>容易将类型和能力耦合在一起（使用能力前却要判断类型，会出现问题。类型的能力可能会变化）</li></ol><blockquote><p>面向对象领域中的接口的语义：表达了某个类是否拥有某种能力</p><p>某个类具有某种能力，就是实现了某种接口</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FireShow</span><span class="token punctuation">{</span>
  <span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
  <span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BalanceShow</span><span class="token punctuation">{</span>
  <span class="token function">singlePlankBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
  <span class="token function">wireWalking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WisdomShow</span><span class="token punctuation">{</span>
  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
  <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类实现接口</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> implement WisdomShow<span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;狗&#39;</span>
  <span class="token comment">//计算</span>
  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">//跳舞</span>
  <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> implement FireShow<span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;狮子&#39;</span>
  <span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> implement FireShow<span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;老虎&#39;</span>
  <span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Monkey</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> implement BalanceShow<span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;猴子&#39;</span>
  <span class="token comment">//平衡</span>
  <span class="token function">singlePlankBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">//钢丝</span>
  <span class="token function">wireWalking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> animals<span class="token operator">:</span>Animals<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;二狗&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token string">&#39;悟空&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Lion</span><span class="token punctuation">(</span><span class="token string">&#39;狮子王&#39;</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token string">&#39;王老虎&#39;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型保护函数" tabindex="-1"><a class="header-anchor" href="#类型保护函数" aria-hidden="true">#</a> 类型保护函数</h3><p>通过调用该函数，会触发TS的类型保护</p><p>书写类型保护函数时，判断某个对象是不是某个接口（类）的时候，这个对象不需要具体的类型，是object类型就可以</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">hasFireShow</span><span class="token punctuation">(</span>ani<span class="token operator">:</span>object<span class="token punctuation">)</span><span class="token operator">:</span>ani <span class="token keyword">is</span> FireShow<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ani <span class="token keyword">as</span> FireShow<span class="token punctuation">)</span><span class="token punctuation">.</span>singleFire <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ani <span class="token keyword">as</span> FireShow<span class="token punctuation">)</span><span class="token punctuation">.</span>doubleFire<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>


animals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//a: Animals &amp; FireShow</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasFireShow</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    a<span class="token punctuation">.</span><span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    a<span class="token punctuation">.</span><span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引器" tabindex="-1"><a class="header-anchor" href="#索引器" aria-hidden="true">#</a> 索引器</h2><p>格式：<code>对象[值]</code></p><p>在类中，索引器需要写在类的最顶端位置</p><p>在TS中，默认情况下，不对索引器做严格的类型检查</p><p>使用配置<code>noImplicitAny</code>开启对隐式any的检查</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> User<span class="token operator">:</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token builtin">string</span>
  age<span class="token operator">:</span><span class="token builtin">number</span>
  gender<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token operator">|</span><span class="token string">&#39;female&#39;</span>
  <span class="token punctuation">[</span>prop<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">|</span>object
<span class="token punctuation">}</span>

User<span class="token punctuation">[</span><span class="token string">&#39;favor&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;football&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;music&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，TS不允许<strong>动态</strong>给类增加成员</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>prop<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">|</span>object
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token keyword">public</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> ben <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token comment">//动态增加属性</span>
ben<span class="token punctuation">[</span><span class="token string">&quot;favor&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;music&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;movie&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="this指向约束" tabindex="-1"><a class="header-anchor" href="#this指向约束" aria-hidden="true">#</a> this指向约束</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> ben <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//this:any</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> benFn <span class="token operator">=</span> ben<span class="token punctuation">.</span>sayHello
<span class="token function">benFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//this指向windows</span>


<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token keyword">public</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//this:User</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b1Fn <span class="token operator">=</span> b1<span class="token punctuation">.</span>sayHello
<span class="token comment">//在class中使用的是严格模式，在用非对象调用方法时，this指向undefined</span>
<span class="token function">b1Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//this指向undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置<code>noImplicitThis</code>开启对隐式this的检查，当检查到this是any类型会报错</p><blockquote><p>在TS中允许在书写函数时，手动声明函数中this的指向，将this作为函数的第一个参数，该参数只是用于约束this，并不是正真的函数参数，不会出现在编译结果中；参数可以写在this的后面</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token builtin">string</span>
  age<span class="token operator">:</span><span class="token builtin">number</span>
  <span class="token comment">//this并非是函数的参数</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span>User<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> ben<span class="token operator">:</span>User <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//this指向User</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> benFn <span class="token operator">=</span> ben<span class="token punctuation">.</span>sayHello
<span class="token function">benFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//报错</span>



<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token keyword">public</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span>User<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),u=[c,i,l];function r(k,d){return t(),e("div",null,u)}const m=p(o,[["render",r],["__file","oop.html.vue"]]);export{m as default};
