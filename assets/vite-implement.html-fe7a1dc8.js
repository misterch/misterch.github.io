import{_ as n,o as s,c as a,a as t}from"./app-d4c6289a.js";const p={},e=t(`<h2 id="vite概念" tabindex="-1"><a class="header-anchor" href="#vite概念" aria-hidden="true">#</a> Vite概念</h2><p>Vite是一个面向现代浏览器的一个更轻、更快的Web应用开发工具</p><p>Vite基于ECMAScript标准原生模块系统实现</p><table><thead><tr><th></th><th>Vite</th><th>webpack</th></tr></thead><tbody><tr><td>serve</td><td>浏览器请求一个单文件组件，<strong>服务器编译</strong>单文件组件并返回编译结果给浏览器，模块的处理是请求到服务端处理的<br>Vite利用现代浏览器原生支持的ES Module模块化特性，省略打包。对需要编译的文件即时编译，速度非常快（按需编译）</td><td>打包所有模块，当模块太多时会影响打包速度，打包结果储存到内存中，然开开启web服务器，从内存中返回结果给浏览器<br>不管模块是否被使用到都会预先整个项目进行一次打包，编译速度受项目大小影响</td></tr><tr><td>HMR</td><td>立即编译当前所修改的文件</td><td>以这个文件为入口重新build一次，所有涉及的依赖也都会被加载一遍</td></tr><tr><td>build</td><td>使用rollup打包，dynamic import可以进行代码切割然后动态导入（只适用现代浏览器）</td><td></td></tr></tbody></table><h2 id="vite的核心功能" tabindex="-1"><a class="header-anchor" href="#vite的核心功能" aria-hidden="true">#</a> Vite的核心功能</h2><h3 id="静态web服务器" tabindex="-1"><a class="header-anchor" href="#静态web服务器" aria-hidden="true">#</a> 静态Web服务器</h3><p>需要一个开启静态web服务器的cli命令行工具，使用Koa进行开发</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite-cli&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span><span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;koa&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.13.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa-send&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.0.1&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="处理静态文件" tabindex="-1"><a class="header-anchor" href="#处理静态文件" aria-hidden="true">#</a> 处理静态文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span># <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node
<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> send <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-send&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//1.静态文件服务器</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token comment">// 当前运行node程序的根目录</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span><span class="token string">&#39;index.html&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server running at http://localhost:3000&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前cli目录下执行<code>npm link</code>将cli注册到全局</p><p>在web项目根目录中执行<code>vite-cli</code>命令，开启web服务</p><p>服务成功开启，但是会发现有些模块文件无法加载编译，例如vue模块。因为浏览器不支持从node_module加载模块，需要服务器来处理好输出给浏览器</p><h4 id="修改第三方模块的路径" tabindex="-1"><a class="header-anchor" href="#修改第三方模块的路径" aria-hidden="true">#</a> 修改第三方模块的路径</h4><ol><li><code>ctx.body</code>属性是一个<strong>流</strong>，我们要对字符串进行处理，修改字符串中的路径，需要把流转换成字符串</li><li>正则匹配指定路径<code>/(from\\s+[&#39;&quot;])(?![\\.\\/]))/g</code>，只匹配<code>from &#39;</code>、<code>from &quot;</code>和<code>非.</code>或<code>非/</code>开头的路径</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//把流转换为字符串</span>
<span class="token keyword">const</span> <span class="token function-variable function">streamToString</span> <span class="token operator">=</span> <span class="token parameter">stream</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//存储buffer</span>
  <span class="token keyword">const</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">resolve</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>reject<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//2.修改第三方模块的路径</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;application/jacascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//拿到请求的js文件的内容</span>
    <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token comment">//通过正则匹配需要查找并替换的字符串</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from\\s+[&#39;&quot;])(?![\\.\\/]))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;$1/@modules/&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加载第三方模块" tabindex="-1"><a class="header-anchor" href="#加载第三方模块" aria-hidden="true">#</a> 加载第三方模块</h4><p>当请求过来后，判断路径是否含有<code>/@modules/</code>，是的话从<code>node_modules</code>加载模块</p><p>**在处理静态文件之前，**创建一个中间件，这个中间件处理当请求的路径是<code>/@modules/</code>，修改为<code>node_modules中对应的文件路径</code>，然后再交给处理静态文件的中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//3.加载第三方模块，这一步需要写在静态文件服务器中间件之前</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//ctx.path --&gt; /@modules/vue</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">&#39;/@modules/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> moduleName <span class="token operator">=</span> ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> pkgPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span>moduleName<span class="token punctuation">,</span><span class="token string">&#39;package.json&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 加载模块的package.json文件</span>
    <span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>pkgPath<span class="token punctuation">)</span>
    <span class="token comment">// 模块的入口文件的路径</span>
    ctx<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/node_modules&#39;</span><span class="token punctuation">,</span>moduleName<span class="token punctuation">,</span>pkg<span class="token punctuation">.</span>module<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 模块路径修改完，交给处理静态文件中间件</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时在浏览器中已经可以正常请求到JavaScript文件，但对于<code>.vue</code>文件和<code>.css</code>文件仍然无法请求到</p><h3 id="编译单文件组件" tabindex="-1"><a class="header-anchor" href="#编译单文件组件" aria-hidden="true">#</a> 编译单文件组件</h3><p>浏览器无法处理main.js中使用import加载的单文件组件和样式文件，只能处理js文件，对于其他模块都需要服务端处理好。将单文件组件编译成js文件返回给浏览器</p><ol><li><p>第一次请求单文件组件</p><p>如请求App.vue，请求返回的是一个<strong>组件选项对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在中间件1和2之间处理单文件组件</span>
<span class="token comment">//读取完静态文件之后处理</span>
<span class="token comment">//单文件组件可能含有第三方模块，在处理第三方模块之前处理单文件组件</span>
<span class="token comment">//4.处理单文件组件</span>
<span class="token keyword">const</span> compilerSfc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/compiler-sfc&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>Readable<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">stringToStream</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
  <span class="token comment">//标识流写完了</span>
  stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> stream
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//将单文件组件的内容转换成字符串</span>
    <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>descriptor<span class="token punctuation">}</span> <span class="token operator">=</span> compilerSfc<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>
    <span class="token keyword">let</span> code
    <span class="token comment">//请求中不含type参数的单文件组件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>
      code <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>script<span class="token punctuation">.</span>content
      code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">export\\s+default\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;const __script = &#39;</span><span class="token punctuation">)</span>
      code <span class="token operator">+=</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        import { render as __render }from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?type=template
        __script.render = __render
        export default __script
      </span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将响应头的content-type设置成application/javascript</span>
    ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span>
    <span class="token comment">//将字符串转换成流，因为下一个中间件(中间件2)是以流的形式处理的</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">stringToStream</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第二次请求单文件组件的模板渲染函数</p><p>如请求<code>App.vue?type=template</code>，请求返回一个render函数，挂载到组件选项对象的render属性中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//处理第二次单文件组件的请求</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>type<span class="token operator">===</span><span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> templateRender <span class="token operator">=</span> compilerSfc<span class="token punctuation">.</span><span class="token function">compilerTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span> descriptor<span class="token punctuation">.</span>template<span class="token punctuation">.</span>content
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  code <span class="token operator">=</span> templateRender<span class="token punctuation">.</span>code
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时浏览器中请求<code>App.vue?type=template</code>已经有内容返回，但仍有一个报错，这个报错的原因是有的模块中使用了只在node环境才的对象，如process对象</p><p>需要在中间件2中处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//2.修改第三方模块的路径</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;application/jacascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//拿到请求的js文件的内容</span>
    <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token comment">//通过正则匹配需要查找并替换的字符串</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> contents
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from\\s+[&#39;&quot;])(?!\\.\\/))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;$1/@modules/&#39;</span><span class="token punctuation">)</span>
    	<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">process\\.env\\.NODE_ENV</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;&quot;development&quot;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h2><p>这里只实现了<code>.vue</code>模块的加载，对于样式、图片等模块没有处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span># <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node
<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> send <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-send&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> compilerSfc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/compiler-sfc&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>Readable<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//把流转换为字符串</span>
<span class="token keyword">const</span> <span class="token function-variable function">streamToString</span> <span class="token operator">=</span> <span class="token parameter">stream</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//存储buffer</span>
  <span class="token keyword">const</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">resolve</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>reject<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//3.加载第三方模块，这一步需要写在静态文件服务器中间件之前</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//ctx.path --&gt; /@modules/vue</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">&#39;/@modules/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> moduleName <span class="token operator">=</span> ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> pkgPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span>moduleName<span class="token punctuation">,</span><span class="token string">&#39;package.json&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 加载模块的package.json文件</span>
    <span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>pkgPath<span class="token punctuation">)</span>
    <span class="token comment">// 模块的入口文件的路径</span>
    ctx<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/node_modules&#39;</span><span class="token punctuation">,</span>moduleName<span class="token punctuation">,</span>pkg<span class="token punctuation">.</span>module<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 模块路径修改完，交给处理静态文件中间件</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//1.静态文件服务器</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token comment">// 当前运行node程序的根目录</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span><span class="token string">&#39;index.html&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//在中间件1和2之间处理单文件组件</span>
<span class="token comment">//读取完静态文件之后处理</span>
<span class="token comment">//单文件组件可能含有第三方模块，在处理第三方模块之前处理单文件组件</span>
<span class="token comment">//4.处理单文件组件</span>
<span class="token keyword">const</span> <span class="token function-variable function">stringToStream</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
  <span class="token comment">//标识流写完了</span>
  stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> stream
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//将单文件组件的内容转换成字符串</span>
    <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>descriptor<span class="token punctuation">}</span> <span class="token operator">=</span> compilerSfc<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>
    <span class="token keyword">let</span> code
    <span class="token comment">//请求中不含type参数的单文件组件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>
      code <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>script<span class="token punctuation">.</span>content
      code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">export\\s+default\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;const __script = &#39;</span><span class="token punctuation">)</span>
      code <span class="token operator">+=</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        import { render as __render }from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?type=template
        __script.render = __render
        export default __script
      </span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>type<span class="token operator">===</span><span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">const</span> templateRender <span class="token operator">=</span> compilerSfc<span class="token punctuation">.</span><span class="token function">compilerTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> descriptor<span class="token punctuation">.</span>template<span class="token punctuation">.</span>content
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      code <span class="token operator">=</span> templateRender<span class="token punctuation">.</span>code
    <span class="token punctuation">}</span>
    <span class="token comment">//将响应头的content-type设置成application/javascript</span>
    ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span>
    <span class="token comment">//将字符串转换成流，因为下一个中间件(中间件2)是以流的形式处理的</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">stringToStream</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//2.修改第三方模块的路径</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;application/jacascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//拿到请求的js文件的内容</span>
    <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token comment">//通过正则匹配需要查找并替换的字符串</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> contents
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from\\s+[&#39;&quot;])(?!\\.\\/))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;$1/@modules/&#39;</span><span class="token punctuation">)</span>
    	<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">process\\.env\\.NODE_ENV</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;&quot;development&quot;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server running at http://localhost:3000&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","vite-implement.html.vue"]]);export{r as default};
