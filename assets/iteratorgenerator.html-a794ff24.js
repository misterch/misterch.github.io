import{_ as e,o as t,c as p,a,b as n,d as s}from"./app-d4c6289a.js";const o={},c=a(`<h2 id="迭代器-iterator" tabindex="-1"><a class="header-anchor" href="#迭代器-iterator" aria-hidden="true">#</a> 迭代器（Iterator）</h2><h3 id="什么是迭代" tabindex="-1"><a class="header-anchor" href="#什么是迭代" aria-hidden="true">#</a> 什么是迭代</h3><p>从一个数据集合中按照一定的顺序，不断取出数据的过程</p><ol><li>迭代和遍历的区别？</li></ol><p>​ 迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完</p><p>​ 遍历强调的是要把整个数据依次全部取出</p><ol start="2"><li>迭代器</li></ol><p>​ 对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象</p><ol start="3"><li>迭代模式</li></ol><p>​ 一种设计模式，用于统一迭代过程，并规范了迭代器规格：</p><ul><li><p>迭代器应该具有得到下一个数据的能力</p></li><li><p>迭代器应该具有判断是否还有后续数据的能力</p></li></ul><h3 id="js中的迭代器" tabindex="-1"><a class="header-anchor" href="#js中的迭代器" aria-hidden="true">#</a> JS中的迭代器</h3><p>JS规定，如果一个对象具有next方法，并且该方法返回一个对象，该对象的格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> 值<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> 是否迭代完成<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则认为该对象是一个迭代器</p><p>含义：</p><ul><li>next方法：用于得到下一个数据</li><li>返回的对象 <ul><li>value：下一个数据的值</li><li>done：boolean，是否迭代完成</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 迭代器创建函数  iterator creator</span>
<span class="token keyword">function</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前的数组下标</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> 
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>
      	<span class="token literal-property property">value</span><span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
      	<span class="token literal-property property">done</span><span class="token operator">:</span> i <span class="token operator">&gt;=</span> arr<span class="token punctuation">.</span>length
    	<span class="token punctuation">}</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> iter1 <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iter2 <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可迭代协议" tabindex="-1"><a class="header-anchor" href="#可迭代协议" aria-hidden="true">#</a> 可迭代协议</h3><p>ES6规定，如果一个对象具有知名符号属性<code>Symbol.iterator</code>，并且属性值是一个迭代器创建函数，则该对象是可迭代的（iterable）</p>`,20),l=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"Q：如何知晓一个对象是否可迭代？"),n("p",null,[s("A：可迭代对象会有一个知名属性"),n("code",null,"Symbol.iterator"),s("，这个属性是一个创建迭代器的方法，"),n("code",null,"obj[Symbol.iterator]"),s("可以返回一个迭代器")])],-1),i=n("h3",{id:"for-of-循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#for-of-循环","aria-hidden":"true"},"#"),s(" for-of 循环")],-1),u=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"for-of"),s("循环用于遍历可迭代对象，即含有知名属性"),n("code",null,"Symbol.iterator"),s("的对象就可以使用"),n("code",null,"for-of"),s("\\")]),n("p",null,[s("对象不是一个可迭代的对象，但通过给对象设置"),n("code",null,"Symbol.iterator"),s("属性的方法就可以变成一个可迭代对象")])],-1),r=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> propName <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> propValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        propName<span class="token punctuation">,</span>
                        propValue
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">done</span><span class="token operator">:</span> i <span class="token operator">&gt;=</span> keys<span class="token punctuation">.</span>length
                <span class="token punctuation">}</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成器-generator" tabindex="-1"><a class="header-anchor" href="#生成器-generator" aria-hidden="true">#</a> 生成器 (Generator)</h2><h3 id="什么是生成器" tabindex="-1"><a class="header-anchor" href="#什么是生成器" aria-hidden="true">#</a> 什么是生成器？</h3><p>生成器是一个通过构造函数Generator创建的对象，生成器既是一个迭代器（有<code>next</code>方法），同时又是一个可迭代对象（有<code>Symbol.iterator</code>）</p><p>如何创建生成器？</p><p>生成器的创建，必须使用生成器函数（Generator Function）</p><p>如何书写一个生成器函数呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//这是一个生成器函数，该函数一定返回一个生成器</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成器函数内部是如何执行的" tabindex="-1"><a class="header-anchor" href="#生成器函数内部是如何执行的" aria-hidden="true">#</a> 生成器函数内部是如何执行的？</h3><p>生成器函数内部是为了给生成器的每次迭代提供的数据</p><p>每次调用生成器的next方法，将导致生成器函数运行到下一个yield关键字位置</p><p><code>yield</code>是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。</p><p>一般用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 迭代器创建函数  iterator creator</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">yield</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> iter1 <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iter2 <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给next方法传参</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;函数开始&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    info <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">2</span> <span class="token operator">+</span> info<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 执行到第3行停止，打印“函数开始”和返回{value:1,done:false}</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//yield 1返回3，执行到第5行停止，打印“3”和返回{value:5,done:false}</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment">//yield 2+info返回9，执行到第6行结束，打印“9”和返回{value:undefined,done:true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成器函数内部调用其他生成器函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string">&quot;a&quot;</span>
    <span class="token keyword">yield</span> <span class="token string">&quot;b&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//相当于</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string">&quot;a&quot;</span>
    <span class="token keyword">yield</span> <span class="token string">&quot;b&quot;</span>
    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有哪些需要注意的细节？</p><p>1). 生成器函数可以有返回值，返回值出现在第一次done为true时的value属性中 2). 调用生成器的next方法时，可以传递参数，传递的参数会交给yield表达式的返回值 3). 第一次调用next方法时，传参没有任何意义 4). 在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号</p><p>生成器的其他API</p><ul><li>return方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束，并且return的值作为value的值</li><li>throw方法：调用该方法，可以在生成器中产生一个错误</li></ul>`,22),d=[c,l,i,u,r];function k(v,m){return t(),p("div",null,d)}const y=e(o,[["render",k],["__file","iteratorgenerator.html.vue"]]);export{y as default};
