import{_ as n,o as s,c as a,a as p}from"./app-d4c6289a.js";const t={},e=p(`<p>reduce方法可对数组中每个元素执行一个由开发者提供的reduce函数，将其汇总为<strong>单个返回值</strong>。循环能做的reduce都可做。</p><p>数组求和，数组求积，数组中元素出现的个数，数组去重</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>init<span class="token punctuation">)</span>
<span class="token comment">//prev,累计器累计回调的返回值，【表示上一次回调的返回值】，或者【初始值init】</span>
<span class="token comment">//cur,当前正在处理的元素</span>
<span class="token comment">//index,当前处理元素的索引，默认【起始索引为1】，提供init，则为0</span>
<span class="token comment">//arr,原始数组</span>
<span class="token comment">//init，初始值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组求和" tabindex="-1"><a class="header-anchor" href="#数组求和" aria-hidden="true">#</a> 数组求和</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prev<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cur<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prev<span class="token operator">+</span>cur<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> prev<span class="token operator">+</span>cur
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//索引index从1开始，prev是数组第0为元素值，cur是数组第1位元素值</span>
<span class="token comment">//返回的值将作为下次回调的prev的值</span>
<span class="token comment">//第1次：1+2=3</span>
<span class="token comment">//第1次：3+3=6</span>
<span class="token comment">//第1次：6+4=10</span>
<span class="token comment">//第1次：10+5=15</span>
<span class="token comment">//第1次：15+6=21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;amy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;amy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;kenny&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;kenny&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> names <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//因为设置了初始值为[],prev=[];cur等于数组的第0位的元素</span>
    <span class="token comment">//判断数组中是否存在cur元素，不存在则添加到数组并返回</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;amy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;kenny&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按照属性对object分类" tabindex="-1"><a class="header-anchor" href="#按照属性对object分类" aria-hidden="true">#</a> 按照属性对Object分类</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stu<span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;male&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;amy&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;female&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;kenny&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;male&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;otto&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;male&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;sandy&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;female&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">objArr<span class="token punctuation">,</span>property</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> objArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span>obj</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">//要对那个属性分类</span>
        <span class="token keyword">let</span> key<span class="token operator">=</span>obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span>
        <span class="token comment">//对象中属性不存在，则创建一个key为该属性的数组</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>init<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            init<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//将对象添加到该属性的数组中</span>
        init<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
        <span class="token comment">//返回对象</span>
        <span class="token keyword">return</span> init
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> groupBySex <span class="token operator">=</span> <span class="token function">groupBy</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//{female:[{},{}],male:[{},{},{}]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","reduce.html.vue"]]);export{r as default};
