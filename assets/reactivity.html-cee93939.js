import{_ as t,o as e,c as p,a,b as n,d as s}from"./app-d4c6289a.js";const o={},c=a('<h2 id="获取响应式数据" tabindex="-1"><a class="header-anchor" href="#获取响应式数据" aria-hidden="true">#</a> 获取响应式数据</h2><table><thead><tr><th>API</th><th>传入</th><th>返回</th><th>备注</th></tr></thead><tbody><tr><td>reactive</td><td>plain-object</td><td>对象代理</td><td>深度代理对象中的所有成员</td></tr><tr><td>readonly</td><td>plain-object/proxy</td><td>对象代理</td><td>只能读取代理对象中的成员</td></tr><tr><td>ref</td><td>any</td><td>{value:...}</td><td>对value的访问是响应式的<br>如果value的值是一个对象，则会通过reactive函数代理<br>如果已经是代理，则直接返回代理</td></tr><tr><td>computed</td><td>function</td><td>{value:...}</td><td>当去读value值时，会根据情况决定是否要运行函数</td></tr></tbody></table>',2),l=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"ref"),n("p",null,"Proxy只能代理对象，对于基本数据类型不能使用reactive"),n("p",null,"ref可以代理任何数据，当数据是对象时，其内部调用reactive函数"),n("p",null,"对于基本数据类型，ref其实是通过getter和setter实现数据响应式的"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"ref"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" _value "),n("span",{class:"token operator"},"="),s(` value
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"get"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'获取value'"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token keyword"},"return"),s(` _value
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token keyword"},"set"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            _value `),n("span",{class:"token operator"},"="),s(` value
            console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'value设置成功'"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),i=a(`<h2 id="监听数据变化" tabindex="-1"><a class="header-anchor" href="#监听数据变化" aria-hidden="true">#</a> 监听数据变化</h2><h3 id="watcheffect" tabindex="-1"><a class="header-anchor" href="#watcheffect" aria-hidden="true">#</a> watchEffect</h3><p><code>watchEffect</code>返回一个函数，调用返回的函数可以停止监听</p><p><code>watchEffect</code>函数会立即执行，然后监听函数中用到的响应式数据，响应式数据变化后再次执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//该函数会立即执行，然后监听函数中用到的响应式数据，响应式数据变化后再次执行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h3><p>相当于vue2中的<code>$watch</code></p><p>可以监听单个或者多个数据的变化</p><p>监听的是<strong>响应式数据</strong></p><p><code>watch(state.count,()={})</code>是错误的写法，<code>state.count</code>是一个表达式，得到的一个普通的值，不能监听到</p><p>如果要监听对象中的一个属性，要传入一个函数返回响应式对象的属性<code>watch(()=&gt;state.count,()=&gt;{})</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//监听单个数据变化</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>state<span class="token punctuation">.</span>count<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span>

<span class="token keyword">const</span> countRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">watch</span><span class="token punctuation">(</span>countRef<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span>

<span class="token comment">//监听多个数据的变化</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>countRef<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>countNew<span class="token punctuation">,</span>countRefNew<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>countOld<span class="token punctuation">,</span>countRefOld<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：除非遇到以下场景，否则均建议选择<code>watchEffect</code></p><ul><li>不希望回调函数一开始就执行</li><li>数据改变时，需要参考就值</li><li>需要监控一些回调函数中不会用到的数据</li></ul>`,14),u=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("无论是"),n("code",null,"watchEffect"),s("还是"),n("code",null,"watch"),s("，当依赖项变化时，回调函数的运行都是异步的（微队列）")])],-1),r=a(`<h2 id="判断" tabindex="-1"><a class="header-anchor" href="#判断" aria-hidden="true">#</a> 判断</h2><table><thead><tr><th>API</th><th>含义</th></tr></thead><tbody><tr><td>isProxy</td><td>判断某个数据是否是由reactive或readonly创建的</td></tr><tr><td>isReactive</td><td>判断某个数据是否通过reactive创建</td></tr><tr><td>isReadonly</td><td>判断某个是否通过readonly创建</td></tr><tr><td>isRef</td><td>判断某个数据是否是一个ref对象</td></tr></tbody></table><h2 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h2><h3 id="unref" tabindex="-1"><a class="header-anchor" href="#unref" aria-hidden="true">#</a> unref</h3><p>相当于：<code>isRef(val)?val.value:val</code></p><h3 id="toref" tabindex="-1"><a class="header-anchor" href="#toref" aria-hidden="true">#</a> toRef</h3><p>得到一个响应式对象某个属性的ref格式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fooRef <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
fooRef<span class="token punctuation">.</span>value<span class="token operator">++</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">//2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs" aria-hidden="true">#</a> toRefs</h3><p>把一个响应式对象的所有属性转换为ref格式，然后包装到一个plain-object中返回</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//stateToRefs不是proxy对象</span>
<span class="token keyword">const</span> stateToRefs <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
stateToRefs<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用</p><p>如果要将响应式对象解构或者展开，会失去响应性，这时可以使用<code>toRefs</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">const</span> state1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> state2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state2<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践-组合式函数" tabindex="-1"><a class="header-anchor" href="#最佳实践-组合式函数" aria-hidden="true">#</a> 最佳实践：组合式函数</h2><p>所有的<strong>composition function</strong>均以<code>ref</code>的结果返回，以保证<code>setup</code>函数的返回结果中不包含<code>reactive</code>或<code>readonly</code>直接产生的数据</p>`,16),d=[c,l,i,u,r];function k(v,h){return e(),p("div",null,d)}const f=t(o,[["render",k],["__file","reactivity.html.vue"]]);export{f as default};
