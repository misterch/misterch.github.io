import{_ as a,r as e,o as t,c as p,b as n,d as c,e as o,a as i}from"./app-d4c6289a.js";const l={},u=i(`<h2 id="javascript执行机制" tabindex="-1"><a class="header-anchor" href="#javascript执行机制" aria-hidden="true">#</a> Javascript执行机制</h2><p>Javascript是一门单线程语言，Javascript语句是按照语句的执行顺序执行的</p><p>Javascript是单线程语言，<strong>同一时刻只能执行一个代码片段</strong></p><p>Javascript虽然是单线程，但是可以将任务分成两类，<strong>同步任务</strong>和<strong>异步任务</strong></p><p>Javascript执行完所有同步任务后，会就进入到事件循环(异步任务)</p><p>Javascript所有<strong>同步任务都在主线程上执行</strong>，形成一个执行栈</p><p>同步任务：需要执行的任务在主线程上排队，<strong>一次执行</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>Javascript执行所有同步代码后，就会进入到事件循环（Event Loop）。事件循环中的任务队列（task queue）独立于主线程，所以任务添加到任务队列时不会阻塞主线程的运行。这些添加到任务队列的任务都是异步任务。任务队列至少有一个宏任务队列和微任务队列，一个循环执行一个宏任务和所有微任务，完成一次事件循环就会检查是否需要更新UI。</p><h2 id="任务队列-task-queue" tabindex="-1"><a class="header-anchor" href="#任务队列-task-queue" aria-hidden="true">#</a> 任务队列（task queue）</h2><h3 id="任务队列-task-queue-1" tabindex="-1"><a class="header-anchor" href="#任务队列-task-queue-1" aria-hidden="true">#</a> 任务队列（task queue）</h3><ul><li>独立于主线程之外</li><li>用来添加异步任务到队列</li><li>检测和添加异步任务的行为独立于事件循环完成</li></ul><h3 id="异步任务" tabindex="-1"><a class="header-anchor" href="#异步任务" aria-hidden="true">#</a> 异步任务</h3><ul><li>没有立即执行但需要被执行的任务，放在任务队列（task queue）里</li><li>事件是异步任务</li></ul><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><p>同步任务执行完成，进入事件循环，等待事件的发生</p><h3 id="事件循环流程" tabindex="-1"><a class="header-anchor" href="#事件循环流程" aria-hidden="true">#</a> 事件循环流程</h3><ol><li>浏览器检查事件队列头</li><li>检测到事件，取出事件执行响应的事件处理器</li><li>事件执行完后，继续检测事件队列(事件循环)</li><li>事件队列没有事件，继续检测</li></ol><p><strong>事件循环有两个任务队列：宏任务和微任务</strong></p><h3 id="事件循环基于两个基本原则" tabindex="-1"><a class="header-anchor" href="#事件循环基于两个基本原则" aria-hidden="true">#</a> 事件循环基于两个基本原则</h3><ul><li>一次处理一个任务 <ul><li>包括单次迭代处理队列<strong>一个宏任务</strong></li><li>包括单次处理队列<strong>所有微任务</strong></li></ul></li><li>一个任务开始后直到任务结束，不会被其他任务中断</li></ul><h3 id="宏任务-由node或浏览器发起的任务" tabindex="-1"><a class="header-anchor" href="#宏任务-由node或浏览器发起的任务" aria-hidden="true">#</a> 宏任务：由node或浏览器发起的任务</h3><ul><li>创建主文档对象document</li><li>解析HTML</li><li>执行主线js代码，更改当前URL</li><li>各种事件（页面加载，鼠标事件，键盘事件，setTimeout，setInterval，网络事件）</li><li>setImmediate</li><li>I/O</li></ul><h3 id="微任务-由js引擎自身发起的任务" tabindex="-1"><a class="header-anchor" href="#微任务-由js引擎自身发起的任务" aria-hidden="true">#</a> 微任务：由js引擎自身发起的任务</h3><p>在下次浏览器渲染之前执行，更新应用程序的状态</p><ul><li>promise <ul><li>resolve是在同步任务里，then加入到微任务</li></ul></li><li>async/await <ul><li>遇到await之前是同步的，遇到await执行await后面的函数，然后返回一个promise对象，await下面的代码放入到微任务</li></ul></li><li>process.nextTick <ul><li>优先级最高，最先执行</li></ul></li><li>Object.observe</li><li>Proxy</li><li>MutationObserver</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.同步执行输出script start</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//2.同步执行输出async1 start</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">//遇到await执行后面的函数async2</span>
  <span class="token comment">//await 下面的代码等待async2完成后执行，放入到微任务等待下一轮</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">//事件循环开始，执行微任务</span>
  <span class="token comment">//9.async2 end</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2 end&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">//10.async1 end</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//3.执行输出async2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//同步执行async1</span>
<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//4.同步执行输出promise1 start</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1 start&#39;</span><span class="token punctuation">)</span>
  	<span class="token comment">//加入到微任务</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  	<span class="token comment">//5.同步执行输出resolve1 end</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolve1 end&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  	<span class="token comment">//10.recive resolve1</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;recive resolve1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//加入到宏任务</span>
<span class="token comment">//等待第一次微任务队列清空</span>
<span class="token comment">//【11.recive resolve2】后微任务队列清空，开始执行一个宏任务</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//12.setTimeout start</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout start&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//13.promise start</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise start&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">//加入到微任务，等待第二次微任务队列执行</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//14.resolve end</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolve end&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//执行第二次微任务队列</span>
    <span class="token comment">//16.recive resolve</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;recive resolve&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">//宏任务执行完毕，开始下一轮事件循环，执行第二次微任务队列</span>
  <span class="token comment">//15.setTimeout end</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  	<span class="token comment">//6.同步执行输出promise2 start</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2 start&#39;</span><span class="token punctuation">)</span>
  	<span class="token comment">//加入到微任务</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  	<span class="token comment">//7.同步执行输出resolve2 end</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolve2 end&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
 		<span class="token comment">//11.recive resolve2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;recive resolve2&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//8.同步执行输出script end</span>
<span class="token comment">//同步代码在第8步这里执行完毕，开始事件循环</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// script start,async1 start,async2,p1s,r1e,p2s,r2e,script end,async2 end,async1 end,rr1,rr2,setTimeout start,ps,re,setTimeout end,rr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),r={href:"https://www.jsv9000.app/",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=e("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",r,[c("JS Visualizer 9000 (jsv9000.app)"),o(s)])])])}const b=a(l,[["render",d],["__file","eventloop.html.vue"]]);export{b as default};
