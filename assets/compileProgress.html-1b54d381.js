import{_ as a,o as n,c,a as s,b as e,d as o}from"./app-d4c6289a.js";const t="/assets/2020-01-09-12-32-38-190449f2.png",i="/assets/2020-01-09-12-35-05-05a07112.png",d="/assets/2020-01-09-12-39-16-1404d2f2.png",r="/assets/2020-01-09-12-43-52-01e75ce7.png",h="/assets/2020-01-09-12-47-43-f5fbe9ca.png",l="/assets/2020-01-09-12-54-34-4b636447.png",p="/assets/2020-01-09-15-51-07-23af6633.png",u={},k=s(`<blockquote><p>配置文件以<code>CommonJS</code>模块化方式导出一个配置对象，因为webpack是在node环境中执行的</p></blockquote><p>webpack在打包的时候不会执行源代码，只会分析源代码，遇到<code>Commonjs</code>、<code>ES Module</code>等模块化代码会识别依赖，将源代码转换成可以在浏览器中运行的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack整个编译过程大致分三个步骤：</p><ol><li>初始化</li><li>编译</li><li>输出</li></ol><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h2><p>在这个阶段，webpack会将<strong>CLI参数、配置文件、默认配置</strong>进行融合，形成一个最终的配置对象</p><p>这一步主要是为了下一步编译阶段做的必要准备，就是为编译阶段产生一个最终的配置</p><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h2><h3 id="创建chunk" tabindex="-1"><a class="header-anchor" href="#创建chunk" aria-hidden="true">#</a> 创建chunk</h3><blockquote><p>chunk：是webpack在内部构建过程的一个概念，翻译为块；表示通过某个入口找到的所有依赖的统称</p></blockquote><p><code>webpack</code>的默认入口模块是<code>./src/index.js</code>，根据入口模块创建一个默认名为<code>main</code>的chunk</p><p>可以有多个chunk，即入口模块可以有多个，就会构建对应的chunk并生成对应的bundle文件</p><p>每个chunk都至少有两个属性：</p><ul><li>name：默认为main</li><li>id：唯一编号，开发环境和name一样，生产环境是一个数字，从0开始</li></ul><h3 id="构建所有依赖模块" tabindex="-1"><a class="header-anchor" href="#构建所有依赖模块" aria-hidden="true">#</a> 构建所有依赖模块</h3><p><img src="`+t+'" alt=""></p><p><img src="'+i+'" alt=""></p><p>从入口文件开始<strong>读取文件内容，分析代码</strong>（分析代码，不会执行源代码），将内容形成AST（抽象语法树）；通过分析找到该文件的<strong>依赖（即引入了其他模块）</strong>，将依赖（模块）路径保存到dependencies数组中；将有依赖的地方替换webpack的依赖函数（将require替换成webpack的<code>__webpack_require(moduleId)</code>函数），形成转换后的代码；将转换后的代码保存到一个数组中，数组每一项是一个对象，以模块id（模块路径）为key，以转换后的代码为value；模块1分析完毕，接着分析<code>dependencies</code>数组中的依赖，通过递归重复这个步骤，最终得到模块列表</p><h3 id="产生chunk-assets" tabindex="-1"><a class="header-anchor" href="#产生chunk-assets" aria-hidden="true">#</a> 产生chunk assets</h3><p>第二步完成后，chunk中会产生一个模块列表，列表中包含了<strong>模块id</strong>和<strong>模块转换后的代码</strong></p><p>webpack会根据配置为chunk生成一个资源列表，即<code>chunk assets</code>，资源列表可以理解为是生成最终文件的文件名和文件内容，称为<code>bundle</code></p><p><img src="'+d+'" alt=""></p>',23),m=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,[e("strong",null,"chunk hash"),o("：是根据所有chunk assets的内容生成的一个hash字符串")])],-1),g=s('<p><img src="'+r+'" alt=""></p><h3 id="合并chunk-assets" tabindex="-1"><a class="header-anchor" href="#合并chunk-assets" aria-hidden="true">#</a> 合并chunk assets</h3><p>将多个chunk的assets合并到一起，并产生一个总的hash</p><p><img src="'+h+'" alt=""></p><h2 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> 输出</h2><p>webpack利用node的fs模块，根据编译产生的总的assets，生成相应的文件输出到output指定的目录</p><p><img src="'+l+'" alt=""></p><h2 id="总过程" tabindex="-1"><a class="header-anchor" href="#总过程" aria-hidden="true">#</a> 总过程</h2><p><img src="'+p+'" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li><code>module</code>是模块，是分割的代码单元，<strong>是一个文件</strong>，webpack模块可以是任何内容的文件，不单是JS</li><li><code>chunk</code>是webpack内部构建模块的块，<strong>一个chunk中包含多个模块</strong>，这些模块是从入口模块通过依赖分析得来</li><li><code>bundle</code>是chunk构建好模块后生成chunk的资源清单，<strong>清单中的每一项就是一个bundle</strong>，bundle就是最终生成的文件</li><li>根据入口可配置多个入口模块，就会生成多个chunk资源清单</li><li><code>hash</code>是根据资源清单所有内容联合生成的hash值</li><li><code>chunkhash</code>是每个chunk生成的资源清单内容联合生成的hash值</li><li><code>chunkname</code>是chunk的名称，默认是main</li><li>id是每个chunk的唯一编号，开发构建id和chunkname相同，生成环境下构建会从数字0开始进行编号</li></ol>',11),b=[k,m,g];function _(f,w){return n(),c("div",null,b)}const v=a(u,[["render",_],["__file","compileProgress.html.vue"]]);export{v as default};
