import{_ as c,r as o,o as d,c as p,e as s,w as a,b as e,d as n,a as t}from"./app-d4c6289a.js";const m="/img/workflow.png",u="/img/revert.jpg",h={},v=e("p",null,"git 提交修改记录的工作原理",-1),g=e("p",null,[e("img",{src:m,alt:""})],-1),b=e("h2",{id:"reset回滚",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reset回滚","aria-hidden":"true"},"#"),n(" reset回滚")],-1),k=e("div",{class:"custom-container warning"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8v4"}),e("path",{d:"M12 16h.01"})])]),e("p",{class:"custom-container-title"},"WARNING"),e("p",null,[e("code",null,"reset"),n("用于撤销"),e("strong",null,"未被提交(push)到远程仓库"),n("的改动(commit)")]),e("p",null,[n("如果确实要撤销已经push到远程仓库的更改，撤销后提交到远程仓库时加上"),e("code",null,"--force"),n("选项强制提交，达到撤销版本号的目的")]),e("p",null,[n("多人协作时谨慎使用"),e("code",null,"reset"),n(",可使用"),e("a",{href:"#revert"},"revert"),n(",revert会创建新的提交，保留完整的历史记录")])],-1),f=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,[n("使用"),e("code",null,"git ls-files"),n("查看暂存区的修改")]),e("p",null,[e("code",null,"git reset"),n("回滚到目标位置后，目标位置之后的版本就"),e("strong",null,"不存在")])],-1),x=t(`<h3 id="三种模式" tabindex="-1"><a class="header-anchor" href="#三种模式" aria-hidden="true">#</a> 三种模式</h3><ol><li><strong>软重置（soft）</strong>：回退到某个版本，保留工作区和暂存区的修改</li><li><strong>混合重置（mixed）</strong>：默认模式，回退到某个版本，保留工作区的修改，丢弃暂存区</li><li><strong>硬重置（hard）</strong>：回退到某个版本，丢弃工作区和暂存区的修改</li></ol><h3 id="三种模式使用场景" tabindex="-1"><a class="header-anchor" href="#三种模式使用场景" aria-hidden="true">#</a> 三种模式使用场景</h3><h4 id="soft" tabindex="-1"><a class="header-anchor" href="#soft" aria-hidden="true">#</a> soft</h4><p>如果开发一个功能的时候，每修改一处或新增删除文件都commit，就会造成多个意义不大的commit记录，当整个功能都已经开发完成时，想让commit更加清晰可读，可以使用soft，合并当前HEAD位置到目标commit的记录</p><p><code>git reset --soft</code>后可以直接<code>git commit</code>，因为暂存区得到保留</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>                                  HEAD
                                   |
---commit1---commit2---commit3---commit4

git reset --soft commit1

    HEAD
     |
---commit1
此时会带上commit2~commit4的修改回到commit1的位置

git commit -m &quot;完成feat功能&quot;
            HEAD,feat
               |
---commit1---commit2&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hard" tabindex="-1"><a class="header-anchor" href="#hard" aria-hidden="true">#</a> hard</h4><p>放弃目前本地的所有修改，回退到指定版本，不带指定版本之后的修改，即清空工作区和暂存区，恢复到指定版本的文件内容</p><h4 id="mixed" tabindex="-1"><a class="header-anchor" href="#mixed" aria-hidden="true">#</a> mixed</h4><ol><li>应用场景与<code>--soft</code>差不多，也可以起到合并多个记录，只是需要<code>add</code>之后再<code>commit</code></li><li>有时add错文件到暂存区，<code>git reset HEAD</code>来<strong>unstage</strong>所有加入到暂存区得待提交得文件</li><li>commit提交了错误的代码，不想修改错误再commit一次（会留下一个错误的commit点），带有当前错误节点的修改回到正确的commit点，修改后再提交commit，这样就能撤销错误的commit（log上会删除掉错误的commit记录）</li></ol><h3 id="使用head回滚" tabindex="-1"><a class="header-anchor" href="#使用head回滚" aria-hidden="true">#</a> 使用HEAD回滚</h3><p><code>HEAD</code>，当前记录的位置</p>`,13),_=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 回到到当前位置的上一个版本"),n(`
`),e("span",{class:"token function"},"git"),n(` reset HEAD^
`),e("span",{class:"token comment"},"#回退到当前位置的上两个版本"),n(`
`),e("span",{class:"token function"},"git"),n(` reset HEAD^^
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),w=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 回到到当前位置的上一个版本"),n(`
`),e("span",{class:"token function"},"git"),n(` reset HEAD~1
`),e("span",{class:"token comment"},"#回退到当前位置的上两个版本"),n(`
`),e("span",{class:"token function"},"git"),n(` reset HEAD~2
`),e("span",{class:"token comment"},"#回退到当前位置的上n个版本"),n(`
`),e("span",{class:"token function"},"git"),n(` reset HEAD~n
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),E=t(`<h3 id="使用commit-hash回滚" tabindex="-1"><a class="header-anchor" href="#使用commit-hash回滚" aria-hidden="true">#</a> 使用commit-hash回滚</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#mixed,保留工作区，丢弃暂存区</span>
<span class="token function">git</span> reset <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>
<span class="token comment">#保留工作区和暂存区</span>
<span class="token function">git</span> reset <span class="token parameter variable">--soft</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>
<span class="token comment">#丢弃工作区和暂存区</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回退指定文件到指定版本" tabindex="-1"><a class="header-anchor" href="#回退指定文件到指定版本" aria-hidden="true">#</a> 回退指定文件到指定版本</h3>`,3),A=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,"将某个文件回退到指定版本时，会带上**最新提交的修改(commit)**到指定指定版本，因为默认时mixed模式，工作区得到保留，丢弃暂存区"),e("p",null,[n("修改后需要"),e("code",null,"add"),n("到暂存区再"),e("code",null,"commit"),n("到本地仓库")])],-1),D=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#将文件指定版本的提交，此时文件会带上之前的修改</span>
<span class="token function">git</span> reset <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="revert" tabindex="-1"><a class="header-anchor" href="#revert" aria-hidden="true">#</a> revert</h2><p><code>revert</code>用于反做某一个版本，达到<strong>撤销该版本的修改重做</strong>（这个版本修改的内容全部会丢失），但不会影响这个撤销版本之后提交的版本的内容，遇到冲突解决后提交</p><p><code>revert</code>会创建新的提交，保留完整的历史记录</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>
<span class="token comment">#撤销不立即提交</span>
<span class="token function">git</span> revert <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span>

<span class="token comment">#撤销多个提交</span>
<span class="token function">git</span> revert <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><p>如上图，这样操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 撤销commit1的提交的内容并立即commit新的提交</span>
<span class="token function">git</span> revert commit1
<span class="token comment"># 使用-n选项可以撤销commit1提交的内容但不会立即commit</span>
<span class="token function">git</span> revert <span class="token parameter variable">-n</span> commit1
<span class="token comment"># 此时已经撤销commit1的提交的内容，可以进行重做,重做完后执行--continue,就会生成新的提交</span>
<span class="token function">git</span> revert <span class="token parameter variable">--continue</span>
<span class="token comment"># 取消revert</span>
<span class="token function">git</span> revert <span class="token parameter variable">--abort</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="撤销merge合并提交" tabindex="-1"><a class="header-anchor" href="#撤销merge合并提交" aria-hidden="true">#</a> 撤销merge合并提交</h3><p>当合并分支时，会创建合并提交，如果想撤销这个合并提交，恢复到未合并之前的状态，可以使用<code>revert</code>撤销合并提交，撤销后会保留</p>`,11),H=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,[e("code",null,"-m"),n("选项接收一个数字参数parent-number")]),e("p",null,[n("parent-number是一个1或者2的数值，代表"),e("strong",null,"保留"),n("第一个还是第二个分支，")]),e("p",null,"一般填1，恢复当前分支没合并前的状态"),e("p",null,"2，撤销主分支的修改，保留合并进来的修改")],-1),C=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> revert <span class="token parameter variable">-m</span>  <span class="token operator">&lt;</span>parent-number<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>merge-commit-hash<span class="token operator">&gt;</span>
<span class="token function">git</span> revert <span class="token parameter variable">-m</span> <span class="token number">2</span> <span class="token operator">&lt;</span>合并的commit-hash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="checkout" tabindex="-1"><a class="header-anchor" href="#checkout" aria-hidden="true">#</a> checkout</h2><h3 id="撤销工作区的修改" tabindex="-1"><a class="header-anchor" href="#撤销工作区的修改" aria-hidden="true">#</a> 撤销工作区的修改</h3>`,3),I=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"git"),n(" checkout -- "),e("span",{class:"token operator"},"<"),n("filename"),e("span",{class:"token operator"},">"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),M=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`git checkout .
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),B=e("p",null,[e("a",{href:"/docs/git/checkout"},"查看关于checkout的详细指南")],-1),j=e("h2",{id:"clean",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#clean","aria-hidden":"true"},"#"),n(" clean")],-1),N=e("p",null,[n("项目新增的文件，但没有被跟踪（untracked files），即暂存区中没有这些新增的文件，如果想丢弃这些文件，使用"),e("code",null,"git clean")],-1),T=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,"删除未跟踪的文件")],-1),y=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clean <span class="token parameter variable">-df</span> <span class="token comment">#返回到某个节点，（未跟踪文件的删除）</span>
    <span class="token parameter variable">-n</span> 不实际删除，只是进行演练，展示将要进行的操作，有哪些文件将要被删除。（可先使用该命令参数，然后再决定是否执行）
    <span class="token parameter variable">-f</span> 删除文件
    <span class="token parameter variable">-i</span> 显示将要删除的文件
    <span class="token parameter variable">-d</span> 递归删除目录及文件（未跟踪的）
    <span class="token parameter variable">-q</span> 仅显示错误，成功删除的文件不显示
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="restore" tabindex="-1"><a class="header-anchor" href="#restore" aria-hidden="true">#</a> restore</h2><p>参考链接</p>`,3),G={href:"https://blog.csdn.net/ITerated/article/details/106993603",target:"_blank",rel:"noopener noreferrer"};function P(V,q){const i=o("CodeGroupItem"),r=o("CodeGroup"),l=o("ExternalLinkIcon");return d(),p("div",null,[v,g,b,k,f,x,s(r,null,{default:a(()=>[s(i,{title:"HEAD^"},{default:a(()=>[_]),_:1}),s(i,{title:"HEAD~n"},{default:a(()=>[w]),_:1})]),_:1}),E,A,D,H,C,s(r,null,{default:a(()=>[s(i,{title:"指定文件"},{default:a(()=>[I]),_:1}),s(i,{title:"所有修改"},{default:a(()=>[M]),_:1})]),_:1}),B,j,N,T,y,e("p",null,[e("a",G,[n("git中git reset /git revert /git checkout的用法"),s(l)])])])}const R=c(h,[["render",P],["__file","undo.html.vue"]]);export{R as default};
