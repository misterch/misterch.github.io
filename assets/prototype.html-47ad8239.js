import{_ as o,r as e,o as p,c,b as n,d as s,e as l,a}from"./app-d4c6289a.js";const i="/assets/prototype-80bebd1e.png",r={},u=a('<p><img src="'+i+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proto" tabindex="-1"><a class="header-anchor" href="#proto" aria-hidden="true">#</a> __proto__</h2>`,3),d=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"__proto__"),s("和 "),n("code",null,"constructor"),s("属性是"),n("strong",null,"对象所独有的")]),n("p",null,[n("strong",null,"函数也是一种对象"),s("，函数也有 "),n("code",null,"__proto__"),s("和 "),n("code",null,"constructor"),s("属性")])],-1),k=a('<p><code>f1.__proto__</code>属性由<strong>一个对象指向另一个对象</strong>，这个对象是原型对象即父对象，这里是 <code>Foo.prototype</code></p><h3 id="proto-作用" tabindex="-1"><a class="header-anchor" href="#proto-作用" aria-hidden="true">#</a> __proto__作用</h3><p>当访问对象的属性时，如果该对象内部不存在该属性，那么就会去对象的 <code>__proto__</code>属性指向的原型对象（父对象）里找，如果原型对象里也找不到，就继续往父对象的 <code>__proto__</code>属性指向的原型对象（爷爷对象）里找，直到原型链顶端null，找不到就结束查找，报错。</p><h3 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h3><p>通过 <code>__proto__</code>属性连接对象直到null的一条链就是<strong>原型链</strong></p><h2 id="prototype" tabindex="-1"><a class="header-anchor" href="#prototype" aria-hidden="true">#</a> prototype</h2>',6),v=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"prototype"),s("属性是"),n("strong",null,"函数"),s("所独有的，由"),n("strong",null,"一个函数指向一个对象")]),n("p",null,[n("code",null,"prototype"),s("是这个函数的原型对象，也是这个函数所创建的"),n("strong",null,"实例的原型对象")])],-1),m=a(`<p><code>f1.__proto__===Foo.prototype</code></p><h3 id="prototype作用" tabindex="-1"><a class="header-anchor" href="#prototype作用" aria-hidden="true">#</a> prototype作用</h3><p>包含特定类型的所有<strong>实例共享</strong>属性和方法</p><p>任何函数在创建的时候都会默认同时创建函数的原型对象</p><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h2><ul><li><strong>对象所独</strong>有的属性</li><li>从一个对象指向一个函数，指向的是该对象的构造函数</li><li>每个对象都有构造函数，本身拥有的或者继承而来的，继承来的通过 <code>__proto__</code>属性查看</li><li><code>Function</code>对象比较特殊，构造函数就是它自己本身</li><li>所有对象和函数都是由 <code>Function</code>构造函数得来</li><li><code>constructor</code>属性的重点就是 <code>Function</code>函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//函数创建的对象，对象含有constructor,指向创建该对象的函数</span>
f1<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Foo
<span class="token comment">//函数也是对象，也有constructor属性</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function
<span class="token comment">//Function对象的构造函数是自己本身</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function

<span class="token comment">//函数特有prototype属性，prototype.constructor指向函数本身</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自实现继承函数" tabindex="-1"><a class="header-anchor" href="#自实现继承函数" aria-hidden="true">#</a> 自实现继承函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span><span class="token parameter">Child<span class="token punctuation">,</span> Parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 继承原型上的属性和方法</span>
    <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
     <span class="token comment">// 因为继承了父类，构造器也修改成了父类构造器，需要修复 constructor</span>
    <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child
    <span class="token comment">// 存储超类</span>
    Child<span class="token punctuation">.</span>super <span class="token operator">=</span> Parent
    <span class="token comment">// 静态属性继承</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>setPrototypeOf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// setPrototypeOf es6</span>
        Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Child<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// __proto__ es6 引入，但是部分浏览器早已支持</span>
        Child<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Parent
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 兼容 IE10 等陈旧浏览器</span>
        <span class="token comment">// 将 Parent 上的静态属性和方法拷贝一份到 Child 上，不会覆盖 Child 上的方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> Parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Parent<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token keyword">in</span> Child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Child<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Parent<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于object-create和object-setprototype" tabindex="-1"><a class="header-anchor" href="#关于object-create和object-setprototype" aria-hidden="true">#</a> 关于Object.create和Object.setPrototype</h2><p><strong>用法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">.</span>Prototype<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>相同作用</strong></p><p>都能达到<code>A.prototype.__proto__ = B.prototype</code>的效果，实现原型继承</p><p><strong>区别</strong></p><p><code>A.prototype = Object.create(B.prototype)</code>会改变A整个<code>prototype</code>，即不单会修改<code>__proto__</code>同时也会<strong>修改构造函数的指向</strong>和<strong>丢失A原本的prototype</strong></p><p><code>Object.setPrototypeOf(A.prototype, B.Prototype)</code>仅仅只修改对象的__proto__指向</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;person&#39;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person say&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;student&#39;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doHomeWork</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doHomeWork&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;worker&#39;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Worker</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doWork</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doWork&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//Object.create创建的新对象会覆盖掉Student.prototype对象，这样原本Student的__proto__和constructor都会修改为Person.prototype</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token comment">//只会修改Worker.prototype对象的__proto__指向Person.prototype</span>
<span class="token comment">//Worker.prototype对象上除__proto__外的属性和方法都不会丢失，构造函数仍然是Worker</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Worker</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,19),_={href:"https://blog.csdn.net/cc18868876837/article/details/81211729",target:"_blank",rel:"noopener noreferrer"};function b(h,y){const t=e("ExternalLinkIcon");return p(),c("div",null,[u,d,k,v,m,n("p",null,[n("a",_,[s("帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）码飞_CC的博客"),l(t)])])])}const f=o(r,[["render",b],["__file","prototype.html.vue"]]);export{f as default};
