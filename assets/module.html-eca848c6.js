import{_ as o,r as d,o as n,c as r,b as e,d as a,e as i,a as l}from"./app-d4c6289a.js";const c={},s=l(`<h2 id="common-js" tabindex="-1"><a class="header-anchor" href="#common-js" aria-hidden="true">#</a> Common.js</h2><ul><li><p>模块初始化：当一个CommonJS模块首次被require时，Node.js会执行该模块的代码，创建一个<code>module.exports</code>对象，这个对象会被<strong>缓存</strong>起来</p></li><li><p>导出基本数据类型：当你将一个基本数据类型（number，string，boolean，null，undefined）赋值类<code>module.exports</code>或其属性时，导出的是该值的一个<strong>拷贝</strong></p></li><li><p>后续导入：其他模块require同一个模块时，<strong>不会重新执行该模块的代码</strong>。他们得到的是缓存中<code>module.exports</code>对象的引用</p></li><li><p>修改影响：</p><ul><li><p>修改导出的<strong>基本数据类型</strong>本身：如果a模块直接导出一个基本数据类型<code>let num = 0;module.exports = num;</code>b模块通过<code>let a = require(&#39;./a.js&#39;);a = 20</code>试图修改，是无效的，a在b模块中只是一个局部变量，储存的是num初始值的拷贝。修改b中的局部变量a不会影响a模块内部的num，更不会影响c模块导入的a模块中的num变量。<strong>值拷贝，不影响原模块</strong></p></li><li><p>修改导出的<strong>对象的属性</strong>：如果a模块导出一个对象<code>module.exports = {count:0}</code>，b模块通过<code>let count = require(&#39;./a.js&#39;);a.count = 10</code>，修改了<code>a.count</code>。因为b和c模块导入的是只想同一个缓存对象的引用，所以c模块访问<code>a.count</code>时的值是被b模块修改后的值10。<strong>对象引用，修改会影响</strong></p></li><li><p>导出模块内部方法修改其自身状态</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>//a.js
let internalCount = 0
module.exports = {
    getCount:()=&gt;internalCount,
    increment:()=&gt;{internalCOunt++}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b模块导入a模块，调用a.increment()，会修改a模块作用域内的internalCount。c模块调用a.getCount()时，因为getCount方法实在a模块的闭包中定义的，他访问的是最新的internalCount，所以c会看到增加后的值。这是因为b和c通过a模块导出的方法简介访问和修改了a模块内部的变量（不是直接修改导出的值本身）</p></li></ul></li></ul><h2 id="es-module" tabindex="-1"><a class="header-anchor" href="#es-module" aria-hidden="true">#</a> ES Module</h2><ul><li><p>模块初始化：ES模块在首次被导入时执行一次，模块的顶层代码执行，建立导出绑定</p></li><li><p>导出绑定：ES Module的实行概念是“活的绑定”。当你使用export导出变量（无论是基本类型还是对象）时，导出的不是值本身，而是<strong>指向该模块内部变量的绑定（引用）</strong></p></li><li><p>导入：其他模块使用<code>import</code>导入时，他们获得的是只想被导出模块内部变量的绑定</p></li><li><p>修改影响：</p><ul><li><p>模块内部修改：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>//a.js
export let count = 0
export function increment(){
    count++
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b模块导入<code>count</code>和<code>increment</code>，并调用increment()，c模块导入<code>count</code>，因为b和c导入的<code>count</code>都指向a模块内部同一个变量<code>count</code>的绑定，所以当<code>a.increment()</code>修改了count后，c模块访问count时会立即看到更新后的值1。<strong>使用内部方法修改，会受影响</strong></p></li><li><p>导入模块修改：</p><p>如果b模块试图直接修改导入a模块的count变量，<code>import { count } from &#39;./a.mjs&#39;; count = 10;</code>，在**严格模式下（ES模块默认时严格模式），这会抛出一个TypeError，因为导入的绑定是只读的。**导入模块不能修改从另一个模块导入的原始值或对象的绑定。修改必须发生在导出该变量的模块内部（如通过导出的函数修改）。<strong>不影响，会报错</strong></p></li></ul></li></ul><h2 id="总结对比" tabindex="-1"><a class="header-anchor" href="#总结对比" aria-hidden="true">#</a> 总结对比</h2><table><thead><tr><th>特性</th><th>CommonJS</th><th>ES Module</th></tr></thead><tbody><tr><td>导出机制</td><td>导出module.exports的值</td><td>导出变量的“活的绑定”</td></tr><tr><td>模块初始化次数</td><td>仅首次require执行，结果缓存</td><td>仅首次import执行</td></tr><tr><td>后续导入获取</td><td>缓存中module.exports的引用</td><td>指向模块内部导出变量的绑定</td></tr><tr><td>修改导出对象属性</td><td>影响可见（所有导入共享同一个对象引用）</td><td>影响可见（所有导入绑定到同一内部变量）</td></tr><tr><td>模块内部修改导出变量</td><td>影响可见（需通过导出方法间接修改内部状态）</td><td>影响可见（直接修改导出变量）</td></tr><tr><td>导入模块修改基本类型</td><td>修改的是局部拷贝，不影响其他模块/源模块</td><td>不允许（严格模式会报错）</td></tr><tr><td>导入模块修改对象属性</td><td>允许且影响可见（共享引用）</td><td>允许且影响可见（绑定到同一内部对象）</td></tr></tbody></table><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Common.js的<code>module.exports</code>是一个对象，<code>exports</code>是<code>module.exports</code>的引用。</p><p>Common.js导出的是值（基本类型是拷贝）或对象引用，模块间共享状态主要通过<strong>共享导出的对象引用</strong>或通过导出的函数修改模块内部状态来实现。直接导出的<strong>基本类型值</strong>在不同模块中是<strong>独立的拷贝</strong></p><p>Common.js导出的值是对象时，导入的是对象的引用，无论哪个模块修改该对象，使用该对象的模块的数据也会发生改变</p><p>ES Module导出的是指向模块内部变量的绑定。无论导出的是基本类型还是对象，只要导出模块内部修改了该变量的值，所有导入该绑定的地方都会立即看到更新。导入方不能直接修改导入的绑定（只读），可通过导出模块的方法来修改</p><p><code>export default</code>导出的是一个<strong>对象的引用</strong>，可以对引用对象进行修改，但不能重新赋值</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><p>无论使用CommonJS还是ES Module，都应该</p><ol><li>避免在导入模块中直接修改导入的值，尤其是基本数据类型</li><li>通过导入模块内部导出的方法来修改导入的值的状态</li></ol><h3 id="why" tabindex="-1"><a class="header-anchor" href="#why" aria-hidden="true">#</a> why</h3><ul><li>清晰性和可预测性：状态的变化逻辑被封装在定义该状态的模块内部</li><li>控制与封装：导出模块可以完全控制其内部状态的修改方式。它可以在方法中添加验证逻辑、日志记录、触发事件、执行副作用等。如果直接在外部修改会破坏这种封装性</li><li>维护性：如果需要改变状态管理的方式，只需要修改导出模块内部的方法实现，而无需修改所有导入该状态并直接操作它的地方</li><li>符合模块化原则：模块应该提供接口供其他模块使用，而不是暴露其内部实现细节</li><li>规避机制差异带来的陷阱 <ul><li>CommonJS：避免了直接修改基本类型无效的困惑（修改的是拷贝）</li><li>ES Module：避免了因尝试修改只读绑定而导致运行时错误</li><li>两者都避免了因直接修改共享对象属性而可能导致的难以追踪的副作用（虽然有时需要共享对象，但通过方法修改其关键状态仍是更好的控制方式）</li></ul></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,18),u={href:"https://juejin.cn/post/6844904052841512973?from=search-suggest",target:"_blank",rel:"noopener noreferrer"};function p(m,h){const t=d("ExternalLinkIcon");return n(),r("div",null,[s,e("p",null,[e("a",u,[a("commonjs的导出是值拷贝吗?近期学习nodejs时，我发现不少网上比较commonjs和esmodule不同之处的 - 掘金"),i(t)])])])}const b=o(c,[["render",p],["__file","module.html.vue"]]);export{b as default};
