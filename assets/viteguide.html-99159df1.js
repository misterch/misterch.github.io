import{_ as o,r as p,o as i,c,b as n,d as s,e as t,a}from"./app-d4c6289a.js";const l={},r=a('<h2 id="对vite的理解-结合webpack" tabindex="-1"><a class="header-anchor" href="#对vite的理解-结合webpack" aria-hidden="true">#</a> 对Vite的理解，结合webpack</h2><p>在开发环境下，vite是<strong>无需打包直接启动开发服务器，请求那个模块再对模块进行实时编译</strong>；webpack需要先打包，然后启动开发服务器，请求服务器时直接给与打包结果。</p><p>vite利用了现代浏览器本身就支持ES Module，会自动向依赖Module发出请求这一点，将开发环境下的模块文件，就作为浏览器要执行的文件，而不是像wabpack那样进行打包合并。</p><p>由于vite在启动的时候不需要打包，也就意味着<strong>不需要分析模块的依赖，不需要编译，因此速度非常快</strong>。当浏览器请求某个模块式，在根据需要对模块内容进行编译，这种<strong>按需动态编译的方式，极大地缩减了编译时间</strong>，项目越复杂，模块越多，vite的优势越明显。</p><p>在HMR方面，当改动了一个模块后，仅需让浏览器重新请求该模块即可，不像webpack那样需要把该模块的相关依赖全部编译一次。</p><p>当需要打包到生产环境是，vite使用传统的rollup进行打包，因此，vite的主要优势在开发阶段。</p><p>另外，由于vite利用的是ES Module，因此在代码中不可以使用CommonJS</p><h2 id="vite依赖预构建" tabindex="-1"><a class="header-anchor" href="#vite依赖预构建" aria-hidden="true">#</a> Vite依赖预构建</h2>',8),d=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"esmodule"),n("p",null,[s("直接使用 "),n("code",null,"esmodule"),s("，即 "),n("code",null,'<script type="module"><\/script>'),s("处理模块化资源加载的时候，路径要么是"),n("strong",null,"绝对路径"),s("要么是"),n("strong",null,"相对路径")]),n("p",null,[s("Q：为什么 "),n("code",null,"esmodule"),s("对于导入"),n("strong",null,"非绝对路径和相对路径"),s("的资源时不搜寻 "),n("code",null,"node_modules"),s("?")]),n("p",null,[s("A：因为如果当这个模块里面引用了其他模块，其他模块又引用了其他模块，这会导致过多的"),n("strong",null,"http请求")])],-1),u=a(`<p>使用 <code>vite</code>加载模块时，遇到有<strong>非绝对路径和相对路径</strong>的引用，会尝试路径补全</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>
<span class="token comment">// vite遇到这种路径，会进行路径补全</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;/node_modules/vue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找依赖的过程是自当前目录依次向上查找的过程，直到查找到根目录（非项目根目录）或者查找到依赖为止，否则报错。</p><h3 id="依赖预构建" tabindex="-1"><a class="header-anchor" href="#依赖预构建" aria-hidden="true">#</a> 依赖预构建</h3><p>vite首先找到对应的依赖，然后调用<strong>esbuild</strong>将其他规范（<code>CMD</code>、<code>UMD</code>、<code>CommonJS</code>等）的代码转换成 <code>esmodule</code>规范，然后放到 <code>node_modules/.vite/deps</code>下，同时对esmodule规范的各个模块进行统一集成</p><p>vite解决了3个问题：</p><ol><li>各种规范的第三方包用<strong>esbuild</strong>统一为 <code>esmodule</code>规范</li><li>对路径的处理上直接使用.vite/deps,不管依赖是在项目中还是在开发环境的用户根目录中，方便路径重写</li><li>解决网络多包传输的性能问题(这就是esmodule不支持从 <code>node_modules</code>目录加载模块的原因)，<code>vite</code>会对 <code>esmodule</code>的各个引用模块统一集成到一个或几个模块中，<strong>减少http请求</strong></li></ol>`,7),v=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"import"),s("会发起http请求")]),n("p",null,[s("vite依赖预加载就是预先将被 "),n("code",null,"import"),s("的模块"),n("strong",null,"复制"),s("到一个模块中，这样就能减少http请求")])],-1),k=a(`<h2 id="vite配置文件及环境区分" tabindex="-1"><a class="header-anchor" href="#vite配置文件及环境区分" aria-hidden="true">#</a> Vite配置文件及环境区分</h2><h3 id="配置文件的代码提示" tabindex="-1"><a class="header-anchor" href="#配置文件的代码提示" aria-hidden="true">#</a> 配置文件的代码提示</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
* @type import(&quot;vite&quot;).UserConfig 
*/</span>
<span class="token keyword">const</span> viteConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>UserConfig<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token comment">//传入一个配置对象</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">UserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//传入一个函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">UserConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>command<span class="token operator">===</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>command<span class="token operator">===</span><span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h3><p>根据开发环境和生产环境加载指定的配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//vite.config.js</span>

<span class="token keyword">import</span> base <span class="token keyword">from</span> <span class="token string">&quot;./vite.base.config.js&quot;</span>
<span class="token keyword">import</span> dev <span class="token keyword">from</span> <span class="token string">&quot;./vite.dev.config.js&quot;</span>
<span class="token keyword">import</span> prod <span class="token keyword">from</span> <span class="token string">&quot;./vite.prod.config.js&quot;</span>
<span class="token keyword">const</span> envResolver <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>base<span class="token punctuation">,</span><span class="token operator">...</span>prod<span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;serve&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>base<span class="token punctuation">,</span><span class="token operator">...</span>dev<span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境变量配置" tabindex="-1"><a class="header-anchor" href="#环境变量配置" aria-hidden="true">#</a> 环境变量配置</h2><blockquote><p>环境变量：根据当前代码环境产生值的变化的变量</p></blockquote><p>环境：</p><ul><li>开发环境</li><li>测试环境</li><li>预发布环境</li><li>灰度环境</li><li>生产环境</li></ul>`,11),m=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"Vite"),s("使用 "),n("code",null,"dotenv"),s("第三方库来读取 "),n("code",null,".env"),s("开头的文件，解析文件中的环境变量，并将其注入到 "),n("code",null,[s("p"),n("wbr"),s("rocess.env")]),s("对象中，但vite考虑到和其他配置的一些冲突（"),n("strong",null,"root，envDir"),s("），不会直接注入到 "),n("code",null,"preocess.env"),s("中")]),n("p",null,[s("使用vite内置的 "),n("code",null,"loadEnv"),s("方法来读取不同环境下加载相应的 "),n("code",null,".env"),s("文件，返回环境变量对象")])],-1),h=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("Q："),n("code",null,"vite.config.js"),s("是在 "),n("code",null,"node"),s("环境中执行的，为什么可以以 "),n("code",null,"esmodule"),s("规范导入导出？")]),n("p",null,[s("A：vite在读取这个配置文件的时候会交给node去解析文件语法，将 "),n("code",null,"esmodule"),s("规范替换成 "),n("code",null,"commonjs"),s("规范")])],-1),b=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>UserConfig<span class="token punctuation">,</span>loadEnv<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> base <span class="token keyword">from</span> <span class="token string">&quot;./vite.base.config.js&quot;</span>
<span class="token keyword">import</span> dev <span class="token keyword">from</span> <span class="token string">&quot;./vite.dev.config.js&quot;</span>
<span class="token keyword">import</span> prod <span class="token keyword">from</span> <span class="token string">&quot;./vite.prod.config.js&quot;</span>
<span class="token keyword">const</span> envResolver <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>base<span class="token punctuation">,</span><span class="token operator">...</span>prod<span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;serve&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>base<span class="token punctuation">,</span><span class="token operator">...</span>dev<span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">UserConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>command<span class="token operator">===</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>command<span class="token operator">===</span><span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> envResolver<span class="token punctuation">[</span>config<span class="token punctuation">.</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>precess.cwd()</code>返回当前node进程的工作目录，在哪个目录下执行node就返回目录的地址</p><p><code>loadEnv(mode,envDir,prefixes)</code></p><ul><li><code>mode</code>：根据执行 <code>vite</code>命令传入给 <code>--mode</code>选项的<strong>参数值</strong></li><li><code>envDir</code>：<code>.env</code>文件所在的目录</li><li><code>prefixes</code>：默认 <code>.env</code></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;script&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span> <span class="token comment">//默认vite --mode development</span>
  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite --mode test&quot;</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite build --mode production&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"vite这样处理环境变量"),n("p",null,[s("所有环境都用到的env文件："),n("code",null,".env")]),n("p",null,[s("开发环境默认env文件："),n("code",null,".env.development")]),n("p",null,[s("生产环境默认env文件："),n("code",null,".env.production")]),n("p",null,[s("浏览器："),n("code",null,[s("i"),n("wbr"),s("mport.meta.env")]),s("获取环境变量")]),n("p",null,[s("node："),n("code",null,[s("p"),n("wbr"),s("rocess.env")]),s("获取环境变量")]),n("p",null,[s("vite：loadEnv()根据环境加载环境变量再与 "),n("code",null,[s("p"),n("wbr"),s("rocess.env")]),s("结合返回环境变量对象")])],-1),y=a(`<h3 id="客户端环境" tabindex="-1"><a class="header-anchor" href="#客户端环境" aria-hidden="true">#</a> 客户端环境</h3><p>vite会将环境变量注入到 <code>i<wbr>mport.meta.env</code>中</p><p>但默认会对环境变量拦截，对以 <code>VITE_</code>开头的环境变量才会最终加载到环境变量中</p><p>如果想以自定义为其他名称，可以通过 <code>envPrefix</code>来配置</p><h3 id="智能提示" tabindex="-1"><a class="header-anchor" href="#智能提示" aria-hidden="true">#</a> 智能提示</h3><p>随着在环境变量文件<code>.env.[mode]</code>中定义越来越多的环境变量，可能需要在代码中获取以<code>VITE_</code>为前缀的用户自定义环境变量的typescript智能提示</p><p>在<code>src</code>目录下创建<code>env.d.ts</code>，扩展<code>vite/client</code>的<code>ImportMeta</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span>
  <span class="token keyword">readonly</span> <span class="token constant">VITE_TITLE</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span>
  <span class="token keyword">readonly</span> <span class="token constant">VITE_SERVER</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span>
  <span class="token keyword">readonly</span> <span class="token constant">VITE_BASE_URL</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> env<span class="token operator">:</span> ImportMetaEnv
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite开发服务器原理分析" tabindex="-1"><a class="header-anchor" href="#vite开发服务器原理分析" aria-hidden="true">#</a> vite开发服务器原理分析</h2>`,9),f={href:"https://juejin.cn/post/6881078539756503047",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"vite如何让浏览器识别-vue文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite如何让浏览器识别-vue文件","aria-hidden":"true"},"#"),s(" vite如何让浏览器识别.vue文件")],-1),x=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("设置 "),n("code",null,"Content-Type:application/javascript"),s("，让浏览器以解析js文件一样解析vue文件")]),n("p",null,[s("vite通过插件 "),n("code",null,"@vitejs/plugin-vue"),s("处理 "),n("code",null,".vue"),s("文件，将vue模板中的template，script，style抽取出来分别处理")]),n("p",null,"最终将处理好的js代码覆盖掉vue文件中的vue模板内容，然后让浏览器以js形式解析vue文件")],-1),j=a(`<h3 id="vite中如何处理css" tabindex="-1"><a class="header-anchor" href="#vite中如何处理css" aria-hidden="true">#</a> vite中如何处理css</h3><p>vite天生支持css文件处理</p><p>处理流程：</p><ol><li>vite读取到js文件引入的css文件或者vue文件中 <code>&lt;style&gt;</code>标签内的内容</li><li>创建 <code>style</code>标签，将css文件或vue文件的 <code>&lt;style&gt;</code>标签的内容复制到创建的style标签里</li><li>将style标签插入到 <code>index.html</code>的 <code>head</code>中</li><li>将vite读取到的css内容替换成js脚本，方便HMR（热更新）或者css模块化</li><li>vite服务器将.css文件也设置成 <code>Content-Type:application/javascript</code>，让浏览器以js形式解析css文件</li></ol><h4 id="css模块化" tabindex="-1"><a class="header-anchor" href="#css模块化" aria-hidden="true">#</a> css模块化</h4><p>可以在js文件或者vue文件中以模块化对象形式使用模块化的css</p><p>vite约定 <code>css/less/scss</code>文件以 <code>xxx.module.css</code>形式命名来开启css模块化</p><p>模块化处理流程：</p><ol><li><code>xxx.module.css</code>形式命名来开启css模块化</li><li>vite将css文件中所有类名进行一定规则的替换（给类型加上一个唯一的哈希值），类名一样也不怕被覆盖</li><li>将原有类名与处理后的类型做一个映射{main:&quot;_main_u7391_1&quot;}</li><li>将处理后的css内容插入到style标签再插入到head标签中</li><li>将css模块化文件里的内容替换成js脚本</li><li>将创建的映射对象再脚本中默认导出</li></ol><h2 id="css配置-modules" tabindex="-1"><a class="header-anchor" href="#css配置-modules" aria-hidden="true">#</a> css配置（modules）</h2><p>css的modules配置最终交给PostCss modules处理</p><h3 id="modules-localsconvention" tabindex="-1"><a class="header-anchor" href="#modules-localsconvention" aria-hidden="true">#</a> modules.localsConvention</h3><p>设置映射对象的类的key值展示方式</p><ul><li>camelCase</li><li>camelCaseOnly</li><li>dashes</li><li>dashesOnly</li></ul><h3 id="modules-scoprbehaviour" tabindex="-1"><a class="header-anchor" href="#modules-scoprbehaviour" aria-hidden="true">#</a> modules.scoprBehaviour</h3><p>配置当前模块化行为是模块化还是全局化</p><ul><li>local：开启模块化，每个类都有哈希值是其模块化标志</li><li>global：全局样式</li></ul><h3 id="moduels-generatescopename" tabindex="-1"><a class="header-anchor" href="#moduels-generatescopename" aria-hidden="true">#</a> moduels.generateScopeName</h3><p><code>generateScopeName:string|((name:string,filename:string,css:string))=&gt;string</code></p><p>配置类名以指定的方式命名</p><p><code>[name],[ext],[path],[folder],[query],[contenthash]</code></p><p><code>[&lt;hashType&gt;:contenthash:&lt;digestType&gt;:&lt;length&gt;]</code></p><ul><li><code>[contenthash:md5:5]</code></li></ul><p><code>[&lt;hashType&gt;:hash:&lt;digestType&gt;:&lt;length&gt;]</code></p><ul><li><code>[hash:sha256:6]</code></li></ul><h3 id="modules-hashprefix" tabindex="-1"><a class="header-anchor" href="#modules-hashprefix" aria-hidden="true">#</a> modules.hashPrefix</h3><p>生成hash时会根据hashPrefix设置的值去计算出最终的hash值</p><h3 id="modules-globalmodulespaths" tabindex="-1"><a class="header-anchor" href="#modules-globalmodulespaths" aria-hidden="true">#</a> modules.globalModulesPaths</h3><p><code>globalModulesPaths:string[]</code></p><p>命名为 <code>xxx.modules.css</code>的文件不参与模块化</p><h2 id="css配置-preprocessoptions" tabindex="-1"><a class="header-anchor" href="#css配置-preprocessoptions" aria-hidden="true">#</a> css配置（preprocessOptions）</h2><p>配置css预处理器的全局参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">preprocessOptions</span><span class="token operator">:</span><span class="token punctuation">{</span>
  	<span class="token literal-property property">less</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  	<span class="token literal-property property">scss</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css配置-postcss" tabindex="-1"><a class="header-anchor" href="#css配置-postcss" aria-hidden="true">#</a> css配置（postcss）</h2><p>vite对postcss有非常良好的支持</p><p>postcss类似于babel，可以对css降级支持低版本浏览器等其他高级功能</p><p>postcss的插件</p><ul><li><code>postcss-preset-env</code>：支持css变量和一些未来的css语法，自动补全（autoprefixer）</li></ul><p>vite会从两个地方寻找postcss配置</p><ul><li><code>vite.config.js</code>的css.postcss</li><li>项目根目录下的 <code>postcss.config.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//postcss.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="importfrom—全局定义" tabindex="-1"><a class="header-anchor" href="#importfrom—全局定义" aria-hidden="true">#</a> importFrom—全局定义</h3><h4 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h4><p>现在使用css一般会创建一个css文件设置一些<strong>全局css变量</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span><span class="token punctuation">{</span>
  <span class="token property">--mainColor</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
  <span class="token property">--mainBgColor</span><span class="token punctuation">:</span> #ececec
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用css变量需要考虑兼容性问题，使用 <code>postcss</code>去做兼容处理，使用 <code>postcss-preset-env</code>预设可以更加方便处理css代码</p><p>当把这个全局css变量文件在项目中全局引入使用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//app.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  import <span class="token string">&quot;./cssVars.css&quot;</span><span class="token punctuation">;</span>
  <span class="token selector">test:</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">var</span><span class="token punctuation">(</span>--mainColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后会发现，postcss并没有帮我们做兼容处理</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*正常编译*/</span>
<span class="token selector">test</span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">var</span><span class="token punctuation">(</span>--mainColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*实际编译*/</span>
<span class="token selector">test</span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">var</span><span class="token punctuation">(</span>--mainColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h4><p>使用 <code>postcss-preset-env</code>插件配置 <code>importFrom</code>告诉postcss全局变量需要</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> postcssPresetEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-preset-env&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string-property property">&#39;importFrom&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&quot;./cssVars.css&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>全局定义的 <code>媒体查询</code>、<code>自定义属性</code>、<code>自定义选择</code>、<code>环境变量</code>等等，不管是 css、 js、json、方法还是传递的对象都需要通过 <code>importFrom</code> 配置项具名导入进来。</p><p><strong>注意：</strong></p><ol><li>如果css变量定义在当前文件中，并在当前文件中使用时，是不需要配置 <code>importFrom</code>的</li><li>如果css变量文件有多个，<code>importFrom</code>支持数组形式</li></ol><h2 id="静态资源" tabindex="-1"><a class="header-anchor" href="#静态资源" aria-hidden="true">#</a> 静态资源</h2><p>除了动态API以外（服务器需要动态处理的资源），基本上所有其他资源都被认为是静态资源（包括图片，视频，html，css，js）</p><h3 id="resolve-alias" tabindex="-1"><a class="header-anchor" href="#resolve-alias" aria-hidden="true">#</a> resolve.alias</h3><p>配置别名，优化深层级文件的引用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&quot;./src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;@assets&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&quot;./src/assets&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在文件中引入别的资源时可以使用别名代替 <code>../../</code></p>`,63),q={href:"https://github.com/Subwaytime/vite-aliases",target:"_blank",rel:"noopener noreferrer"},_=a(`<h3 id="获取svg源码" tabindex="-1"><a class="header-anchor" href="#获取svg源码" aria-hidden="true">#</a> 获取svg源码</h3><p>加载资源时可以在路径后面接收参数，参数告诉vite以什么格式返回文件内容</p><p>可接收的参数</p><ul><li>url，默认</li><li>raw，返回文件内的源码</li></ul><p>通过 <code>raw</code>方式获取svg源码内容，就可以操作 <code>svg</code>，例如可以修改svg的颜色</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">&#39;./logo.svg?raw&#39;</span>

logo<span class="token punctuation">.</span><span class="token function-variable function">onmouseenter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>fill <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="base" tabindex="-1"><a class="header-anchor" href="#base" aria-hidden="true">#</a> base</h3><p>开发或生产环境服务的公共基础路径，默认 <code>/</code>，配置成绝对路径后，无论在哪里都能正常访问资源</p><p>指定了公共路径，所有资源的路径都会根据此配置重写</p><h3 id="outdir" tabindex="-1"><a class="header-anchor" href="#outdir" aria-hidden="true">#</a> outDir</h3><p>打包输出的文件夹名称</p><h3 id="assetsdir" tabindex="-1"><a class="header-anchor" href="#assetsdir" aria-hidden="true">#</a> assetsDir</h3><p>静态资源输出的文件夹名称</p><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h3><p>vite打包后的每个资源文件都会加上一个hash值，这个hash值是唯一的。</p><p>作用：浏览器是有一个缓存机制，当读到一个同名的资源时，会尝试从浏览器缓存查找该文件，找到就会使用缓存文件，而hash就能更好地控制浏览器缓存</p><p>hash是根据文件名和文件内容计算出来的，只要文件内容没有变化，hash就不会变化</p><p>打包生成的文件名可以通过 <code>build.rollupOptions.output.assetFileNames</code>来配置</p><h3 id="处理成base64" tabindex="-1"><a class="header-anchor" href="#处理成base64" aria-hidden="true">#</a> 处理成base64</h3><p>当指定了资源大小，只要资源<strong>小于</strong>设定值，就会将资源转换成base64</p><p><code>build.rollupOptions.assetsInlineLimit</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">outDir</span><span class="token operator">:</span> <span class="token string">&quot;testDist&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">assetsDir</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">assetFileNames</span><span class="token operator">:</span><span class="token string">&quot;[name].[hash].[ext]&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">assetsInlineLimit</span><span class="token operator">:</span> <span class="token number">4096</span> <span class="token comment">//小于4kb</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite插件原理" tabindex="-1"><a class="header-anchor" href="#vite插件原理" aria-hidden="true">#</a> vite插件原理</h2><blockquote><p>vite插件一般是一个<strong>函数</strong>，函数<strong>返回一个配置对象</strong></p></blockquote><p>插件是在vite的生命周期的不同阶段做不同的事情</p><p>插件是在vite执行配置文件之前去改写配置文件</p><h2 id="vite独有钩子" tabindex="-1"><a class="header-anchor" href="#vite独有钩子" aria-hidden="true">#</a> vite独有钩子</h2><p>Vite 插件也可以提供钩子来服务于特定的 Vite 目标。这些钩子会被 Rollup 忽略。</p><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h3><p><code>config</code>返回一个配置对象</p><p>插件的配置要与 <code>vite.config.js</code>的其他配置结合产生最终的配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">plugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;插件名字&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">config</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span>env</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token comment">//config：vite的配置信息</span>
      <span class="token comment">//env：环境变量</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
    
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transformindexhtml" tabindex="-1"><a class="header-anchor" href="#transformindexhtml" aria-hidden="true">#</a> transformIndexHtml</h3><p>类型：function | object</p><p>转换 <code>index.html</code>的专用钩子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">htmlPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span>ctx</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//ctx是当前整个请求的执行上下文</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configureserver" tabindex="-1"><a class="header-anchor" href="#configureserver" aria-hidden="true">#</a> configureServer</h3><h4 id="vite-plugin-mock" tabindex="-1"><a class="header-anchor" href="#vite-plugin-mock" aria-hidden="true">#</a> vite-plugin-mock</h4><p>简单的方式：直接写死一两个数据</p><ul><li>缺陷 <ul><li>无法做海量数据测试</li><li>无法获取一些标准数据</li><li>无法感知http的异常</li></ul></li></ul><p>mockjs数据：模拟海量数据，模拟接口</p>`,41),C=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"vite-plugin-mock"),s("是对请求进行拦截。")]),n("p",null,"在开发环境中，如果没有配置请求域名，一般请求会向本地开发服务器（即本地的vite开发服务器）发出请求，该插件相当于利用本地开发服务器模拟了接口，插件能根据配置对请求进行拦截处理，使用指定文件夹内设置的mock数据"),n("p",null,[n("code",null,"vite-plugin-mock"),s("是利用vite的 "),n("code",null,"configureServer(server)"),s("钩子开发的")])],-1),E=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;/mock/getUser&#39;</span><span class="token operator">:</span> <span class="token string">&#39;https://www.myapi.com/api/getUser&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"http://mockjs.com/",target:"_blank",rel:"noopener noreferrer"},I=a(`<p><code>vite-plugin-mock</code>的使用</p><ol><li><p>安装 <code>npm install -D vite-plugin-mock mockjs</code></p></li><li><p>配置 <code>vite.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在vite.config.js配置该插件</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
		<span class="token function">vitePluginMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>vite-plugin-mock</code>默认会从项目根目录的 <code>/mock</code>目录查找mock数据</p><p>这主要是在node环境下才会使用到的，所以一般要以 <code>commonjs</code>规范书写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /mock/index.js</span>
<span class="token keyword">import</span> mockJS <span class="token keyword">from</span> <span class="token string">&#39;mockjs&#39;</span>
<span class="token keyword">const</span> userList <span class="token operator">=</span> mockJS<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//生成100</span>
  <span class="token string-property property">&quot;data|100&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;@cname&quot;</span><span class="token punctuation">,</span><span class="token comment">//随机中文名</span>
    <span class="token string-property property">&quot;id|+1&quot;</span><span class="token operator">:</span><span class="token number">1</span> <span class="token comment">//自增，每次+1</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/api/users&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">response</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>body<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span>userList<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在项目中，开发环境下就可以按照正常的网络请求获取mock数据</p></li></ol><h4 id="configresolved" tabindex="-1"><a class="header-anchor" href="#configresolved" aria-hidden="true">#</a> configResolved</h4><p>整个配置文件解析完后执行的钩子</p><h2 id="vite与ts的结合" tabindex="-1"><a class="header-anchor" href="#vite与ts的结合" aria-hidden="true">#</a> vite与ts的结合</h2><p>vite天生支持ts，但vite只是编译ts代码，并不会对ts代码进行类型检查</p><p>如果需要对ts代码进行类型检查，只有通过类型检查才能执行编译</p><p><code>tsc --noEmit &amp;&amp; vite build</code></p><p>想在浏览器端也呈现出警告信息，可以使用 <code>vite-plugin-checker</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//vite.config.ts</span>
<span class="token comment">//...</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
  <span class="token function">checker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">typescript</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//tsconfig.ts</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//跳过对node_modules目录的检查</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为vite环境变量配置声明文件" tabindex="-1"><a class="header-anchor" href="#为vite环境变量配置声明文件" aria-hidden="true">#</a> 为vite环境变量配置声明文件</h3><p>扩展 <code>i<wbr>mport.meta.env</code>的声明，为自定义的环境变量提供代码提示</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//vite-env.d.ts</span>
<span class="token comment">///&lt;reference type=&quot;vite/client&quot;&gt;</span>
<span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token constant">VITE_PROXY_TARGER</span><span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite性能优化" tabindex="-1"><a class="header-anchor" href="#vite性能优化" aria-hidden="true">#</a> vite性能优化</h2><p>性能优化，优化的是什么？</p><ol><li>开发时态的构建速度优化 <ul><li>vite是按需加载，这样面不用太在意</li></ul></li><li>页面性能指标 <ul><li>首屏渲染：FCP（First Content Paint） <ul><li>懒加载</li><li>http优化：强缓存，协商缓存</li></ul></li><li>页面中最大元素的时长：LCP（Largest Content Paint）</li></ul></li><li>js逻辑优化 <ul><li>注意副作用的清除（setTimeout,setInterval,事件监听）</li><li>使用requestAnimationFrame，requestIdleCallback <ul><li>浏览器的帧率以16.6ms更新页面（执行js逻辑，重排重绘等）</li></ul></li><li>使用lodash提供的高性能的工具库（防抖，节流，循环）</li><li>对作用域的控制</li></ul></li><li>构建优化vite(rollup) webpack <ul><li>优化体积：压缩，treeshaking，图片资源压缩，cdn加载，分包</li></ul></li></ol><h3 id="分包策略" tabindex="-1"><a class="header-anchor" href="#分包策略" aria-hidden="true">#</a> 分包策略</h3><p>将不会常规更新的代码（依赖）单独打包处理，在修改业务代码时不会浪费性能重复对不会改变的代码打包</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function-variable function">manualChunks</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          <span class="token comment">//id是文件路径</span>
          <span class="token comment">//将依赖包打包到vendor文件</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;vendor&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gzip压缩" tabindex="-1"><a class="header-anchor" href="#gzip压缩" aria-hidden="true">#</a> gzip压缩</h3><p>文件资源体积很大，会加大在网络传输时的压力，降低性能</p><p>但客户端需要解压文件，也需要耗时耗性能，需要斟酌使用gzip</p><p>将资源文件在服务端进行压缩，减少体积，再将压缩包通过http传输到客户端，客户端接收到后解压</p><p>使用 <code>vite-plugin-compression</code>vite插件来对打包的代码压缩</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token function">vitePluginCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后将会有一个 <code>.gz</code>后缀的文件，在服务端要使用 <code>.gz</code>文件传输给客户端，设置 <code>content-encoding:gzip</code>，客户端接收到响应头的 <code>content-encoding</code>是 <code>gzip</code>类型就会解压的得到源文件</p><h3 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入" aria-hidden="true">#</a> 动态导入</h3><p>在ESM模式下，除了 <code>import from</code>静态导入，还可以使用 <code>import</code>动态导入方法（异步），这个方法返回一个 <code>promise</code>对象</p><p>动态导入原理：在代码中使用动态导入方法引入模块，但还没有使用该模块时，<code>promise</code>处于 <code>pending</code>状态，一旦使用到该模块，就会执行 <code>promise</code>的 <code>resolve</code>方法去执行动态导入的逻辑；动态导入的逻辑基本实现是，创建 <code>script</code>标签，<code>src</code>指向 <code>import</code>方法的参数（即模块路径），再将 <code>script</code>标签推到 <code>body</code>标签中，<code>script</code>标签就会发起 <code>http</code>请求文件，以达到动态导入，按需加载的效果</p><h3 id="cdn加速" tabindex="-1"><a class="header-anchor" href="#cdn加速" aria-hidden="true">#</a> cdn加速</h3><p>content delivery network，内容分发网络</p><p>通过cdn，将我们依赖的第三方模块改成cdn引入，以保证我们的最终的打包代码最小体积，优化网络传输</p><p><code>vite-plugin-cdn-import</code>插件可以配置打包后第三方依赖通过cdn形式载入</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,35),P={href:"https://www.bilibili.com/video/BV1GN4y1M7P5",target:"_blank",rel:"noopener noreferrer"};function V(T,S){const e=p("ExternalLinkIcon");return i(),c("div",null,[r,d,u,v,k,m,h,b,g,y,n("p",null,[n("a",f,[s("Vite 原理分析 - 掘金 (juejin.cn)"),t(e)])]),w,x,j,n("p",null,[n("a",q,[s("vite-aliases"),t(e)]),s("插件可以自动生成别名")]),_,C,E,n("p",null,[n("a",M,[s("Mock.js (mockjs.com)"),t(e)])]),I,n("p",null,[n("a",P,[s("Vite世界指南（带你从0到1深入学习 vite）"),t(e)])])])}const D=o(l,[["render",V],["__file","viteguide.html.vue"]]);export{D as default};
