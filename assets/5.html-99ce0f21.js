import{_ as a,o as e,c as t,a as s,b as n}from"./app-d4c6289a.js";const p="/assets/1690791707049-ab73dce2.png",o="/assets/1690796569340-6c669a13.png",c={},i=s('<p>利用node可以十分方便地搭建网络服务器。在Web领域，大多数的编程语言需要专门的Web服务器作为容器</p><p>对于node而言，只需要几行代码即可以构建服务器，无需额外的容器</p><p>node提供 <code>net</code>、<code>dgram</code>、<code>http</code>、<code>https</code>模块，分别处理TCP、UDP、HTTP、HTTPS，适用于服务器端和客户端</p><h2 id="osi模型" tabindex="-1"><a class="header-anchor" href="#osi模型" aria-hidden="true">#</a> OSI模型</h2><table><thead><tr><th>OSI</th><th>协议或格式</th><th>作用</th><th>五层模型</th></tr></thead><tbody><tr><td>应用层</td><td>HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP</td><td>网络服务于最终用户的一个接口</td><td>应用层</td></tr><tr><td>表示层</td><td>jpeg ASCII 加密格式等</td><td>数据的标识、安全、压缩</td><td>应用层</td></tr><tr><td>会话层</td><td></td><td>建立、管理、终止会话</td><td>应用层</td></tr><tr><td>传输层</td><td><strong>TCP、UDP</strong>，数据包一旦离开网卡即进入网络传输层**（MAC地址 + IP地址 + 端口号）**</td><td>定义传输数据的协议<strong>端口号</strong>，以及留空和差错校验</td><td></td></tr><tr><td>网络层</td><td>ICMP、IGMP、IP（IPV4 IPV6）<strong>（MAC地址 + IP地址）</strong></td><td>进行逻辑地址寻址，实现不同网络之间的路径选择</td><td></td></tr><tr><td>数据链路层</td><td></td><td>建立逻辑连接，进行硬件地址寻址，差错校验等功能，由底层网络定义协议<br>将比特组合成字节进而组合成帧，用MAC地址访问介质</td><td></td></tr><tr><td>物理层</td><td><strong>MAC地址</strong>（网卡固有）</td><td>建立，维护，断开物理连接</td><td></td></tr></tbody></table><h2 id="构建tcp服务" tabindex="-1"><a class="header-anchor" href="#构建tcp服务" aria-hidden="true">#</a> 构建TCP服务</h2><p>传输控制协议（TCP），HTTP、SMTP、IMAP等协议都基于TCP构建</p><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手" aria-hidden="true">#</a> 三次握手</h3><p><code>TCP</code>处于传输层，基于端口，面向连接的协议，显著特征是在传输之前需要3次握手形成会话</p><p><code>TCP</code>的握手的挥手本质上都是四次，握手时可以将服务端向客户端发送ACK=1时同时发送SYN=1的请求，这可以合并，于是就有3次握手。</p><p>而断开连接必定需要4次挥手不能合并，因为一个服务端服务于多个客户端，客户端将请求发给服务端，服务端可能还没来得及将全部数据全部传回，所以在断开连接时需要分开处理</p><p><img src="'+p+`" alt="1690791707049"></p><ul><li><p>SYN=1：请求建立连接</p></li><li><p>FIN=1：请求断开连接</p></li><li><p>ACK=1：数据信息确认</p></li></ul><p><strong>第一次：客户端想服务器端发出连接请求</strong></p><p>同部位SYN=1，报文不能携带数据，SYN用于建立连接，FIN终止连接</p><p>初始序号seq=x</p><p>TCP客户进程进入SYN-SENT（同步已发送）状态</p><p><strong>第二次：服务器端接收到请求连接报文</strong></p><p>同意，向客户端发送确认报文，ACK=1，SYN=1，表示确认数据信息，并向客户端发送请求连接</p><p>ACK：成功，继续进行下一步</p><p>RST：出错，终止连接</p><p>确认号：ack=x+1</p><p>初始序号seq=y</p><p>TCP服务器进程进入SYN-RCVD（同步收到）状态</p><p><strong>第三次：客户端接收到服务端确认后，也要向服务端发报文确认</strong></p><p><strong>可以携带数据</strong>，ACK=1，报文可写到数据，不携带数据不消耗序号</p><p>确认号ack=y+1</p><p>序号seq=x+1，初始为seq=x，第二个报文需要+1</p><p><strong>TCP连接已建立</strong></p><p>客户端进入ESTABLISHED(已建立连接)</p><p>服务器收到客户端确认后也进入ESTABLISHED状态</p><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手" aria-hidden="true">#</a> 四次挥手</h3><h3 id="node创建tcp通信" tabindex="-1"><a class="header-anchor" href="#node创建tcp通信" aria-hidden="true">#</a> node创建TCP通信</h3><p><strong>server端</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建服务端实例</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">1234</span>
<span class="token keyword">const</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span>
<span class="token comment">// 开启服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span><span class="token constant">HOST</span><span class="token punctuation">)</span>

<span class="token comment">//监听事件</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;listening&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">服务端已经开启在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">HOST</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//接收信息，回写信息</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span><span class="token parameter">socket</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//接受客户端的信息</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//回信息给客户端</span>
    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;您好&#39;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务端已关闭&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&#39;EADDRINUSE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    conosle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;地址被占用&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>client端</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建客户端</span>
<span class="token comment">// 要连接的服务端地址</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">1234</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">&#39;127.0.0.1&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 监听事件</span>
client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connect&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//发送信息给服务端</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;拉钩教育&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//接收服务端信息</span>
client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;客户端断开连接&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建udp" tabindex="-1"><a class="header-anchor" href="#构建udp" aria-hidden="true">#</a> 构建UDP</h2><p>一旦创建，既可以作为客户端发送数据，也可作为服务端接收数据</p><p>一个套接字可与多个UDP服务通信</p><p>虽然提供面向食物的简单不可靠信息传输服务，在网络差的情况下存在丢包严重的问题，但它无需连接，资源消耗低，处理快速且灵活</p><p>常应用于音频、视频的传输</p><p>使用 <code> dgram.bind(port,[address])</code>创建UDP服务器</p><h2 id="构建http服务" tabindex="-1"><a class="header-anchor" href="#构建http服务" aria-hidden="true">#</a> 构建HTTP服务</h2><p>构建在TCP之上，属于应用层协议，Web就是HTTP应用之一</p><p>特点：</p><ul><li>响应时，一问一答方式实现服务</li><li>处理HTTP请求和HTTP响应</li></ul><h3 id="http报文" tabindex="-1"><a class="header-anchor" href="#http报文" aria-hidden="true">#</a> HTTP报文</h3><ol><li>第一部分：TCP三次握手</li><li>第二部分：客户端向服务端发送请求报文</li><li>第三部分：服务器端完成处理，向客户端发送响应内容，包括<strong>响应头</strong>和<strong>响应体</strong></li></ol><h3 id="node的http模块" tabindex="-1"><a class="header-anchor" href="#node的http模块" aria-hidden="true">#</a> node的HTTP模块</h3><p>继承自TCP，能与多个客户端保持连接</p><p>采用事件驱动，并不会为每个连接创建额外的线程或进程，保持很低的内存占用，实现高并发</p><p>与TCP的区别：</p><ul><li>开启keepalive后，一个TCP会话可用于<strong>多次</strong>请求和响应</li><li>TCP一connection为单位进行服务，HTTP以request为单位进行服务</li><li>HTTP模块是将connection和request的过程进行了封装</li><li>HTTP模块将连接所用套接字的读写抽象为<strong>ServerRequest</strong>和<strong>ServerResponse</strong>对象</li></ul><h3 id="http请求" tabindex="-1"><a class="header-anchor" href="#http请求" aria-hidden="true">#</a> HTTP请求</h3><h4 id="请求报文头" tabindex="-1"><a class="header-anchor" href="#请求报文头" aria-hidden="true">#</a> 请求报文头</h4><p>对TCP连接的读操作，HTTP模块将其封装为<strong>ServerRequest</strong>对象</p><p><code>http_parse</code>对报文进行解析</p><ul><li>method</li><li>url</li><li>httpVersion</li><li>其余的放置在headers属性上</li></ul><h4 id="请求报文体" tabindex="-1"><a class="header-anchor" href="#请求报文体" aria-hidden="true">#</a> 请求报文体</h4><p><strong>只读流对象</strong>，只有读取完报文体中的数据才能进行操作</p><h3 id="http响应" tabindex="-1"><a class="header-anchor" href="#http响应" aria-hidden="true">#</a> HTTP响应</h3><p>封装了对底层连接的写操作，将其封装成<strong>ServerResponse</strong>对象</p><p><strong>可写流对象</strong></p><h4 id="响应报文头" tabindex="-1"><a class="header-anchor" href="#响应报文头" aria-hidden="true">#</a> 响应报文头</h4><p>报文头是在报文体发送前发送的，一旦开始数据发送，writeHead()和setHeader()将不再生效</p><p><code>response.setHeader(headerObj)</code>可以进行多次设置响应头</p><p><code>response.writeHead(statusCode,headerObj)</code>调用了才会将报文头写入连接中</p><h4 id="响应报文体" tabindex="-1"><a class="header-anchor" href="#响应报文体" aria-hidden="true">#</a> 响应报文体</h4><p><code>end()</code>会先调用write()发送数据，然后发送信号告知服务器这次响应结束</p><p>无论服务端在处理业务逻辑时是否发生异常，务必在<strong>结束时调用 <code>end()</code>结束请求，否则客户端将一直处于等待状态</strong></p><p><code>response.write()</code>和 <code>response.end()</code>实现发送数据</p><h4 id="http服务事件" tabindex="-1"><a class="header-anchor" href="#http服务事件" aria-hidden="true">#</a> HTTP服务事件</h4><p>HTTP服务器抽象一些事件，供应用层使用，服务器是一个 <code>EventEmitter</code>实例</p><ul><li><p><code>connection</code></p><p>在开始HTTP请求和响应前，客户端与服务器端需要建立底层的TCP连接，这个连接可能因为开启了keep-alive，可以在多次请求响应之间使用；当这个连接建立时，服务器触发一次connection事件。</p></li><li><p><code>request</code></p><p>建立TCP连接后，http模块底层将在数据流中抽象出HTTP请求和HTTP响应，当请求数据发送到服务器端，在解析出HTTP请求头后，将会触发该事件；在res.end()后，TCP连接可能将用于下一次请求响应。</p></li><li><p><code>close</code></p><p>与TCP服务器的行为一致，调用server.close()方法停止接受新的连接，当已有的连接都断开时，触发该事件；可以给server.close()传递一个回调函数来快速注册该事件。</p></li><li><p><code>checkContinue</code></p></li><li><p><code>connect</code></p></li><li><p><code>upgrade</code></p></li><li><p><code>clientError</code></p><p>连接的客户端触发error事件时，这个错误会传递到服务器端，此时触发该事件。</p></li></ul><h3 id="http客户端" tabindex="-1"><a class="header-anchor" href="#http客户端" aria-hidden="true">#</a> HTTP客户端</h3><p><code>http.request(options,connect)</code>创建HTTP客户端</p><p>options</p><ul><li><code>host</code>：服务器的域名或IP地址，默认localhost</li><li><code>hostname</code>：服务器名称</li><li><code>port</code>：服务器端口，默认80</li><li><code>localAddress</code>：建立连接的本地网卡</li><li><code>socketPath</code>：Domain套接字路径</li><li><code>method</code>：HTTP请求方法，默认GET</li><li><code>path</code>：请求路径，默认/</li><li><code>headers</code></li><li><code>auth</code>：Basic认证，计算成请求头中的Authorization</li></ul><h4 id="客户端事件" tabindex="-1"><a class="header-anchor" href="#客户端事件" aria-hidden="true">#</a> 客户端事件</h4><ul><li><p><code>response</code></p><p>与服务器端的request事件对应的客户端在请求发出后得到服务器端响应时，会触发该事件。</p></li><li><p><code>socket</code></p><p>当底层连接池中建立的连接分配给当前请求对象时，触发该事件。</p></li><li><p><code>connect</code></p><p>当客户端向服务器端发起CONNECT请求时，如果服务器端响应了200状态码，客户端将会触发该事件。</p></li><li><p><code>upgrade</code></p></li><li><p><code>continue</code></p><p>客户端向服务器端发起<code>Expect: 100-continue</code>头信息，以试图发送较大数据量，如果服务器端响应100 Continue状态，客户端将触发该事件</p></li></ul><h2 id="网络服务与安全" tabindex="-1"><a class="header-anchor" href="#网络服务与安全" aria-hidden="true">#</a> 网络服务与安全</h2><h3 id="tls-ssl" tabindex="-1"><a class="header-anchor" href="#tls-ssl" aria-hidden="true">#</a> TLS/SSL</h3><p>TLS(安全传输层协议)/SSL(安全套接层)</p><h4 id="密钥" tabindex="-1"><a class="header-anchor" href="#密钥" aria-hidden="true">#</a> 密钥</h4><p><img src="`+o+'" alt="1690796569340"></p><p>一个公钥/私钥的<strong>非对称</strong>结构</p><p>服务器端和客户端都有自己的公私钥</p><p>服务器端和客户端在建立安全传输前，需要<strong>互换公钥</strong></p><p>使用<strong>接收方的公钥加密</strong>PEM数据传输</p><ul><li>客户端发送数据需要通过服务器公钥加密</li><li>服务端发送数据需要客户端公钥解密</li></ul>',91),l=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"公钥：加密要传输的数据"),n("p",null,"私钥：解密接收到的数据")],-1),r=s(`<h3 id="openssl生成rsa" tabindex="-1"><a class="header-anchor" href="#openssl生成rsa" aria-hidden="true">#</a> OpenSSL生成RSA</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#生成服务器和客户端的私钥</span>
<span class="token comment">#生成1024位的rsa私钥文件</span>
openssl genrsa <span class="token parameter variable">-out</span> server.key <span class="token number">1024</span>
openssl genrsa <span class="token parameter variable">-out</span> client.key <span class="token number">1024</span>

<span class="token comment">#利用私钥生成公钥</span>
openssl rsa <span class="token parameter variable">-in</span> server.key <span class="token parameter variable">-pubout</span> server.pem
openssl rsa <span class="token parameter variable">-in</span> client.key <span class="token parameter variable">-pubout</span> client.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rsa仍存在窃听可能" tabindex="-1"><a class="header-anchor" href="#rsa仍存在窃听可能" aria-hidden="true">#</a> RSA仍存在窃听可能</h4><p>中间人攻击：两端在交换公钥过程中，中间人扮演互相的角色，两端几乎感受不到中间人的存在，中间人可能会将伪造的站点响应给用户</p><p>解决方法：数字证书认证</p><h3 id="数字证书" tabindex="-1"><a class="header-anchor" href="#数字证书" aria-hidden="true">#</a> 数字证书</h3><p>包含服务器的名称和主机名，服务器的公钥，签名颁发机构的名称，来自签名办法机构的签名</p><h4 id="数字证书认证中心" tabindex="-1"><a class="header-anchor" href="#数字证书认证中心" aria-hidden="true">#</a> 数字证书认证中心</h4><p>为站点颁发证书，且证书具有CA通过自己的公钥和私钥实现的签名</p><p><strong>自签名证书</strong></p><ol><li><p>扮演CA机构给自己的服务器端颁发签名证书，生成私钥RSA，CSR文件，生成签名证书CRT</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#生成ca的私钥</span>
openssl genrsa <span class="token parameter variable">-out</span> ca.key <span class="token number">1024</span>
<span class="token comment">#生成ca的csr文件</span>
openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> ca.key <span class="token parameter variable">-out</span> ca.csr
<span class="token comment">#生成crt自签名</span>
openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> ca.csr <span class="token parameter variable">-signkey</span> ca.key <span class="token parameter variable">-out</span> crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>服务器端向CA机构申请签名证书 用<strong>服务端私钥</strong>RSA生成证书签名请求<strong>CSR文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-out</span> server.csr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用CSR文件向CA申请签名证书，<strong>需要CA的证书和私钥</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-CA</span> ca.art <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-out</span> server.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>客户端发起安全连接前获取服务器端证书，通过CA证书验证服务器端证书的真伪</p></li></ol><h2 id="https服务" tabindex="-1"><a class="header-anchor" href="#https服务" aria-hidden="true">#</a> HTTPS服务</h2><p>工作在TLS/SSL上</p><p>HTTPS服务需要用到私钥和签名证书</p><p>创建HTTPS服务，比HTTP服务多一个配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span>
https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;./key/server.key&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">cert</span><span class="token operator">:</span> <span class="token string">&#39;./key/server.crt&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>curl工具无法验证自签名证书</strong></p><p><code>-k</code>：忽略验证证书，存在中间人攻击风险</p><p><code>-cacert</code>：告知CA证书完成对服务器证书的验证</p>`,19),d=[i,l,r];function u(k,h){return e(),t("div",null,d)}const m=a(c,[["render",u],["__file","5.html.vue"]]);export{m as default};
