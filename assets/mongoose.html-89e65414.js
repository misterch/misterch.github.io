import{_ as e,o as p,c as t,a,b as n,d as s}from"./app-d4c6289a.js";const o="/assets/image-20200602172616148-7c069c46.png",c="/assets/image-20200602172739999-40b47938.png",l="/assets/image-20200602183628001-77436c5a.png",i={},r=a(`<blockquote><p>使用mongoose可以创建连接连接MongoDB数据库，定义模型，CRUD</p></blockquote><h2 id="创建连接" tabindex="-1"><a class="header-anchor" href="#创建连接" aria-hidden="true">#</a> 创建连接</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//createConnection</span>
<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>
mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost/test&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token comment">//兼容性配置，兼容低版本</span>
  <span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token literal-property property">useUnifiedTopology</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;连接已打开&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="schema定义结构" tabindex="-1"><a class="header-anchor" href="#schema定义结构" aria-hidden="true">#</a> schema定义结构</h2><p>使用<code>schema</code>可以定义数据库中集合的文档的结构，由此产生模型</p><p>结构是描述某种数据中有哪些字段，字段的类型、字段的约束</p><p>在MongoDB中其实并不会像MySQL那样的强约束，MongoDB对集合没有任何限制，也不会对字段的类型有约束。而使用mongoose可以规范集合中文档的结构</p><h3 id="定义结构" tabindex="-1"><a class="header-anchor" href="#定义结构" aria-hidden="true">#</a> 定义结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> addressSchema <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./addressSchema&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//简单配置</span>
  <span class="token literal-property property">loginId</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token comment">//对loginId更多的配置</span>
  <span class="token literal-property property">loginId</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  	<span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  	<span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  	<span class="token comment">//index: true, // 把该字段设置为索引，以后通过loginId查找时提高查询速度</span>
  	<span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 特殊索引，唯一索引，并非验证</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loginPwd</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
		<span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token literal-property property">trim</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//密码不作为查询字段，即查询结果不会出现该字段</span>
    <span class="token literal-property property">select</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  	<span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
		<span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token literal-property property">trim</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token literal-property property">minlength</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
		<span class="token literal-property property">maxlength</span><span class="token operator">:</span><span class="token number">10</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loves</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//数组是一个String类型</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//地址可能会在多个地方使用，可以提取出来成为一个schema</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span>addressSchema<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span>userSchema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>addressSchema</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">province</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token literal-property property">type</span><span class="token operator">:</span>string<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">city</span><span class="token operator">:</span><span class="token punctuation">{</span>
     <span class="token literal-property property">type</span><span class="token operator">:</span>string<span class="token punctuation">,</span>
     <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Operation</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> addressSchema <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./addressSchema&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> operationSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">operation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//约束可选择的范围，可以提取到一个模块</span>
    <span class="token keyword">enum</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;登录&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;注销&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;阅读文章&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> addressSchema<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">time</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//相当于外键</span>
  <span class="token literal-property property">userid</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//js没有的类型可以使用mongoose提供的类型</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> mongoose<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">extraInfo</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//任意类型</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>Mixed<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Operation&#39;</span><span class="token punctuation">,</span>operationSchema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="根据结构创建模型" tabindex="-1"><a class="header-anchor" href="#根据结构创建模型" aria-hidden="true">#</a> 根据结构创建模型</h3><blockquote><p>在定义好结构并根据结构创建模型后，就可以实行模型进行文档的增删改查操作</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span>userSchema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ensureindex" tabindex="-1"><a class="header-anchor" href="#ensureindex" aria-hidden="true">#</a> ensureIndex</h3><p>在旧版本创建索引使用ensureIndex，为了兼容旧版本，需要配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>mongoose<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;useCreateIndex&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="备份与恢复" tabindex="-1"><a class="header-anchor" href="#备份与恢复" aria-hidden="true">#</a> 备份与恢复</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#备份</span>
<span class="token comment">#将数据可备份到指定目录</span>
mongodump <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>dbname<span class="token operator">&gt;</span> <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>backDir<span class="token operator">&gt;</span>

<span class="token comment">#恢复</span>
<span class="token comment">#将指定目录的数据库恢复到指定的数据库</span>
mongorestore <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>dbname<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>backDir<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新增" tabindex="-1"><a class="header-anchor" href="#新增" aria-hidden="true">#</a> 新增</h2><h3 id="方式1" tabindex="-1"><a class="header-anchor" href="#方式1" aria-hidden="true">#</a> 方式1</h3><p>创建模型对象，然后保存</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>
<span class="token keyword">const</span> resulr <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式2" tabindex="-1"><a class="header-anchor" href="#方式2" aria-hidden="true">#</a> 方式2</h3><p>直接使用函数创建对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">addDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">...</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建操作细节" tabindex="-1"><a class="header-anchor" href="#创建操作细节" aria-hidden="true">#</a> 创建操作细节</h3><ol><li><code>mongoose</code>会为每个对象（包括子对象）添加唯一键<code>_id</code>，特别是在对象数组中，可以有效维护数据的唯一标识 <ul><li>可以禁用自动为对象分配_id，在相应的schema中的对象位置配置<code>_id:false</code></li></ul></li><li><code>mongoose</code>在创建文档是，会自动生成一个字段<code>__v</code>，该字段用于并发冲突 <ul><li>Schema的第二个参数中配置<code>versionKey:false</code>可以关闭</li></ul></li><li><code>mongoose</code>总是户在保存文档时触发验证，可以关闭这个行为 <ul><li>在Schema的第二个参数中配置<code>validateBeforeSave: false</code>，这将导致使用该Schema的Model在保存时均不会触发验证</li><li>在调用<code>save</code>方法或<code>create</code>方法时，传入一个配置对象，配置<code>validateBeforeSave:false</code>，这样就仅针对这次调用不进行验证。当给create方法传入配置时，为了避免歧义，需要将第一个参数设置为数组</li></ul></li><li><code>&lt;Model&gt;.create(doc,option)</code>相当于调用了<code>new &lt;Model&gt;(doc).save(option)</code><ul><li>当给create传入多个文档，其内部会创建多个模型，然后循环调用它们的save方法</li></ul></li><li>无论哪种方式，都会得到<code>模型实例</code>，该实例户被<code>mongoose</code>持续跟踪，只要对模型实例的修改都会被记录，一旦重新调用模型实例的save方法，就会把之前对模型的所有更改持久化到数据库</li><li>新增对象时，如果遇到Schema中<strong>没有定义</strong>的字段，则会<strong>忽略</strong></li></ol><h2 id="原生查询" tabindex="-1"><a class="header-anchor" href="#原生查询" aria-hidden="true">#</a> 原生查询</h2><p>MongoDB原生查询</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//filter：查询条件</span>
<span class="token comment">//projection：查询哪些字段</span>
db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">[</span>filter<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>projection<span class="token punctuation">]</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">[</span>filter<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>projection<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="游标" tabindex="-1"><a class="header-anchor" href="#游标" aria-hidden="true">#</a> 游标</h3><p>就是查询的返回结果，返回结果是一个对象，类似于迭代器，可在查询结果中进行迭代</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">[</span>filter<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>projection<span class="token punctuation">]</span><span class="token punctuation">)</span>
cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//得到第一个结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>cursor的成员：</p><ul><li>next()：游标向后移动，返回下一个结果，如果没有结果则报错</li><li>hasNext()：判断游标是否还能向后移动</li><li>skip()：跳过前面的n条数据，返回cursor</li><li>limit(n)：取当前结果的n条数据，返回cursor</li><li>sort(sortObj)：按照指定的条件排序，返回cursor，1：升序，-1：降序</li><li>count()：得到符合filter的结果数量</li><li>size()：得到最终结果的数量</li></ul><p>由于某些函数会继续返回cursor，因此可以对其进行链式变成，返回cursor的函数称为了链中的一环，无论他们的调用顺序如何，始终按照下面的顺序执行</p><p>对结果先排序，然后从结果中去掉多少条，再取出多少条</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sort -&gt; skip -&gt; limit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询条件" tabindex="-1"><a class="header-anchor" href="#查询条件" aria-hidden="true">#</a> 查询条件</h3><p><code>find</code>函数的第一个参数是查询条件<code>filter</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>

filter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 查找name等于ben的数据</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ben&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用正则查询</span>
filter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 查找以7结尾，并且name包含‘敏’的数据</span>
  <span class="token literal-property property">loginId</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">7$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">敏</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span>

<span class="token comment">//或者</span>
filter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">$or</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">loginId</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">7$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">敏</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">//匹配数组中有音乐的</span>
filter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loves</span><span class="token operator">:</span><span class="token string">&#39;音乐&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">//并且</span>
filter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">$and</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">loves</span><span class="token operator">:</span><span class="token string">&#39;音乐&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">loves</span><span class="token operator">:</span><span class="token string">&#39;体育&#39;</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">//年龄在(20~30]之间</span>
filter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">$gt</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token literal-property property">$lte</span><span class="token operator">:</span> <span class="token number">30</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用属性路径</span>
filter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;address.city&quot;</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">重庆</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),u=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"如果根据_id查询要使用ObjectId来将字符串转换为ObjectId对象"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("db"),n("span",{class:"token punctuation"},"."),n("span",{class:"token operator"},"<"),s("collection"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"_id"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"ObjectId"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'876asd7sd8777asd'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),d=a(`<h4 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h4><p>查询中出现的一些特殊的属性，它以<code>$</code>开头，表达了特殊的查询含义，这些属性称之为操作符operator</p><p>常用的操作符有</p><ul><li>$or：或者</li><li>$and：并且</li><li>$in：在...之中</li><li>$nin：不在...之中</li><li>$gt：大于</li><li>$gte：大于等于</li><li>$lt：小于</li><li>$lte：小于等于</li><li>$ne：不等于</li></ul><h3 id="投影" tabindex="-1"><a class="header-anchor" href="#投影" aria-hidden="true">#</a> 投影</h3><p><code>find</code>函数的第二个参数<code>projection</code>，表示投影，类似于mysql的<code>select</code></p><p><code>projection</code>是一个对象，表示那些字段需要投影到查询结果中，哪些不需要</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//查询结果包含仅name和age，以及自动包含的_id</span>
projection <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//查询结果除了name和age，其他都要包含</span>
projection <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//查询结果仅包含name和age</span>
projection <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">_id</span><span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"//出错，包含name其他都不包含，不包含age其他都包含"),s(`
`),n("span",{class:"token comment"},"// 除了_id外，其他的字段不能混写"),s(`
projection `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(` 
  `),n("span",{class:"token literal-property property"},"age"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),v=a(`<h2 id="mongoose查询" tabindex="-1"><a class="header-anchor" href="#mongoose查询" aria-hidden="true">#</a> mongoose查询</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>projection<span class="token punctuation">)</span> <span class="token comment">// 按照id查询单挑数据</span>
<span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span>projection<span class="token punctuation">)</span> <span class="token comment">//根据条件和投影查询单条数据</span>
<span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span>projection<span class="token punctuation">)</span> <span class="token comment">//根据条件和投影查询多条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>findOne</code>和<code>find</code>如果没有给与回调或等待，则不会真正进行查询，而是返沪i一个<code>DocumentQuery</code>对象，可以通过<code>DocumentQuery</code>对象进行链式调用进一步获取结果，知道传入了回调或等待或调用exec时，才真正执行</p><p>链式调用包括</p><ul><li>count</li><li>limit</li><li>skip</li><li>sort</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> limit <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">$gt</span><span class="token operator">:</span> <span class="token number">30</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关联" tabindex="-1"><a class="header-anchor" href="#关联" aria-hidden="true">#</a> 关联</h3><p>MongoDB是非关系型数据库，优势是存储和读取大量数据，不擅长集合与集合的关联数据</p><p>定义集合与集合的关系要在定义结构时使用<code>ref</code>定义，值是关联模型的名称</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//定义结构</span>
<span class="token keyword">const</span> operationSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//相当于外键</span>
  <span class="token literal-property property">userid</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> mongoose<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 要关联的集合</span>
    <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">&quot;User&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//创建模型</span>
 mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Operation&#39;</span><span class="token punctuation">,</span>operationSchema<span class="token punctuation">)</span>

<span class="token comment">//通过模型操作集合</span>
<span class="token comment">//poplate(&#39;userid&#39;)就可以关联到User集合中对应id的用户</span>
Operation<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">operation</span><span class="token operator">:</span><span class="token string">&#39;登录&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">&#39;userid&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>populate(字段名,查询的字段字符串)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">&#39;userid&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;name age&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="差异点" tabindex="-1"><a class="header-anchor" href="#差异点" aria-hidden="true">#</a> 差异点</h3><ol><li><p><code>count</code>得到的时当前结果的数量</p></li><li><p>查询<code>id</code>时，使用字符串就可以</p></li><li><p><code>proecjtion</code>支持字符串写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//查询结果不包含name和age字段</span>
User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">$gt</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;-name -age&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>sort</code>支持字符串写法</p></li><li><p><code>populate</code>支持关联数据</p></li></ol><h2 id="原生更新" tabindex="-1"><a class="header-anchor" href="#原生更新" aria-hidden="true">#</a> 原生更新</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span>update<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span>update<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过滤条件" tabindex="-1"><a class="header-anchor" href="#过滤条件" aria-hidden="true">#</a> 过滤条件</h3><p>同查询一致</p><h3 id="更新内容" tabindex="-1"><a class="header-anchor" href="#更新内容" aria-hidden="true">#</a> 更新内容</h3><p>第二个参数决定了更新哪些字段</p><ol><li>字段操作</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//没有的字段就会新增字段</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$set</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;ken&#39;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;address.city&quot;</span><span class="token operator">:</span><span class="token string">&quot;广州市&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//修改名字并且年龄【增加】2</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$set</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;ken&#39;</span><span class="token punctuation">}</span>
  <span class="token literal-property property">$inc</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//年龄【乘以】2</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$mul</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//修改字段名称</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$rename</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;fullname&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//删除文档的字段</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$unset</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;address.province&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>数组操作</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//向数组中增加一项</span>
<span class="token comment">//没有的则增加，有的则不进行操作</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$addToSet</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loves</span><span class="token operator">:</span> <span class="token string">&quot;秋葵&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//向数组中增加一项</span>
<span class="token comment">//无论数组中是否存在，都会添加</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$push</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">loves</span><span class="token operator">:</span><span class="token string">&quot;秋葵&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//增加【多项】</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$push</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">loves</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$each</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;豆角&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;番茄&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//从数组中【删除】满足条件的值</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">$pull</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">loves</span><span class="token operator">:</span><span class="token punctuation">{</span>$<span class="token keyword">in</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;秋葵&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;番茄&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//将数组中符合指定的字符【全部】修改</span>
db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">loves</span><span class="token operator">:</span><span class="token string">&quot;其他&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">$set</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;loves.$&quot;</span><span class="token operator">:</span> <span class="token string">&quot;other&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置" aria-hidden="true">#</a> 其他配置</h3><p>第三个参数是其他配置</p><p>upsert：默认false，如果是true表示无法找到匹配项，则进行添加</p><h2 id="mongoose更新" tabindex="-1"><a class="header-anchor" href="#mongoose更新" aria-hidden="true">#</a> mongoose更新</h2><h3 id="方式1-1" tabindex="-1"><a class="header-anchor" href="#方式1-1" aria-hidden="true">#</a> 方式1</h3><p>在模型实例中进行更新，然后保存</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&quot;7hdewe784y36d78as&quot;</span><span class="token punctuation">)</span>
user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">&quot;广州市&quot;</span>
user<span class="token punctuation">.</span>loves<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;秋葵&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;番茄&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式2-1" tabindex="-1"><a class="header-anchor" href="#方式2-1" aria-hidden="true">#</a> 方式2</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span>doc<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span>doc<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与原生的差别" tabindex="-1"><a class="header-anchor" href="#与原生的差别" aria-hidden="true">#</a> 与原生的差别</h3><ol><li><code>_id</code>可以直接使用字符串进行匹配</li><li><code>doc</code>中可以省略<code>$set</code>，直接更改即可</li><li>默认情况下，<strong>更新</strong>不会出发验证，需要在<code>options</code>设置<code>runValidators:true</code>开启验证</li></ol><h2 id="原生删除" tabindex="-1"><a class="header-anchor" href="#原生删除" aria-hidden="true">#</a> 原生删除</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mongoose删除" tabindex="-1"><a class="header-anchor" href="#mongoose删除" aria-hidden="true">#</a> mongoose删除</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><p>在数据库中，索引雷士与一个目录，用于快速定位到具体的内容</p><p>使用索引可以显著提高查询效率，但会增加额外的储存空间（非内存空间），因为索引需要开辟空间来储存索引</p><h3 id="mongdb中的索引操作" tabindex="-1"><a class="header-anchor" href="#mongdb中的索引操作" aria-hidden="true">#</a> mongdb中的索引操作</h3><p>创建索引</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>keys：指定索引中关联的字段，以及字段的排序方式</li><li>options：索引的配置 <ul><li>background：默认false，建索引过程会阻塞其他数据库操作，是否以后台的形式创建索引</li><li>unique：默认false，是否是唯一索引</li><li>name：索引名称</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//以age为索引，升序排序</span>
db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;user-age&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//查看所有索引</span>
db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">getIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//查看集合索引占用空间</span>
db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">totalIndexSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//删除所有索引</span>
db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">dropIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//删除集合指定索引</span>
db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">dropIndex</span><span class="token punctuation">(</span><span class="token string">&quot;索引名称&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><ul><li>针对数据量大的集合使用索引</li><li>针对常用的查询或排序字段使用索引</li><li>尽量避免在程序运行过程中频繁创建和删除索引</li></ul><h1 id="mongoose中的并发管理" tabindex="-1"><a class="header-anchor" href="#mongoose中的并发管理" aria-hidden="true">#</a> mongoose中的并发管理</h1><p><img src="`+o+'" alt="image-20200602172616148"></p><p>当多个异步函数同时操作数据库时，就可能发生这样的情况，具体的场景往往发生在并发请求中</p><p>面对这种情况，<code>mongoose</code>作出以下假设：</p><ul><li>当修改一个文档时，如果某些字段已经不再和数据库对应，说明这个字段的数据是脏数据（dirty data），对于脏数据，不应该对数据库产生影响</li><li>当修改一个文档时，如果字段和数据库是对应的，则是正常数据，正常数据可以正常的更改数据库</li></ul><p>因此，<code>mongoose</code>对于上述场景的处理如下：</p><p><img src="'+c+'" alt="image-20200602172739999"></p><p>可以看出，对于<code>user2</code>的修改，<code>name</code>和<code>loginId</code>是脏数据，因此不会更新到数据库中，而<code>age</code>是正常数据，对它的更改会应用到数据库</p><p>然而，<code>mongoose</code>无法准确的判定对数组是否是脏数据，因此，如果遇到数组的修改，<code>mongoose</code>会做出如下处理：</p><ul><li>当新增文档时，会自动添加字段<code>__v</code>，用于记录更新版本号，一开始为<code>0</code></li><li>通过模型实例对数组进行修改后，保存时会在内部调用实例的<code>increment</code>函数，将版本号<code>+1</code></li><li>当其他模型实例也更改了数组，保存时会对比版本号，如果不一致，则会引发<code>VersionError</code></li></ul><p>原理图如下：</p><p><img src="'+l+'" alt="image-20200602183628001"></p><p>出现错误是好事，可以提醒开发者：这一次保存的某些数据是脏数据，应该引起重视。开发者可以灵活的根据具体情况作出处理，比如提示用户保存失败，或者重新获取数据然后保存。</p><p>由于<code>mongoose</code>仅针对数组进行版本控制，如果要针对所有字段都进行版本控制，需要使用<code>mongoose</code>的插件：<code>mongoose-update-if-current</code></p><blockquote><p>插件地址：https://github.com/eoin-obrien/mongoose-update-if-current</p><p>该插件有一个<code>bug</code>，需要手动解决</p></blockquote><p>使用插件后，所有的字段都将受到版本控制，一旦版本不一致，将引发<code>VersionError</code></p><p>参考来源</p><p>渡一教育</p>',68),m=[r,u,d,k,v];function b(g,h){return p(),t("div",null,m)}const f=e(i,[["render",b],["__file","mongoose.html.vue"]]);export{f as default};
