import{_ as n,o as a,c as s,a as e}from"./app-d4c6289a.js";const t={},o=e(`<h2 id="静态提升" tabindex="-1"><a class="header-anchor" href="#静态提升" aria-hidden="true">#</a> 静态提升</h2><p>vue3的预编译器（插件）在编译单文件组件的过程中将模板（template）编译成render函数。render函数会对<strong>静态节点</strong>和<strong>静态属性</strong>进行提升</p><p>静态节点</p><ul><li>元素节点</li><li>没有板顶动态内容</li></ul><p>静态属性</p><p>例如<code>&lt;div class=&quot;user&quot;&gt;{{user.name}}&lt;/div&gt;</code>，虽然div是动态的（因为内容是动态的），但div上的属性是静态的，所以会将属性进行提升</p><p>render函数是经常需要调用的，一些不变的节点和属性可以提取出render函数以外，不用每次render运行时重复创建</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//vue2的静态节点</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> hoisted <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//vue3的静态节点</span>
<span class="token keyword">const</span> hoisted <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//直接使用hoisted即可</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预字符串化" tabindex="-1"><a class="header-anchor" href="#预字符串化" aria-hidden="true">#</a> 预字符串化</h2><p>当编译器遇到大量连续的静态内容（一般是20个节点），会直接使用<code>createStaticVNode(template)</code>将其编译为一个普通字符串节点，即不会将template的静态内容编译成虚拟DOM，而是直接输出真实DOM</p><h2 id="缓存事件处理函数" tabindex="-1"><a class="header-anchor" href="#缓存事件处理函数" aria-hidden="true">#</a> 缓存事件处理函数</h2><p>事件处理函数一般是不会改变的，所以vue3对事件进行了缓存处理，不需要每次render时都创建事件处理函数，直接从缓存中取出即可</p><h2 id="block-tree" tabindex="-1"><a class="header-anchor" href="#block-tree" aria-hidden="true">#</a> Block Tree</h2><p>vue2在对比新旧树的时候，并不知道哪些节点是静态，哪些是动态的，因此只能一层一层比较，这就浪费了大部分时间在对比静态节点上</p><p>vue3编译器会对每个节点做标记，是静态节点还是动态节点，在根节点记录后代所有的动态节点，对比时通过根节点进行新旧对比</p><h2 id="patchflag" tabindex="-1"><a class="header-anchor" href="#patchflag" aria-hidden="true">#</a> PatchFlag</h2>`,16),c=[o];function p(i,l){return a(),s("div",null,c)}const d=n(t,[["render",p],["__file","viteEfficiency.html.vue"]]);export{d as default};
