import{_ as s,o as n,c as a,a as e}from"./app-d4c6289a.js";const p={},o=e(`<p>在Typescript中，<code>infer</code>是一个用于<strong>条件类型</strong>中的关键字，通常与<code>extends</code>结合使用。他的作用是从一个类型中推断出某个部分的类型，并将推断出的类型赋值给一个类型变量。<code>infer</code>主要用于泛型类型推导，尤其是在处理复杂类型（函数、数组、Promise等）时非常有用。</p><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><p><code>infer</code>通常出现在条件类型的<code>extends</code>子句中</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">infer</span></span> <span class="token constant">U</span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>infer U</code>表示从<code>T</code>中推断出一个类型<code>U</code>，如果推断成功，则返回<code>X</code>，否则返回<code>Y</code></p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p><code>infer</code>最常见的用途是从复杂类型中提取出某个部分的类型，以下是典型的使用场景</p><ol><li><p>提取函数返回值类型</p><p>现在有一个函数类型，我想提取它的返回值类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//函数类型</span>
<span class="token keyword">type</span> <span class="token class-name">Sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">number</span>
<span class="token comment">//封装一个工具，用来提取函数的返回值类型</span>
<span class="token keyword">type</span> <span class="token class-name">Return<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span>
<span class="token keyword">let</span> sumResult <span class="token operator">=</span> Return<span class="token operator">&lt;</span>Sum<span class="token operator">&gt;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>T extends (...args: any[]) =&gt; infer R</code>：检查T是否是一个函数类型</li><li><code>infer R</code>：如果T是函数类型，则使用<code>infer</code>来推断出它的返回值类型，并将其赋值给R</li><li><code>?R:T</code>：如果推断是函数，返回R（即函数返回值类型），否则类型本身</li></ul><p><strong>使用示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">11</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取foo函数的返回值类型，结果得到是number类型</span>
<span class="token keyword">type</span> <span class="token class-name">FooReturnType</span> <span class="token operator">=</span> Return<span class="token operator">&lt;</span><span class="token keyword">typeof</span> foo<span class="token operator">&gt;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取Promise的泛型类型</p><p>现在有一个<code>Promise</code>类型，我想提取它的泛型参数类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UnpackPromise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token comment">// 如果Promise返回值还是一个Promise，需要得到最终不是Promise的返回值类型</span>
<span class="token keyword">type</span> <span class="token class-name">UnpackPromise2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> UnpackPromise<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>T extends Promise&lt;infer U&gt;</code>：检查 <code>T</code> 是否是 <code>Promise</code> 类型。</li><li><code>infer U</code>：如果 <code>T</code> 是 <code>Promise</code> 类型，则推断出它的泛型参数类型，并将其赋值给 <code>U</code>。</li><li><code>? U : never</code>：如果推断成功，返回 <code>U</code>，否则返回 <code>never</code>。</li></ul><p><strong>使用示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PromiseType</span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">Unpacked</span> <span class="token operator">=</span> UnpackPromise<span class="token operator">&lt;</span>PromiseType<span class="token operator">&gt;</span> <span class="token comment">//string</span>

<span class="token keyword">type</span> <span class="token class-name">Unpacked2</span> <span class="token operator">=</span> UnpackPromise<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;&gt;</span> <span class="token comment">// Promise&lt;string&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">Unpacked3</span> <span class="token operator">=</span> UnpackPromise2<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;&gt;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取数组的成员类型</p><p>现在又一个数组类型，我想提取它的成员类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ElementType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>T extends (infer U)[]</code>：检查 <code>T</code> 是否是数组类型。</li><li><code>infer U</code>：如果 <code>T</code> 是数组类型，则推断出它的成员类型，并将其赋值给 <code>U</code>。</li><li><code>? U : never</code>：如果推断成功，返回 <code>U</code>，否则返回 <code>never</code>。</li></ul><p><strong>使用示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ArrayType</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Element</span> <span class="token operator">=</span> ElementType<span class="token operator">&lt;</span>ArrayType<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取元祖的类型</p><p>假设我们有一个元组类型，我们想提取它的某个位置的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FirstElement<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>T extends [infer U, ...any[]]</code>：检查 <code>T</code> 是否是元组类型，并且至少有一个元素。</li><li><code>infer U</code>：如果 <code>T</code> 是元组类型，则推断出第一个元素的类型，并将其赋值给 <code>U</code>。</li><li><code>? U : never</code>：如果推断成功，返回 <code>U</code>，否则返回 <code>never</code>。</li></ul><p><strong>使用示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleType</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">First</span> <span class="token operator">=</span> FirstElement<span class="token operator">&lt;</span>TupleType<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ol><li><strong><code>infer</code> 只能在条件类型的 <code>extends</code> 子句中使用</strong>，不能单独使用。</li><li><strong><code>infer</code> 推断的类型是局部的</strong>，只能在当前条件类型的分支中使用。</li><li><strong><code>infer</code> 可以嵌套使用</strong>，用于处理更复杂的类型推导。</li></ol>`,10),t=[o];function c(l,r){return n(),a("div",null,t)}const d=s(p,[["render",c],["__file","infer.html.vue"]]);export{d as default};
