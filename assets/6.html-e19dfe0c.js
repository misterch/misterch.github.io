import{_ as n,o as s,c as a,a as t}from"./app-d4c6289a.js";const p={},e=t(`<h2 id="创建node服务器" tabindex="-1"><a class="header-anchor" href="#创建node服务器" aria-hidden="true">#</a> 创建node服务器</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">1337</span><span class="token punctuation">,</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于Web应用而言，这是远达不到业务需求的，在具体业务中，可能有这些需求</p><ul><li>请求方法的判断</li><li>URL的路径解析</li><li>URL中查询字符串解析</li><li>cookie的解析</li><li>basic认证</li><li>表单数据的解析</li><li>任意格式文件的上传处理</li><li>日志</li></ul><h3 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h3><blockquote><p>req.method</p></blockquote><p>RESTful</p><p>GET：查看资源</p><p>POST：更新资源</p><p>PUT：新建一个资源</p><p>DELETE：删除一个资源</p><h3 id="路径解析" tabindex="-1"><a class="header-anchor" href="#路径解析" aria-hidden="true">#</a> 路径解析</h3><blockquote><p><code>req.url</code></p><p>包含 <code>path</code>和 <code>query</code></p><p><code>hash</code>部分会被丢弃</p></blockquote><p>通过 <code>url.parse(req.url)</code>方法解析出URL对象</p><p>常见业务</p><ul><li>静态文件服务器</li><li>根据路径捞选择控制器</li></ul><h3 id="查询字符串" tabindex="-1"><a class="header-anchor" href="#查询字符串" aria-hidden="true">#</a> 查询字符串</h3><p>路径 <code>?</code>后面的query，通过 <code>url.parse(req.url).query</code>获得查询字符串</p><p><code>querystring</code>模块处理query，解析出JSON对象</p><p><code>querystring.parse(url.parse(req.url).query)</code></p><p><code>url.parse()</code>也可以，需要传递第二个参数为true</p><p><code>url.parse(req.url,true).query</code></p><p>在一些中间件或者框架（koa、express）会将查询字符串转换，然后<strong>挂载到请求对象</strong>上供业务使用</p><p><code>req.query = url.parse(req.url,true).query</code></p><p>出现多次的key，value将会是一个数组，业务的判断一定要检查值是数组还是字符串，否则可能出现TypeError异常情况</p><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h3><p>HTTP是一个无状态协议，业务中常常需要状态，否则无法区分用户之间的身份，使用cookie可以标识和认证一个用户，这是最早的方案。</p><p>记录服务端和客户端的状态</p><p>cookie的处理如下</p><ol><li><p>服务端向客户端发送cookie</p><p>通过<strong>响应报文</strong>设置cookie，如 <code>res.setHeader(&#39;Set-Cookie&#39;,serialize(&#39;name&#39;,&#39;ken&#39;))</code></p><p>在node中封装设置cookie方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//组织将要发送cookie到客户端</span>
<span class="token keyword">function</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>val<span class="token punctuation">,</span>opt</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> pairs<span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">]</span>
	opt <span class="token operator">=</span> opt <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>maxAge<span class="token punctuation">)</span> pairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Max-Age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>opt<span class="token punctuation">.</span>maxAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>expires<span class="token punctuation">)</span> pairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>opt<span class="token punctuation">.</span>expires<span class="token punctuation">.</span>toUTCString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>httpOnly<span class="token punctuation">)</span> pairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;HttpOnly&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>path<span class="token punctuation">)</span> pairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>opt<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>domain<span class="token punctuation">)</span> pairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Domain=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>opt<span class="token punctuation">.</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>secure<span class="token punctuation">)</span> pairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Secure&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> pairs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;; &#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>客户端将cookie保存</p></li><li><p>之后每次浏览器都会将cookie发向服务器端</p><p><strong>解析cookie为JSON对象</strong></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//解析从客户端请求带来的cookie</span>
<span class="token keyword">function</span> <span class="token function">parseCookie</span><span class="token punctuation">(</span><span class="token parameter">cookie</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cookie<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> cookies
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> list <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span>
	list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		<span class="token keyword">var</span> pair <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
		cookie<span class="token punctuation">[</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> cookies
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>req.headers.cookie，通过 <code>parseCookie</code>解析成JSON后挂载到req.cookie供业务使用</p></blockquote><p><strong>设置cookie的选项</strong></p><p><code>path</code>：cookie影响到的路径，当前访问的路径不满足该匹配时，浏览器不会发送这个cookie</p><p><code>Expires/Max-Age</code>：告知浏览器何时过期；不设置，在关闭浏览器时丢弃这个cookie</p><ul><li>Expires：何时过期，UTC格式时间值</li><li>Max-Age：多久过期，一般是设置多少秒过期</li></ul><p><code>HttpOnly</code>：为true，不允许前端修改，也不可见</p><p><code>Secure</code>：为true，只有HTTPS有效</p><p><strong>性能影响</strong></p><p>减少cookie大小：设置的cookie过多，会导致包头较大，造成带宽浪费</p><p>为静态组件使用不同的域名：为不需要的cookie的组件换个域名可以减少无效cookie的传输</p><p>减少DNS查询</p><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> session</h3><p>解决cookie敏感数据，<strong>数据只保留在服务器，客户端无法修改，也不需要每次被传递</strong></p><p><strong>实现session</strong></p><ol><li><p>基于cookie实现用户和数据的映射</p><ol><li><p>使用cookie存放token</p></li><li><p>生成session</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sessions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string">&#39;sid&#39;</span>
<span class="token keyword">var</span> <span class="token constant">EXPIRES</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span>
<span class="token keyword">var</span> <span class="token function-variable function">generate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">//设置sid，将会作为cookie的sid的值</span>
	session<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	session<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">expire</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">EXPIRES</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//以sid作为sessions的key，保存该用户的信息</span>
	sessions<span class="token punctuation">[</span>session<span class="token punctuation">.</span>sid<span class="token punctuation">]</span> <span class="token operator">=</span> session
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>请求到来，检查cookie中的sid与服务端session数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// 根据cookie保存的sid值查找用户信息</span>
	<span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>
		req<span class="token punctuation">.</span>session <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token comment">//以sid为key取出sessions中的用户对象session</span>
		<span class="token keyword">var</span> session <span class="token operator">=</span> sessions<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>expire<span class="token operator">&gt;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token comment">//更新超时时间</span>
				session<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>expire <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">EXPIRES</span>
				req<span class="token punctuation">.</span>session <span class="token operator">=</span> session
			<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
				<span class="token comment">//超时，删除旧数据，重新生成</span>
				<span class="token keyword">delete</span> sessions<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
				req<span class="token punctuation">.</span>session <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token comment">//口令不存在或过期</span>
			req<span class="token punctuation">.</span>session <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//后续的操作</span>
	<span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>响应给客户端设置新的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//hack响应对象的writeHead()方法，在它的内部注入cookie的逻辑</span>
<span class="token keyword">const</span> writeHead <span class="token operator">=</span> res<span class="token punctuation">.</span>writeHead
res<span class="token punctuation">.</span><span class="token function-variable function">writeHead</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">const</span> cookies <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token string">&#39;Set-Cookie&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>req<span class="token punctuation">.</span>session<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
	cookies <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token operator">?</span> cookies<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">[</span>cookies<span class="token punctuation">,</span>session<span class="token punctuation">]</span>
	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Set-Cookie&#39;</span><span class="token punctuation">,</span>cookies<span class="token punctuation">)</span>
	<span class="token comment">//返回原来的writeHead方法</span>
	<span class="token keyword">return</span> <span class="token function">writeHead</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token keyword">var</span> handle <span class="token operator">=</span> <span class="token function">functoon</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isVisit<span class="token punctuation">)</span><span class="token punctuation">{</span>
		res<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isVisit <span class="token operator">=</span> <span class="token boolean">true</span>
		res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
		res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;welcome&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		res<span class="token punctuation">.</span><span class="token function">wirteHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
		res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;welcome again&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>通过查询字符串实现B&amp;S数据对应</p><ol><li>查询query中是否有sid</li><li>根据sid在session中查询用户对象</li><li>没有sid，生成并告诉浏览器跳转</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">getUrl</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_url<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> obj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>_url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	obj<span class="token punctuation">.</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
	<span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> <span class="token function-variable function">redirect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//浏览器要跳转的路径</span>
		res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Location&#39;</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>
		res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span>
		res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> sid <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sid<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">redirect</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span>key<span class="token punctuation">,</span>session<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token keyword">var</span> session <span class="token operator">=</span> sessions<span class="token punctuation">[</span>sid<span class="token punctuation">]</span>
		<span class="token comment">//更新过期时间，更新session，设置Location跳转</span>
		<span class="token comment">//过期，删除旧数据，重新生成，设置Location跳转</span>
		<span class="token comment">//口令不对，重新生成，设置Loaction跳转</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>session与内存的问题</strong></p><ol><li><p>node有内存限制</p><p>将数据存放在内存有很大的隐患，用户增多，就会触及到内存限制的上限</p><p>内存中的数据量加大，必然引起垃圾回收的频繁扫描，引起性能问题</p></li><li><p>进程不共享</p><p>用户的session可能会引起错乱</p></li></ol><p><strong>解决方法</strong></p><p>session集中化：将分散在多个进程的数据统一转移到集中的数据储存中</p><p>使用redis、memcached高效缓存</p><p>问题：会引起网络访问，访问网络中的数据要比访问本地磁盘中的数据速度要慢，涉及握手，传输，磁盘I/O等</p><p>仍采用高速缓存的理由</p><ol><li>node与缓存服务保持<strong>长连接</strong>握手导致的延迟只影响初始化</li><li>高速缓存直接在内存中进行数据储存和访问</li><li>缓存服务器通常与node进程运行在相同的机器上或者相同的机房里，网络速度受到的影响较小</li></ol><p><strong>session与安全</strong></p><ul><li><p>存放在客户端的口令被伪造盗用</p><p>可以使用 <code>cryto</code>工具加密口令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//加密</span>
<span class="token keyword">var</span> <span class="token function-variable function">sign</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span>secret</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
		</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
		.
		crypto.createHmac(&#39;sha256&#39;,secret)
		.update(val)
		.digest(&#39;base64&#39;)
		.replace(/\\=+$/,&#39;&#39;)
	</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token comment">//解密</span>
<span class="token keyword">var</span> <span class="token function-variable function">unsign</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span>secret</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> str <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>val<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>secret<span class="token punctuation">)</span> <span class="token operator">==</span> val <span class="token operator">?</span> str<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>XSS漏洞 cross-site scripting，跨站脚本攻击 XSS漏洞是一种在Web应用中常见的安全漏洞，它允许用户将恶意代码植入web页面，当其他用户访问此页面，植入的恶意代码就会在其他用户的客户端执行</p><p><strong>漏洞原因</strong>：用户的输入没有转义，而被直接<strong>在浏览器执行</strong></p></li></ul><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h3><p>web应用构建界面需要HTML、CSS、、javascript等文件，这些内容大多数场景下都不会经常变更，但却在每次打开web应用时都要通过网络获取传输一次，造成不必要的带宽浪费。利用缓存可以提高应用的体验和性能</p><p>一般大多数<strong>缓存只应用在GET请求</strong>中</p><ul><li>If-Modified-Since</li><li>添加Expires或Cache-Control</li><li>配置ETags</li><li>让Ajax可缓存</li></ul><p><strong>If-Modified-Since</strong></p><p>请求报文中，非第一次请求</p><p>询问服务器是否有新版本，本地文件的最后修改时间；如果没有新版本，只需响应一个304状态码，客户端就使用本地版本；如果有新版本，就将新版发送给客户端</p><p>缺陷：</p><ul><li>时间戳改变，但文件内容不一定有改动</li><li>时间戳只能精确到秒</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">handle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>stat</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		<span class="token keyword">var</span> lastModified <span class="token operator">=</span> stat<span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>lastModified  <span class="token operator">===</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;if-modified-since&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">)</span>
			res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
			fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>file</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
				<span class="token keyword">var</span> lastModified <span class="token operator">=</span> stat<span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Last-Modified&#39;</span><span class="token punctuation">,</span>lastModified <span class="token punctuation">)</span>
				res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span>
				res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置ETags</strong></p><p>If-None-Match/ETag</p><p>服务器根据文件内容生成散列值，不会受时间戳改动造成带宽浪费</p><p>但仍然会发起一个HTTP请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">handle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">var</span> noneMatch <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;if-none-match&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> noneMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">,</span> <span class="token string">&quot;Not Modified&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;ETag&quot;</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
			res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;Ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加Expires/Cache-Control</strong></p><p>无需发起条件请求，服务器响应内容时，让浏览器明确将内容缓存起来</p><p><strong>Expires</strong></p><p>是一个GMT格式的时间字符串，浏览器在接收到这个过期值后，只要本地还存在这个缓存文件，在到期时间之前它都不会再发起请求</p><p>缺陷：两端时间不一致，导致文件提前到期或者到期后并没有被删除</p><p><strong>Cache-Control</strong></p><p>比Expires优秀的地方在于，设置<code>max-age</code>能够避免浏览器端与服务器端时间不同步带来的不一致问题</p><p>同时存在，max-age会覆盖Expires</p><p><strong>清除缓存</strong></p><p>浏览器是根据url进行缓存的，利用url可以更新和清除缓存</p><p><code>http://url.com?hash=88dj82j，根据hash值获取更新的内容</code></p>`,82),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","6.html.vue"]]);export{k as default};
