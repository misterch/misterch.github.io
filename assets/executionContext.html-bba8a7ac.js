import{_ as t,o as p,c as o,b as n,d as s,a}from"./app-d4c6289a.js";const e="/assets/1697525941848-9d6614f8.png",c={},l=n("h2",{id:"执行上下文",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#执行上下文","aria-hidden":"true"},"#"),s(" 执行上下文")],-1),i=n("p",null,"在一个函数运行之前，创建的一块内存空间，空间中包含有该函数执行所需要的的数据，为该函数执行提供支持。",-1),u=n("p",null,"执行上下文栈（call stack）：所有执行上下文组成的内存空间",-1),d=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("栈：一种数据结构，"),n("strong",null,"先进后出，后进先出")]),n("p",null,"JS引擎始终执行的栈顶的上下文")],-1),r=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;global 1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;A1&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;A2&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;global 2&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//输出：global 1--&gt;A1--&gt;B--&gt;A2--&gt;global 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js代码执行必须要有环境，首先就是全局上下文</p><p><img src="`+e+'" alt=""></p><h3 id="执行上下文中的内容" tabindex="-1"><a class="header-anchor" href="#执行上下文中的内容" aria-hidden="true">#</a> 执行上下文中的内容</h3>',4),k=n("ol",null,[n("li",null,[n("p",null,"this指向"),n("ul",null,[n("li",null,"直接调用函数，this指向全局对象"),n("li",null,"函数外调用函数，this指向全局对象"),n("li",null,"通过对象调用或者new一个函数，this指向调用函数的对象或new出来的新对象"),n("li",null,"箭头函数中没有this，在箭头函数中的this是该函数所在作用域指向的对象")])]),n("li",null,[n("p",null,"VO（Variable Object）变量对象"),n("p",null,[s("VO中记录了该环境中所有声明的"),n("strong",null,"参数、变量和函数")]),n("p",null,"GO（Global Object）：全局执行上下文的VO"),n("p",null,"AO（Active Object）：当前正在执行的上下文中的VO"),n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"预编译阶段"),n("ol",null,[n("li",null,"确定所有形参值以及特殊变量arguments"),n("li",null,"确定函数中通过var声明的变量，将他们的值设置为undefined，提升到执行上下文的顶部；如果VO中已有改名称，则直接忽略（只有函数执行时遇到同名才会覆盖）"),n("li",null,[s("确定函数中通过字面量声明的函数（"),n("code",null,"function B(){}"),s("函数声明），将他们的值设置为指向函数对象，如果VO中已存在改名称，则覆盖（函数是一等公民）")])])])]),n("li",null,[n("p",null,"函数执行过程中，遇到执行上下文中不存在的属性，则会从该函数之外的上下文中寻找（作用域链）")]),n("li",null,[n("p",null,"作用域scope")])],-1),v=a(`<p>预编译阶段，var声明的变量，会存在<strong>提升</strong>现象，将变量提升的函数执行上下文的顶部，并初始化未undefined</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
  <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//相当于</span>
<span class="token comment">//function A(){</span>
<span class="token comment">//	var b = undefined</span>
<span class="token comment">//  console.log(b)</span>
<span class="token comment">//	b = function(){}</span>
<span class="token comment">//}</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预编译阶段，形参a，b设置为undefined，遇到同名变量，忽略</p><p>函数执行阶段，形参a设置为1，b设置为2，第二行代码输出1，2；然后变量a设置为123，b设置为999；最后打印出123，999</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span>
  b <span class="token operator">=</span> <span class="token number">999</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">// 1,2</span>
<span class="token comment">//123,999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预编译阶段，函数声明，将他们的值设置为指向函数对象</p><p>执行阶段，函数b在预编译阶段已经被赋值了，可以正常执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//虽然函数b在console.log之后声明，但这已经将b只的指向了函数对象，所以这是b已经是有值的了</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//打印函数b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预编译阶段，参数a，b设置为undefined，同名变量忽略；函数声明b指向函数对象，b已经被赋值</p><p>执行阶段，第二行输出1，function；b被赋值为123，function b(){}忽略（预编译阶端已经处理了），a被赋值为一个函数；执行console.log，输出function，123</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
	<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">123</span>
	<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">var</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">//首先输出1，function</span>
<span class="token comment">//输出function，123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>foo<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//函数执行上下文中已经有变量foo</span>
<span class="token comment">//输出undefined</span>
<span class="token comment">//输出100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h2><ol><li><p>VO中包含一个额外的属性，该属性指向创建该VO的函数本身</p></li><li><p>每个函数在创建时，会有一个隐藏属性<code>[[scope]]</code>，<strong>它指向创建该函数时的AO，函数在哪里定义（全局、函数中）AO就在哪</strong>（如函数b是在函数a中创建的，那么函数b的[[scope]]指向函数a的执行上下文的VO）</p></li><li><p>当访问一个变量时，会先查找自身VO中是否存在，如果不存在，则一次查找<code>[[scope]]</code></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Special</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span>
  <span class="token keyword">var</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span>
  <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">Special</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 输出1</span>
<span class="token comment">// 解析：A是在全局执行上下文创建的，A的[[scope]]指向的是全局AO，无论在哪里执行，都不会变</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><p>箭头函数没有this，箭头函数中使用的this是<strong>定义</strong>该函数所在作用域指向的对象，无法被改变</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span>
  <span class="token function">objThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//箭头函数中的this就是定义函数时所在作用域指向的对象</span>
  <span class="token comment">//箭头函数没有被其他函数包裹，其作用域是最外层的js环境，即window</span>
  <span class="token function-variable function">arrowThisFromWindow</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">thisFoeverToWindow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//箭头函数中的this就是定义函数时所在作用域指向的对象</span>
  <span class="token comment">//thisFoeverToWindow函数在全局作用域定义的，箭头函数没有this，this指向定义该函数所在作用域对象window</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//函数被谁调用，this指向谁</span>
<span class="token keyword">let</span> <span class="token function-variable function">thisFromInvoke</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>fn3 <span class="token operator">=</span> thisFoeverToWindow
obj<span class="token punctuation">.</span>fn4 <span class="token operator">=</span> thisFromInvoke

<span class="token comment">//objThis函数中的this指向调用它的对象，即obj</span>
obj<span class="token punctuation">.</span><span class="token function">objThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj,11</span>

obj<span class="token punctuation">.</span><span class="token function">arrowThisFromWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//window</span>

<span class="token function">thisFromInvoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>

obj<span class="token punctuation">.</span><span class="token function">fn4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><p>函数A中创建的函数B使用了函数A中的变量</p><p>如果函数A返回了函数B，函数B又使用了函数A中的变量，虽然函数A执行完毕已经消失，执行上下文应该也消失，但由于返回的函数B使用了函数A中的变量，那么函数B就保留了对函数A执行上下文的AO引用，函数B仍然可以使用函数A执行上下文的AO中的属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    count<span class="token operator">++</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">B</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//执行函数A，返回函数B，函数B保留了函数A的执行上下文的引用，A执行完毕，但count不会被垃圾回收</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//相当于执行函数B，函数B的AO中没有定义任何变量和函数，于是就巡着作用域链找，函数B的[[scope]]指向函数A的AO，在函数A的AO中找到了count，执行count++，打印出1</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//同理，打印出2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>执行上下文是基于对象的</li><li>执行上下文是在<strong>调用函数执行时</strong>定义的，每次调用函数都会产生一个新的执行上下文环境</li><li>执行上下文中值得关注<strong>this值的指向</strong>，由调用函数时决定this的指向，谁调用此函数，this就指向谁</li><li>由上下文组成的内存空间称为上下文栈</li><li>上下文栈（执行栈call stack）<strong>先进后出，后进先出</strong>，上下文从栈顶推入，</li><li>作用域[[scope]]有全局作用域，函数作用域，块级作用域</li><li>作用域在<strong>函数定义时</strong>就已经确定了，无论在哪里调用，不会改变作用域</li><li>作用域只是一个地盘，其中没有变量，变量是通过作用域对应的执行上下文环境的变量对象（VO）实现的，但定义了变量如何访问的规则</li><li>作用域是静态观念，执行上下文环境是动态的</li><li>作用域只是用于划分在这个<strong>作用域对应的执行上下文环境</strong>里面定义的<strong>变量的有效范围</strong>，超出这个作用域则无效</li><li>作用域链式一个指向函数定义时的变量对象（VO）的指针</li><li>在一个作用域中查找一个变量，如果这个作用域中不存在，则会沿着作用域链向外面的作用域查找</li><li>箭头函数体内的<code>this</code>对象，就是定义<strong>该函数时所在的作用域指向的对象</strong>，而不是使用时所在的作用域指向的对象。</li></ol>`,24),m=[l,i,u,d,r,k,v];function b(g,h){return p(),o("div",null,m)}const w=t(c,[["render",b],["__file","executionContext.html.vue"]]);export{w as default};
