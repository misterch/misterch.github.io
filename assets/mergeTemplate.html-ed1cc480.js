import{_ as n,o as i,c as t,a as s,b as e,d as a}from"./app-d4c6289a.js";const l={},d=s(`<p>有这样的一个场景，一个项目使用了别人开发的一个模板来进行开发（如<code>unibest</code>），某天<code>unibest</code>有了更新，修复了bugs，修改或者新增了新的功能和配置，模板代码发生了变化。那么我如果想要升级到最新的模板代码，应该怎么做呢？</p><p>首先要做的就是备份好当前的项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;chore: 升级前备份&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-将模板仓库添加为远程仓库" tabindex="-1"><a class="header-anchor" href="#_1-将模板仓库添加为远程仓库" aria-hidden="true">#</a> 1.将模板仓库添加为远程仓库</h2><p>项目是在这个模板上进行开发，仓库地址是我们自己的远程仓库，那么首先就要<strong>添加该模板为远程仓库</strong>，为升级模板做好准备</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> upstream <span class="token operator">&lt;</span>模板仓库地址<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-从远程仓库拉取最新代码" tabindex="-1"><a class="header-anchor" href="#_2-从远程仓库拉取最新代码" aria-hidden="true">#</a> 2.从远程仓库拉取最新代码</h2><p>本地仓库已经添加了模板的远程仓库，即<code>upstream</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 获取最新模板代码</span>
<span class="token function">git</span> fetch upstream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-创建一个新的分支" tabindex="-1"><a class="header-anchor" href="#_3-创建一个新的分支" aria-hidden="true">#</a> 3.创建一个新的分支</h2><p>创建的这个分支，目的是合并模板的最新代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> upgrade-template
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建并切换到新建的分支后，合并<code>stream</code>仓库的<code>main</code>（或其他分支）到<code>upgrade-template</code>分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token parameter variable">--squash</span> upstream/main --allow-unrelated-histories
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14),c=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,[a("合并模板代码时，如果不想模板仓库的提交历史污染我们自己的仓库提交历史，使用"),e("code",null,"--squash")]),e("p",null,[e("code",null,"--squash"),a(": 模板的所有更新压缩为单次提交，模板的提交历史不会出现在我们的仓库中")]),e("p",null,[a("合并时，因为模板仓库和我们的仓库没有任何关联，这时合并的话会出现"),e("code",null,"fatal: refusing to merge unrelated histories"),a("错误，使用"),e("code",null,"--allow-unrelated-histories"),a("来解决")]),e("p",null,[e("code",null,"--allow-unrelated-histories"),a(": 允许不相关历史合并")])],-1),r=s(`<p>首次合并后，以后再次升级模板不需要<code>--allow-unrelated-histories</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取模板仓库的main分支</span>
<span class="token function">git</span> fetch upstream main
<span class="token comment"># 合并模板仓库的main分支</span>
<span class="token function">git</span> merge <span class="token parameter variable">--squash</span> upstream/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-解决合并冲突" tabindex="-1"><a class="header-anchor" href="#_4-解决合并冲突" aria-hidden="true">#</a> 4.解决合并冲突</h2><p>列出所有冲突文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;unmerged&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过VSCode手动解决冲突</p><p>解决冲突后完成合并提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;upgrade to latest version&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-合并到主分支" tabindex="-1"><a class="header-anchor" href="#_5-合并到主分支" aria-hidden="true">#</a> 5.合并到主分支</h2><p><code>upgrade-template</code>分支经过测试无问题后，合并到主分支中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main

<span class="token comment">#方法1：变基到主分支，可以精简历史</span>
<span class="token function">git</span> rebase upgrade-template

<span class="token comment">#方法2：保留分支结构</span>
<span class="token function">git</span> merge upgrade-template --no-ff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[d,c,r];function p(u,m){return i(),t("div",null,o)}const v=n(l,[["render",p],["__file","mergeTemplate.html.vue"]]);export{v as default};
