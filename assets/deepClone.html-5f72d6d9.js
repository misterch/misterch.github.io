import{_ as p,r as o,o as c,c as l,b as n,d as s,e,a}from"./app-d4c6289a.js";const i={},u={href:"https://chen-cong.blog.csdn.net/article/details/114918262?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="完美的深拷贝-实现了以下拷贝" tabindex="-1"><a class="header-anchor" href="#完美的深拷贝-实现了以下拷贝" aria-hidden="true">#</a> 完美的深拷贝，实现了以下拷贝</h2><ol><li>基本类型数据拷贝</li><li>键和值都是基本类型的普通对象拷贝</li><li>Symbol作为对象的key拷贝</li><li>Date和RegExp对象类型拷贝</li><li>Map和Set对象类型拷贝</li><li>Function对象类型拷贝（函数我们一般不用深拷贝）</li><li>对象的原型拷贝</li><li>不可枚举属性拷贝</li><li>循环引用拷贝</li></ol><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;">基础数据类型</td><td style="text-align:left;">String、Number、Boolean、Null、undefined、Symbol、BigInt</td><td style="text-align:left;">拷贝的是值，相互独立，互不影响</td></tr><tr><td style="text-align:left;">引用数据类型（对象类型）</td><td style="text-align:left;">Array、RegExp、Date、Math、Function</td><td style="text-align:left;">拷贝的是对象的引用，即对象所在的内存地址，指向对象的指针；多个变量指向同一个对象，只要其中一个变量对这个对象进行修改，其他变量所指向的对象也会跟着修改</td></tr></tbody></table><p>测试对象，含有所有数据类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 测试的obj对象</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// =========== 1.基础数据类型 ===========</span>
    <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// number</span>
    <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// string</span>
    <span class="token literal-property property">bool</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// boolean</span>
    <span class="token literal-property property">unf</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// undefined</span>
    <span class="token literal-property property">nul</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// null</span>
    <span class="token literal-property property">sym</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;sym&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// symbol</span>
    <span class="token literal-property property">bign</span><span class="token operator">:</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// bigint</span>

    <span class="token comment">// =========== 2.Object类型 ===========</span>
    <span class="token comment">// 普通对象</span>
    <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;我是一个对象&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 数组</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 函数</span>
    <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是一个函数&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 日期</span>
    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 正则</span>
    <span class="token literal-property property">reg</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;/我是一个正则/ig&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// Map</span>
    <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;mapKey&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// Set</span>
    <span class="token literal-property property">set</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// =========== 3.其他 ===========</span>
    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token comment">// Symbol作为key</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 4.添加不可枚举属性</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;innumerable&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;不可枚举属性&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5.设置原型对象</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proto</span><span class="token operator">:</span> <span class="token string">&#39;proto&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 6.设置loop成循环引用的属性</span>
obj<span class="token punctuation">.</span>loop <span class="token operator">=</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h2><p>创建一个新对象，来接收要重新复制或引用的对象值。对于对象属性是基本数据类型的，复制的就是基本数据类型的值给新对象；对于对象属性是引用数据类型的，复制的就是内存中的地址；如果一个对象改变了内存中的地址所指向的对象，也会影响另一个对象</p><h3 id="实现浅拷贝的方法" tabindex="-1"><a class="header-anchor" href="#实现浅拷贝的方法" aria-hidden="true">#</a> 实现浅拷贝的方法</h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">使用方式</th><th style="text-align:left;">注意事项</th></tr></thead><tbody><tr><td style="text-align:left;">Object.assign()</td><td style="text-align:left;">Object.assign(target,...source)将所有<strong>可枚举</strong>属性的值从一个或多个原对象分配到目标对象，返回目标对象</td><td style="text-align:left;">1、不拷贝对象的继承属性；2、不拷贝对象的不可枚举的属性；3、可拷贝Symbol类型的属性</td></tr><tr><td style="text-align:left;">展开语法{...obj}</td><td style="text-align:left;">let objClone = {...obj}</td><td style="text-align:left;">和Object.assign()差不多；如果属性都是基本数据类型的值，使用这个会方便很多</td></tr><tr><td style="text-align:left;">Array.prototype.concat()拷贝数组</td><td style="text-align:left;">const newArr = arr.concat(arr1[,arr2])</td><td style="text-align:left;">浅拷贝，基本数据类型值的数组</td></tr><tr><td style="text-align:left;">Array.prototype.slice()拷贝数组</td><td style="text-align:left;">arr.slice([begin[,end]])</td><td style="text-align:left;">浅拷贝，基本数据类型值的数组</td></tr></tbody></table><h3 id="浅拷贝的实现" tabindex="-1"><a class="header-anchor" href="#浅拷贝的实现" aria-hidden="true">#</a> 浅拷贝的实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cloneTarget<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 测试</span>
<span class="token keyword">const</span> shallowCloneObj <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

shallowCloneObj <span class="token operator">===</span> obj  <span class="token comment">// false，返回的是一个新对象</span>
shallowCloneObj<span class="token punctuation">.</span>arr <span class="token operator">===</span> obj<span class="token punctuation">.</span>arr  <span class="token comment">// true，对于对象类型只拷贝了引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<strong>for...in</strong>循环遍历对象属性赋值给目标对象的属性，<strong>除Symbol以外</strong>的可枚举属性，<strong>包含原型上的属性</strong></p><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h2><p>创建一个新对象，将一个对象从内存中完整拷贝出来一份给新对象，并从对内存中开辟一个全新的空间存放新对象，新对象的修改不会改变原对象</p><h3 id="json-stringify" tabindex="-1"><a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a> JSON.stringify()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 开头的测试obj存在BigInt类型、循环引用，JSON.stringfy()执行会报错，所以除去这两个条件进行测试</span>
<span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token comment">// 测试</span>
clonedObj <span class="token operator">===</span> obj  <span class="token comment">// false，返回的是一个新对象</span>
clonedObj<span class="token punctuation">.</span>arr <span class="token operator">===</span> obj<span class="token punctuation">.</span>arr  <span class="token comment">// false，说明拷贝的不是引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题" aria-hidden="true">#</a> 存在的问题</h4>`,18),d=a("<li>执行会报错：存在<code>BigInt</code>类型、循环引用。</li><li>拷贝<code>Date</code>引用类型会变成字符串。</li><li>键值会消失：对象的值中为<code>Function</code>、<code>Undefined</code>、<code>Symbol</code> 这几种类型，。</li><li>键值变成空对象：对象的值中为<code>Map</code>、<code>Set</code>、<code>RegExp</code>这几种类型。</li><li>无法拷贝：不可枚举属性、对象的原型链。</li>",5),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",target:"_blank",rel:"noopener noreferrer"},v=a(`<h4 id="适用范围" tabindex="-1"><a class="header-anchor" href="#适用范围" aria-hidden="true">#</a> 适用范围</h4><p>拷贝一些普通的对象</p><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h3><ol><li>对于基础类型，我们只需要简单地赋值即可（使用<code>=</code>）。</li><li>对于引用类型，我们需要创建新的对象，并通过遍历键来赋值对应的值，这个过程中如果遇到 Object 类型还需要再次进行遍历。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历</span>
            <span class="token keyword">const</span> val <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 是对象就再次调用该函数递归</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token comment">// 基本类型的话直接复制值</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cloneObj
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 开头的测试obj存在循环引用，除去这个条件进行测试</span>
<span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token comment">// 测试</span>
clonedObj <span class="token operator">===</span> obj  <span class="token comment">// false，返回的是一个新对象</span>
clonedObj<span class="token punctuation">.</span>arr <span class="token operator">===</span> obj<span class="token punctuation">.</span>arr  <span class="token comment">// false，说明拷贝的不是引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="存在的问题-1" tabindex="-1"><a class="header-anchor" href="#存在的问题-1" aria-hidden="true">#</a> 存在的问题</h4><ol><li>不能处理循环引用。</li><li>只考虑了<code>Object</code>对象，而<code>Array</code>对象、<code>Date</code>对象、<code>RegExp</code>对象、<code>Map</code>对象、<code>Set</code>对象都变成了<code>Object</code>对象，且值也不正确。</li><li>丢失了属性名为<code>Symbol</code>类型的属性。</li><li>丢失了不可枚举的属性。</li><li>原型上的属性也被添加到拷贝的对象中了。</li></ol><p><strong>如果存在循环引用的话，以下代码会导致无限递归，从而使得堆栈溢出</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
a<span class="token punctuation">.</span>b <span class="token operator">=</span> b
b<span class="token punctuation">.</span>a <span class="token operator">=</span> a
<span class="token function">deepClone</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>避免循环引用，使用WeakMap对象，键是弱引用，且必须是对象</p><h2 id="完美的深拷贝" tabindex="-1"><a class="header-anchor" href="#完美的深拷贝" aria-hidden="true">#</a> 完美的深拷贝</h2><p>改进以上深拷贝的问题</p><table><thead><tr><th style="text-align:left;">存在的问题</th><th style="text-align:left;">改进方案</th></tr></thead><tbody><tr><td style="text-align:left;">不能处理循环引用</td><td style="text-align:left;">使用WeakMap</td></tr><tr><td style="text-align:left;">只考虑了Object对象</td><td style="text-align:left;">当参数为Date、RegExp、Math、Function、Map、Set，直接生成新的实例返回</td></tr><tr><td style="text-align:left;">属性名为Symbol的属性，丢失不可枚举的属性</td><td style="text-align:left;">对于Symbol和不可枚举的属性，使用Reflect.ownKeys()，相当于[...Object.getPropertyNames(obj),...Object.getOwnPropertySymbols(obj)]</td></tr><tr><td style="text-align:left;">原型上的属性</td><td style="text-align:left;">Obejct.getOwnPropertyDescribtors()设置属性描述对象；Object.create()方式继承原型链</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// WeakMap作为记录对象Hash表（用于防止循环引用）</span>
    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 判断是否为object类型的辅助函数，减少重复代码</span>
    <span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> target <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 基础类型直接返回值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> data
        <span class="token punctuation">}</span>

        <span class="token comment">// 日期或者正则对象则直接构造一个新的对象返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>Date<span class="token punctuation">,</span> RegExp<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">data<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 处理函数对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;return &#39;</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 如果该对象已存在，则直接返回该对象</span>
        <span class="token keyword">const</span> exist <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> exist
        <span class="token punctuation">}</span>

        <span class="token comment">// 处理Map对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 注意：map中的值为object的话也得深拷贝</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">clone</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> result
        <span class="token punctuation">}</span>

        <span class="token comment">// 处理Set对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
            data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 注意：set中的值为object的话也得深拷贝</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">clone</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> result
        <span class="token punctuation">}</span>

        <span class="token comment">// 收集键名（考虑了以Symbol作为key以及不可枚举的属性）</span>
        <span class="token keyword">const</span> keys <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token comment">// 利用 Object 的 getOwnPropertyDescriptors 方法可以获得对象的所有属性以及对应的属性描述</span>
        <span class="token keyword">const</span> allDesc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token comment">// 结合 Object 的 create 方法创建一个新对象，并继承传入原对象的原型链， 这里得到的result是对data的浅拷贝</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> allDesc<span class="token punctuation">)</span>

        <span class="token comment">// 新对象加入到map中，进行记录</span>
        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> result<span class="token punctuation">)</span>

        <span class="token comment">// Object.create()是浅拷贝，所以要判断并递归执行深拷贝</span>
        keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> val <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 属性值为 对象类型 或 函数对象 的话也需要进行深拷贝</span>
                result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token punctuation">}</span>



<span class="token comment">// 测试</span>
<span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
clonedObj <span class="token operator">===</span> obj  <span class="token comment">// false，返回的是一个新对象</span>
clonedObj<span class="token punctuation">.</span>arr <span class="token operator">===</span> obj<span class="token punctuation">.</span>arr  <span class="token comment">// false，说明拷贝的不是引用</span>
clonedObj<span class="token punctuation">.</span>func <span class="token operator">===</span> obj<span class="token punctuation">.</span>func  <span class="token comment">// false，说明function也复制了一份</span>
clonedObj<span class="token punctuation">.</span>proto  <span class="token comment">// proto，可以取到原型的属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h3><p>在遍历 <code>Object</code> 类型数据时，我们需要把 <code>Symbol</code> 类型的键名也考虑进来，所以不能通过 <code>Object.keys</code> 获取键名或 <code>for...in</code> 方式遍历，而是通过<code>Reflect.ownKeys()</code>获取所有自身的键名（<code>getOwnPropertyNames</code> 和 <code>getOwnPropertySymbols</code> 函数将键名组合成数组也行：<code>[...Object.getOwnPropertyNames(obj), ...Object.getOwnPropertySymbols(obj)]</code>），然后再遍历递归，最终实现拷贝。</p>`,16);function m(b,y){const t=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[n("a",u,[s("参考链接"),e(t)])]),r,n("ol",null,[d,n("li",null,[s("补充：其他更详细的内容请查看官方文档："),n("a",k,[s("JSON.stringify()"),e(t)])])]),v])}const g=p(i,[["render",m],["__file","deepClone.html.vue"]]);export{g as default};
