import{_ as e,o as m,c as p,a as s}from"./app-d4c6289a.js";const a="/assets/2022-02-23-055339-4e3ad5fd.png",t="/assets/2022-02-23-055411-85d63ef4.png",i="/assets/2022-02-23-055456-6f4ae24c.png",r="/assets/2022-02-23-055513-2bc92818.png",c="/assets/2022-02-23-055531-5d0d1e95.png",n="/assets/2022-02-23-055621-446b3f3f.png",o={},d=s('<h2 id="设备像素-物理像素" tabindex="-1"><a class="header-anchor" href="#设备像素-物理像素" aria-hidden="true">#</a> 设备像素（物理像素）</h2><p>首先要介绍的是“设备像素”，也被称之为“物理像素”。这是最好理解的一个名词，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，这个点能够发出红、绿、蓝三种颜色的光，通过混合不同的 RGB 值，为我们创造了一个像素的颜色。</p><p>因此设备像素就是指实际存在的像素。</p><h2 id="屏幕尺寸和像素密度-ppi" tabindex="-1"><a class="header-anchor" href="#屏幕尺寸和像素密度-ppi" aria-hidden="true">#</a> 屏幕尺寸和像素密度（<em>PPI</em>）</h2><p>明白了设备像素后，接下来我们再来普及 <em>2</em> 个概念，屏幕尺寸和像素密度（<em>PPI</em>）。</p><p>大家在买手机的时候，一般在手机配置信息里面还会有屏幕尺寸这个信息，一般以英寸为单位。</p><p>那么这个屏幕尺寸 <em>6.67</em> 英寸是指什么呢？难道是屏幕的面积么？</p><p>实际上并不是，首先英寸是一个长度单位，<em>1</em> 英寸（<em>inch</em>）等于 <em>2.54</em> 厘米（<em>cm</em>）。其次这里的 <em>6.67</em> 英寸指的是屏幕对角线的长度。</p><img src="'+a+'" style="zoom:33%;"><p>有了屏幕分辨率和屏幕尺寸的信息，我们就可以计算像素密度（<em>PPI</em>）。所谓像素密度，就是指 <em>1</em> 英寸下的设备像素数量，计算公式如下：</p><p>这里我们可以简单的计算一下 <em>iPhone6 Plus</em> 的 <em>ppi</em>：</p><img src="'+t+'" style="zoom:50%;"><h2 id="css-像素-设备独立像素、逻辑像素" tabindex="-1"><a class="header-anchor" href="#css-像素-设备独立像素、逻辑像素" aria-hidden="true">#</a> <em>CSS</em> 像素（设备独立像素、逻辑像素）</h2><p>上面我们已经介绍了 <em>ppi</em> 的概念，那么 <em>ppi</em> 越高，所包含的设备像素也就越多。</p><p><img src="'+i+'" alt=""></p><p>但是这就会滋生出另外一个问题，如果我的 <em>CSS</em> 像素和设备像素是 <em>1:1</em> 的关系的话，随着设备像素的提升，图像就会越来越小。</p><p><img src="'+r+'" alt=""></p><p>那么怎么解决这个问题呢？</p><p>其实也非常好办，之前我们 <em>CSS</em> 像素和设备像素是 <em>1:1</em> 的关系，现在只需要将这个比例稍作修改即可。</p><p><img src="'+c+'" alt=""></p><p>正如上面的图片所示，以前 <em>CSS</em> 像素和设备像素 <em>1:1</em> 关系，<em>1</em> 个 <em>CSS</em> 像素对应 <em>1</em> 个设备像素，那么现在我修改这个比例，<em>1</em> 个 <em>CSS</em> 像素对应 <em>2</em> 个设备像素即可。</p><p>以前在做 <em>PC</em> 端网页开发的时候，由于 <em>CSS</em> 像素始终和设备像素是 <em>1:1</em> 的关系（不考虑缩放），所以给大家了一种错觉，以为 <em>CSS</em> 像素和设备像素就是 <em>1:1</em> 的对应关系，但是实际上 <em>CSS</em> 像素确是一个抽象的单位，具体含有多少个设备像素不是一定的。</p><h2 id="像素比-dpr" tabindex="-1"><a class="header-anchor" href="#像素比-dpr" aria-hidden="true">#</a> 像素比（<em>DPR</em>）</h2><p>最后要介绍的概念就是像素比（<em>DPR</em>），英文全称为 <em>device pixel ratio</em>（设备像素比），计算公式为：<em>DPR</em> = 设备像素 / <em>CSS</em> 像素。</p><p>举个例子，如果 <em>CSS</em> 像素和设备像素 <em>1:1</em> 关系，那么 <em>DPR</em> 值就为 <em>1</em>。如果 <em>1</em> 个 <em>CSS</em> 像素对应 <em>2</em> 个设备像素，那么 <em>DPR</em> 值就为 <em>2</em>。</p><p>说简单点，就是一个 <em>CSS</em> 像素要用多少个设备像素来显示。如果 <em>DPR</em> 值为 <em>1</em>，表示用一个设备像素就够了，如果 <em>DPR</em> 值为 <em>2</em>，则表示一个 <em>CSS</em> 像素要用 <em>2</em> 个设备像素来表示。</p><p>可以通过 <em>window.devicePixelRatio</em> 获取一个设备的 <em>DPR</em>。</p><p>这里我们以 <em>iPhone6</em> 为例。</p><p><em>iPhone6</em> 官方给出的分辨率为 <em>1334</em> x <em>750</em>，但是我们设置一个 <em>div</em>，宽度为 <em>375</em> 却能撑满整个手机。</p><p><img src="'+n+'" alt=""></p>',30),h=[d];function S(_,l){return m(),p("div",null,h)}const f=e(o,[["render",S],["__file","responseAdaptive.html.vue"]]);export{f as default};
