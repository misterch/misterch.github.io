import{_ as o,r as p,o as c,c as l,b as n,d as s,e as t,a}from"./app-d4c6289a.js";const i={},r=a('<h2 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件" aria-hidden="true">#</a> 声明文件</h2><p>以<code>.d.ts</code>为后缀的文件是声明文件，为<strong>js代码</strong>提供类型声明，使用时得到类型提示</p><h2 id="声明文件的位置" tabindex="-1"><a class="header-anchor" href="#声明文件的位置" aria-hidden="true">#</a> 声明文件的位置</h2><h3 id="include包含的目录" tabindex="-1"><a class="header-anchor" href="#include包含的目录" aria-hidden="true">#</a> include包含的目录</h3><p><code>tsconfig.json</code>中只要<code>include</code>配置了目录，那么该目录下的声明文件就会生效</p><h3 id="手动配置" tabindex="-1"><a class="header-anchor" href="#手动配置" aria-hidden="true">#</a> 手动配置</h3><p>配置<code>tsconfig.json</code>中的<code>typeRoots</code>，告诉它声明文件的目录在哪里</p>',7),d=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("如果配置了"),n("code",null,"typeRoots"),s("，那么"),n("code",null,"include"),s("和"),n("code",null,"node_modules/@types"),s("就会失效")]),n("p",null,[s("解决："),n("code",null,"typeRoots:['node_modules/@types','./types','./src']")])],-1),u=a(`<h3 id="node-modules-types" tabindex="-1"><a class="header-anchor" href="#node-modules-types" aria-hidden="true">#</a> node_modules/@types</h3><h3 id="与js代码所在目录相同-文件名也相同的文件" tabindex="-1"><a class="header-anchor" href="#与js代码所在目录相同-文件名也相同的文件" aria-hidden="true">#</a> 与JS代码所在目录相同，文件名也相同的文件</h3><p>这是使用typescript书写的工程发布后的格式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-|src
		index.js
		index.d.ts
		header.js
		header.d.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写声明文件" tabindex="-1"><a class="header-anchor" href="#编写声明文件" aria-hidden="true">#</a> 编写声明文件</h2><h3 id="自动生成" tabindex="-1"><a class="header-anchor" href="#自动生成" aria-hidden="true">#</a> 自动生成</h3><p>工程使用typescript开发的，编译后的是javascript文件，如果可以让别人使用，同时可以<strong>获得类型检查</strong>，还需要配置<code>tsconfig.json</code>的<code>compilerOptions.declaration:true</code>编译生成声明文件</p><h3 id="手动编写" tabindex="-1"><a class="header-anchor" href="#手动编写" aria-hidden="true">#</a> 手动编写</h3><ol><li>对已有的库，库是使用javascript编写的，可以手动为该库编写声明文件</li><li>对第三方库，使用javascript编写，并且第三方库没有提供声明文件，可以手动为该库编写声明文件</li></ol><h2 id="手动编写-1" tabindex="-1"><a class="header-anchor" href="#手动编写-1" aria-hidden="true">#</a> 手动编写</h2><h3 id="全局声明" tabindex="-1"><a class="header-anchor" href="#全局声明" aria-hidden="true">#</a> 全局声明</h3><p><strong>没有顶层import、export</strong>的文件认为是一般脚本，运行在<strong>global</strong> scope上，顶层定义的变量、函数、类都存在于<strong>全局作用域上，外部模块和脚本都可访问</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Console</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
  <span class="token function">error</span><span class="token punctuation">(</span>errMsg<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token builtin">console</span><span class="token operator">:</span>Console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块声明" tabindex="-1"><a class="header-anchor" href="#模块声明" aria-hidden="true">#</a> 模块声明</h3><p>例如使用lodash这个第三方库，这是一个适用js编写的库，没有类型提示，我们可以手动为这个模块编写声明文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//lodash.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;lodash&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">chunk</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>array<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">camelCase</span><span class="token operator">:</span><span class="token punctuation">(</span>val<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写后，在使用lodash这个库时，只要该声明文件包含在tsconfig.json配置的声明文件所在目录，系统就会查找到lodash的声明文件，声明文件无需导入</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>chunk<span class="token punctuation">,</span>camelCase<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要导出lodash对象，那么声明文件需要这么写</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//lodash.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;lodash&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Lodash</span> <span class="token punctuation">{</span>
     chunk<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>array<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  	 <span class="token function-variable function">camelCase</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">string</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> lodash<span class="token operator">:</span>Lodash
  <span class="token keyword">export</span> <span class="token keyword">default</span> Lodash
<span class="token punctuation">}</span>

<span class="token comment">//或者</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;lodash&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">chunk</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>array<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>size<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">camelCase</span><span class="token operator">:</span><span class="token punctuation">(</span>val<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    chunk，
    camelCase
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),k=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("手动为第三方库编写的声明文件，如果在开发时使用了"),n("code",null,"ts-node"),s("来执行ts文件会出现找不到声明文件的错误，因为"),n("code",null,"ts-node"),s("会忽略"),n("code",null,"tsconfig.json"),s("的"),n("code",null,"files"),s("、"),n("code",null,"include"),s("、"),n("code",null,"exclude")]),n("p",null,"解决："),n("div",{class:"language-json line-numbers-mode","data-ext":"json"},[n("pre",{class:"language-json"},[n("code",null,[n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"compilerOptions"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"typeRoot"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"./node_modules/@types"'),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"./types"'),n("span",{class:"token punctuation"},"]"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),v=a(`<h4 id="为文件类型定义声明文件" tabindex="-1"><a class="header-anchor" href="#为文件类型定义声明文件" aria-hidden="true">#</a> 为文件类型定义声明文件</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//声明png文件类型</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.png&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> url
<span class="token punctuation">}</span>

<span class="token comment">//声明Vue文件类型</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.vue&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> DefineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types</span>
  <span class="token keyword">const</span> component<span class="token operator">:</span> DefineComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> component
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块文件" tabindex="-1"><a class="header-anchor" href="#模块文件" aria-hidden="true">#</a> 模块文件</h3><p>以<code>.ts</code>为后缀的文件</p><p>typescript中规定<strong><em>顶层</em>存在import、export关键字</strong>的代码文件被认为是一个模块</p><p>如果想要达到类型提示，则需要导入声明文件模块</p><p>以下属于模块，需要引入才能使用，顶层存在<strong>export</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//test.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Friend</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  male<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;female&#39;</span>
  job<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  arr<span class="token operator">:</span> Friend<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="声明文件的来源" tabindex="-1"><a class="header-anchor" href="#声明文件的来源" aria-hidden="true">#</a> 声明文件的来源</h2><h3 id="自动生成-1" tabindex="-1"><a class="header-anchor" href="#自动生成-1" aria-hidden="true">#</a> 自动生成</h3><h3 id="内置声明文件" tabindex="-1"><a class="header-anchor" href="#内置声明文件" aria-hidden="true">#</a> 内置声明文件</h3><p>内置声明文件卫浴Typescript按抓个目录的<code>lib</code>文件中，文件名统一以<code>lib.[description].d.ts</code>形式，可以通过编译选项lib来指定加载哪些内置声明文件；noLib选项会禁止加载任何内置声明文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;complilerOptions&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span><span class="token string">&quot;ES2020&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外部模块的类型声明文件" tabindex="-1"><a class="header-anchor" href="#外部模块的类型声明文件" aria-hidden="true">#</a> 外部模块的类型声明文件</h3><ul><li><p>库自带类型声明文件</p><p>一般库源码中就包含了，声明文件和库文件名一般相同，形如<code>moment</code>这个库的类型声明文件为<code>moment.d.ts</code>，<code>package.json</code>一般会通过types选项来指定类型声明文件</p></li><li><p>库没有自带，通过社区找到类型声明文件</p><p>社区提供的库类型声明文件，会发布到<code>npm</code>的<code>@types</code>名称空间下</p><p>typescript会自动加载<code>node_modules/@types</code>目录下的类型声明模块，也可以使用编译选项<code>typeRoots</code>修改声明文件所在目录</p><p><code>types</code>设置<code>typeRoots</code>目录下需要包括在编译之中的类型模块。默认情况下，该目录下的所有类型模块，都会自动包括在编译之中。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;./typings&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;./vendor/types&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自己写</p><p>可以自己为没有类型声明模块的库编写类型声明模块，是模块，即有export，import</p></li></ul><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h2><h3 id="拓展全局变量" tabindex="-1"><a class="header-anchor" href="#拓展全局变量" aria-hidden="true">#</a> 拓展全局变量</h3><p>通过声明合并，就可以扩展全局变量类型</p><p>也可以使用<code>declare namespace</code>给已有的命名空间添加类型声明</p><h3 id="npm包或umd库中扩展全局变量类型" tabindex="-1"><a class="header-anchor" href="#npm包或umd库中扩展全局变量类型" aria-hidden="true">#</a> npm包或UMD库中扩展全局变量类型</h3><p>对于npm包或UMD库，如果<strong>导入此库后会拓展全局变量</strong>，需要使用<code>declare global</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token function">prependHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>‼️注意：虽然声明文件没有导出任何东西，但仍需要导出一个空对象，告诉编译器这是一个模块，而不是一个全局变量的声明文件</p><h3 id="扩展模块插件" tabindex="-1"><a class="header-anchor" href="#扩展模块插件" aria-hidden="true">#</a> 扩展模块插件</h3><p><code>declare module</code>可以用来<strong>扩展原有模块</strong>的类型</p>`,25),m=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("如果是需要扩展原有模块的话，需要在类型声明文件中"),n("strong",null,[s("先引用原有模块，再使用 "),n("code",null,"declare module")]),s(" 扩展原有模块")]),n("p",null,[n("code",null,"declare module"),s(" 也可用于在"),n("strong",null,"一个文件"),s("中一次性声明"),n("strong",null,"多个模块"),s("的类型")])],-1),h=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// types/moment-plugin/index.d.ts</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;moment&#39;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> moment<span class="token punctuation">.</span>CalendarKey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三斜杠命令" tabindex="-1"><a class="header-anchor" href="#三斜杠命令" aria-hidden="true">#</a> ///三斜杠命令</h2><p>只能用在文件的头部，用作其他地方会被当做普通的注释</p><p>声明文件的内容非常多，可以拆分多个文件，然后在入口文件中使用三斜杠加载其他拆分后的文件</p><p>三斜杠命令也可用于普通脚本加载类型声明文件</p><p>只有以下几个场景才需要使用三斜杠命令<strong>代替import</strong></p><ol><li>书写一个全局变量的声明文件</li><li>需要依赖一个全局变量的声明文件</li></ol><h3 id="书写一个全局变量的声明文件" tabindex="-1"><a class="header-anchor" href="#书写一个全局变量的声明文件" aria-hidden="true">#</a> 书写一个全局变量的声明文件</h3><p>我们知道全局变量声明文件时不允许有import或者export关键字出现的，否则就被视为一个模块，不再是全局的。当我们书写一个全局变量声明文件时<strong>需要引入另一个库的类型</strong>，就需要用到三斜杠命令</p><h3 id="依赖一个全局变量的声明文件" tabindex="-1"><a class="header-anchor" href="#依赖一个全局变量的声明文件" aria-hidden="true">#</a> <strong>依赖</strong>一个全局变量的声明文件</h3><p>当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 <code>import</code> 导入，当然也就必须使用三斜线指令来引入了</p><h3 id="声明文件不在ts编译的目录" tabindex="-1"><a class="header-anchor" href="#声明文件不在ts编译的目录" aria-hidden="true">#</a> 声明文件不在TS编译的目录</h3><p>无论这个声明文件是全局声明文件还是模块声明文件，因为不在<code>tsconfig.json</code>所配置的编译目录下，所以不会找到这个声明文件。</p><p>如果要使用这个声明文件，可以在TS能够编译的目录中的声明文件中使用///三斜杠命令将其加载进来</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./src/index.d.ts</span>
<span class="token comment">/// &lt;reference path=&quot;../lodash.d.ts&quot;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reference-path" tabindex="-1"><a class="header-anchor" href="#reference-path" aria-hidden="true">#</a> <code>/// &lt;reference path=&quot;&quot; /&gt;</code></h3><p>常用来声明当前脚本依赖的类型文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;./lib.ts&quot; /&gt;</span>

<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例表示，当前脚本依赖于<code>./lib.ts</code>，里面是<code>add()</code>的定义。编译当前脚本时，还会同时编译<code>./lib.ts</code>。编译产物会有两个 JS 文件，一个当前脚本，另一个就是<code>./lib.js</code>。</p><p>下面的例子是当前脚本依赖于 Node.js 类型声明文件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;node.d.ts&quot;/&gt;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">URL</span> <span class="token keyword">from</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.typescriptlang.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会在预处理阶段，找出所有三斜杠引用的文件，将其添加到编译列表中，然后一起编译。</p><p><code>noResolve</code>编译选项打开了，则忽略三斜杠指令</p><h3 id="reference-types" tabindex="-1"><a class="header-anchor" href="#reference-types" aria-hidden="true">#</a> <code>/// &lt;reference types=&quot;&quot; /&gt;</code></h3><p>types 参数用来告诉编译器当前脚本依赖某个 DefinitelyTyped 类型库，通常安装在<code>node_modules/@types</code>目录。</p><p>types 参数的值是类型库的名称，也就是安装到<code>node_modules/@types</code>目录中的子目录的名字。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/// &lt;reference types=&quot;node&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，这个三斜杠命令表示编译时添加 Node.js 的类型库，实际添加的脚本是<code>node_modules</code>目录里面的<code>@types/node/index.d.ts</code>。</p><p>可以看到，这个命令的作用类似于<code>import</code>命令。</p><p>注意，这个命令只在你自己手写类型声明文件（<code>.d.ts</code>文件）时，才有必要用到，也就是说，只应该用在<code>.d.ts</code>文件中，普通的<code>.ts</code>脚本文件不需要写这个命令。如果是普通的<code>.ts</code>脚本，可以使用<code>tsconfig.json</code>文件的<code>types</code>属性指定依赖的类型库。</p><h3 id="reference-lib" tabindex="-1"><a class="header-anchor" href="#reference-lib" aria-hidden="true">#</a> <code>/// &lt;reference lib=&quot;&quot; /&gt;</code></h3><p><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code>命令允许脚本文件显式包含内置 lib 库，等同于在<code>tsconfig.json</code>文件里面使用<code>lib</code>属性指定 lib 库。</p><p>前文说过，安装 TypeScript 软件包时，会同时安装一些内置的类型声明文件，即内置的 lib 库。这些库文件位于 TypeScript 安装目录的<code>lib</code>文件夹中，它们描述了 JavaScript 语言和引擎的标准 API。</p><p>库文件并不是固定的，会随着 TypeScript 版本的升级而更新。库文件统一使用“lib.[description].d.ts”的命名方式，而<code>/// &lt;reference lib=&quot;&quot; /&gt;</code>里面的<code>lib</code>属性的值就是库文件名的<code>description</code>部分，比如<code>lib=&quot;es2015&quot;</code>就表示加载库文件<code>lib.es2015.d.ts</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/// &lt;reference lib=&quot;es2017.string&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，<code>es2017.string</code>对应的库文件就是<code>lib.es2017.string.d.ts</code></p><h2 id="declare" tabindex="-1"><a class="header-anchor" href="#declare" aria-hidden="true">#</a> declare</h2><h3 id="declare-module和decalre-namespace" tabindex="-1"><a class="header-anchor" href="#declare-module和decalre-namespace" aria-hidden="true">#</a> declare module和decalre namespace</h3><p>在这里面，加不加export关键字都可以</p>`,39),b=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"declare 关键字的另一个用途，是为外部模块添加属性和方法时，给出新增部分的类型描述，对模块进行类型扩展")],-1),g=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Foo <span class="token keyword">as</span> Bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;moduleA&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    custom<span class="token operator">:</span> <span class="token punctuation">{</span>
      prop1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// a.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// b.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">A</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;./a&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a<span class="token operator">:</span><span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>‼️对模块进行类型扩展时，有两点需要注意</p><ol><li><code>declare module NAME</code>语法里面的模块名<code>NAME</code>，跟 import 和 export 的模块名规则是一样的，且必须跟当前文件加载该模块的语句写法（上例<code>import { A } from &#39;./a&#39;</code>）保持一致。</li><li><strong>不能创建新的顶层类型</strong>。也就是说，只能对<code>a.ts</code>模块中已经存在的类型进行扩展，不允许增加新的顶层类型，比如新定义一个接口<code>B</code>。</li><li>不能对默认的<code>default</code>接口进行扩展，只能对 export 命令输出的命名接口进行扩充。这是因为在进行类型扩展时，需要依赖输出的接口名。</li></ol><h3 id="declare-global" tabindex="-1"><a class="header-anchor" href="#declare-global" aria-hidden="true">#</a> declare global</h3>`,5),y=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("必须在顶层有导出语句，因为"),n("code",null,"declare global"),s("必须用在模块里面")]),n("p",null,[n("code",null,"declare global"),s(" 只能扩充现有对象的类型描述，不能增加新的顶层类型。")])],-1),x=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//必须作为模块，所以有export关键字</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//这样在global中定义的类型就可以全局使用</span>
<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Friend</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span>
    male<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;female&#39;</span>
    job<span class="token operator">:</span> <span class="token builtin">string</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span>
    arr<span class="token operator">:</span> Friend<span class="token punctuation">[</span><span class="token punctuation">]</span>
    attr<span class="token operator">:</span> AttrValue
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>声明文件中<strong>顶层</strong>有<code>export</code>或者<code>import</code>关键字，称为模块，需要导入使用；否则是全局的脚本声明文件，无需导入使用</li><li>npm或UMD扩展全局变量使用<code>declare global</code>；扩展插件的类型使用<code>declare module &#39;插件名称&#39;</code></li><li>书写全局的声明文件引用其他库，使用三斜杠代替import；全局声明文件需要引入其他库同理；拆分同理</li><li>三斜杠的types用于声明对另一个库的依赖；path用于声明对另一个文件的依赖</li></ol><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,4),w={href:"https://wangdoc.com/typescript/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://ts.xcatliu.com/basics/declaration-files.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/640255494",target:"_blank",rel:"noopener noreferrer"};function q(j,T){const e=p("ExternalLinkIcon");return c(),l("div",null,[r,d,u,k,v,m,h,b,g,y,x,n("p",null,[n("a",w,[s("TypeScript 教程 - 网道 (wangdoc.com)"),t(e)])]),n("p",null,[n("a",f,[s("声明文件 · TypeScript 入门教程 (xcatliu.com)"),t(e)])]),n("p",null,[n("a",_,[s("TypeScript 中的 Module知识点 - 知乎 (zhihu.com)"),t(e)])])])}const C=o(i,[["render",q],["__file","declaration.html.vue"]]);export{C as default};
