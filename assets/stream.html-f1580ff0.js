import{_ as t,o as p,c as e,a,b as n,d as s}from"./app-d4c6289a.js";const o={},c=a(`<p>Nodejs诞生之初就是为了解决I/O密集型性能问题，<strong>提高I/O性能</strong></p><p>其中最常用的两个模块，<strong>文件操作系统</strong>和<strong>网络模块</strong>正是<strong>流操作</strong>的深度应用者</p><p>Nodejs中的流就是处理流式数据的抽象接口，Stream模块则提供了用于实现流接口的对象</p><h2 id="为什么使用流" tabindex="-1"><a class="header-anchor" href="#为什么使用流" aria-hidden="true">#</a> 为什么使用流</h2><p>应用程序中为什么使用流来处理数据？</p><p>例如，用户要下载一部1G的电影，客户端通过网络请求服务端，如果服务端通过<code>readFile</code>的方式来读取文件，存在以下问题</p><ol><li>同步读取资源文件，用户需要等待数据读取完成再通过网络传输才能看到内容</li><li>资源文件最终<strong>一次性加载至内存</strong>，开销很大</li></ol><p>解决以上问题，可以使用<strong>流</strong></p><p>每次读取一个固定大小片段的数据到缓存区中，通过一些方式来取出缓存区中的数据并经过一些加工处理，完成这部分大小的数据后输出，如此反复直到数据读取处理完成，可以大大减轻内存的负担，对内存更加友好，而且用户也不需要等待太久时间，可以边传输边看已传输的内容</p><h2 id="流处理数据的优势" tabindex="-1"><a class="header-anchor" href="#流处理数据的优势" aria-hidden="true">#</a> 流处理数据的优势</h2><ul><li>时间效率：流的分段处理可以同时操作多个数据chunk</li><li>空间效率：同一时间流无需占据大内存空间，每次只往内存缓存指定大小的数据</li><li>使用方便：流配合管道，扩展程序变得简单</li></ul><h2 id="流的分类" tabindex="-1"><a class="header-anchor" href="#流的分类" aria-hidden="true">#</a> 流的分类</h2><ul><li><code>Readable</code>：可读流，能够实现数据的读取</li><li><code>Writeable</code>：可写流，能够实现数据的写操作</li><li><code>Duplex</code>：双工流，既可写又可读</li><li><code>Transform</code>：转换流，可读可写，还能实现数据转换</li></ul><h2 id="流的特点" tabindex="-1"><a class="header-anchor" href="#流的特点" aria-hidden="true">#</a> 流的特点</h2><ul><li><code>Stream</code>模块实现了四个具体的抽象 <ul><li><code>fs</code>、<code>net</code>、<code>http</code>模块已经实现了<code>Stream</code>模块的具体实现，可以调用具体模块的API来生产或消费数据操作</li></ul></li><li>所有流都继承了<code>EventEmitter</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./copy.txt&#39;</span><span class="token punctuation">)</span>
rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可读流createreadstream" tabindex="-1"><a class="header-anchor" href="#可读流createreadstream" aria-hidden="true">#</a> 可读流createReadStream()</h2><p>继承了<code>Readable</code>类和<code>EventEmitter</code>类的内置API</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>0123456789
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建可读流" tabindex="-1"><a class="header-anchor" href="#创建可读流" aria-hidden="true">#</a> 创建可读流</h3><p>创建一个可读流读取txt文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  flags； <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token comment">//可读</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">//字符编码设置，不设置则为buffer</span>
  <span class="token literal-property property">fd</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token comment">//文件标识符，0：输入，1：输出，2：错误</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token number">438</span><span class="token punctuation">,</span><span class="token comment">//0o666</span>
  <span class="token literal-property property">aotuClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//从哪个位置开始读取</span>
  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//从哪个位置读取结束</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">//每次读多少个字节数据，在readable接口默认时16kb，createReadStream是64kb</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费可读流" tabindex="-1"><a class="header-anchor" href="#消费可读流" aria-hidden="true">#</a> 消费可读流</h3><ul><li>使用<code>data</code>事件消费数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//可通过data事件来读取数据</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  rs<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//每读2字节暂停</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    rs<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//隔1秒继续读</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token comment">//输出</span>
  <span class="token comment">// 01</span>
  <span class="token comment">// 23</span>
  <span class="token comment">//从0位置开始读取数据，每次读取2字节，读到结束位置为3为止</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>readable</code>事件消费数据</li></ul><p><code>rs.read(highWaterMark)</code>，<code>highWaterMark</code>：每次读多少字节数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;readable&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//let data = rs.read() //buffer数据</span>
  <span class="token keyword">let</span> data
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------&#39;</span><span class="token punctuation">,</span>rs<span class="token punctuation">.</span>_readableState<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 这里设highWaterMark=4，缓存4个字节
0
-------3
1
-------2
2
-------1
3
-------0
4
-------3
5
-------2
6
-------1
7
-------0
8
-------1
9
-------0

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件与应用" tabindex="-1"><a class="header-anchor" href="#事件与应用" aria-hidden="true">#</a> 事件与应用</h3><h4 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> open</h4><p>创建了可读流对象后就会触发<code>open</code>事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">fd</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token string">&#39;文件打开了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="close" tabindex="-1"><a class="header-anchor" href="#close" aria-hidden="true">#</a> close</h4><p>默认情况下，并<strong>不会主动触发</strong>，要等待数据被消费之后才会触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件关闭了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//数据被消费后，才会触发close事件</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h4><p><code>end</code>事件在<code>close</code>事件<strong>之前</strong>执行，数据被清空后才关闭文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据被清空&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> error</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span><span class="token parameter">e</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;出错了&#39;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  flags； <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">encoding</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fd</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token number">438</span><span class="token punctuation">,</span>
  <span class="token literal-property property">aotuClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">4</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">fd</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token string">&#39;文件打开了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件关闭了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>bufferArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据被清空&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> bufferArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  bufferArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//3,文件打开了</span>
<span class="token comment">//0123456789</span>
<span class="token comment">//数据被清空</span>
<span class="token comment">//文件关闭了</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可写流createwritestream" tabindex="-1"><a class="header-anchor" href="#可写流createwritestream" aria-hidden="true">#</a> 可写流createWriteStream()</h2><h3 id="创建可写流" tabindex="-1"><a class="header-anchor" href="#创建可写流" aria-hidden="true">#</a> 创建可写流</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">flags</span><span class="token operator">:</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token comment">//默认以写（w）方式</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token number">438</span><span class="token punctuation">,</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fd</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//默认16kb</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费可写流" tabindex="-1"><a class="header-anchor" href="#消费可写流" aria-hidden="true">#</a> 消费可写流</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据写已写完---1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据写已写完---2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//test.txt文件内容：hello world123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>write</code>虽然是异步操作，但执行有先后</p>`,48),l=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("对于"),n("strong",null,"文件可写流"),s("，要求传入的数据是"),n("code",null,"string"),s("、"),n("code",null,"Buffer"),s("或者"),n("code",null,"Uint8Array"),s("类型")])],-1),i=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 报错，数据并非是要求的类型</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入完成&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h3><h4 id="close-1" tabindex="-1"><a class="header-anchor" href="#close-1" aria-hidden="true">#</a> close</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">fd</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件打开了&#39;</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件关闭了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//文件打开了 3</span>
<span class="token comment">//文件关闭了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>close</code>事件需要等待<code>end</code>方法执行之后才会触发，<code>end</code>执行之后就意味着数据写入操作完成</p><h3 id="end方法" tabindex="-1"><a class="header-anchor" href="#end方法" aria-hidden="true">#</a> end方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//end方法后不能再执行写入操作</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;write again&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),u=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"end"),s("方法之后不能再执行"),n("code",null,"write"),s("写入，触发"),n("code",null,"error"),s("错误")])],-1),r=a(`<p><code>end</code>方法可以传参，会写入到文件中</p><p>参数跟<code>write</code>要求的数据类型一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write的执行流程" tabindex="-1"><a class="header-anchor" href="#write的执行流程" aria-hidden="true">#</a> write的执行流程</h3><p><code>write</code>方法返回一个布尔值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">flags</span><span class="token operator">:</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token comment">//默认以写（w）方式</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token number">438</span><span class="token punctuation">,</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fd</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//默认16kb</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
<span class="token keyword">let</span> flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
<span class="token keyword">let</span> flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>

<span class="token comment">//true true false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flag</code>为false并不代表数据不能被执行写入</p><ol><li>第一次调用<code>write</code>方法时是将数据写入到文件中</li><li>第二次开始<code>write</code>方法就是将数据写入到缓存中</li><li>生产速度和消费速度不一样，一般情况下生产速度要比消费速度快很多</li><li>当<code>flag</code>为<code>false</code>之后并不意味着当前次的数据不能被写入了，但是我们应该告知数据的生产者，当前的消费速度已经跟不上生产速度了，所以这个时候，一般我们会将可写流的模块修改为暂停模式</li><li>当数据生产者暂停之后，消费者会慢慢的消化它内部缓存中的数据，直到可以再次被执行写入操作</li><li>当缓冲区可以继续写入数据时如何让生产者知道？使用<code>drain</code>事件</li></ol><p>write方法的缺点：</p><p>针对大容量文件，write方式写入对内存不友好，因为第一次是直接写入到文件，会出现短时间撑满的情况</p><p>可通过<code>drain</code>事件结合<code>highWaterMark</code>来控制写入速度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token comment">//每个汉字3个字节，相当于每次最多写入一个汉字</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token string">&#39;拉勾教育&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">function</span> <span class="token function">executeWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  flag <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">!==</span>source<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
    flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>
    num<span class="token operator">++</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//执行一次之后，flag变成false，因为highWaterMark为3，每次写入一个汉字占用3个字节</span>
<span class="token function">executeWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//当flag=false时触发drain事件的执行</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;drain&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;drain执行了&#39;</span><span class="token punctuation">)</span>
  <span class="token function">executeWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),d=[c,l,i,u,r];function k(v,m){return p(),e("div",null,d)}const g=t(o,[["render",k],["__file","stream.html.vue"]]);export{g as default};
