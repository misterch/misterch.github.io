import{_ as n,o as s,c as a,a as p}from"./app-d4c6289a.js";const e="/assets/image-20231228182510070-a3d62fb4.png",t={},o=p('<h1 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h1><p>不同与手动分包，自动分包是从<strong>实际的角度</strong>出发，从一个更加<strong>宏观的角度</strong>来控制分包，而一般不对具体哪个包要分出去进行控制</p><p>因此使用自动分包，不仅非常方便，而且更加贴合实际的开发需要</p><p>要控制自动分包，关键是要配置一个合理的<strong>分包策略</strong></p><p>有了分包策略之后，不需要额外安装任何插件，webpack会自动的按照策略进行分包</p><blockquote><p>实际上，webpack在内部是使用<code>SplitChunksPlugin</code>进行分包的 过去有一个库<code>CommonsChunkPlugin</code>也可以实现分包，不过由于该库某些地方并不完善，到了<code>webpack4</code>之后，已被<code>SplitChunksPlugin</code>取代</p></blockquote><p><img src="'+e+`" alt="image-20231228182510070"></p><p>从分包流程中至少可以看出以下几点：</p><ul><li>分包策略至关重要，它决定了如何分包</li><li>分包时，webpack开启了一个<strong>新的chunk</strong>，对分离的模块进行打包</li><li>打包结果中，公共的部分被提取出来形成了一个单独的文件，它是新chunk的产物</li></ul><h1 id="分包策略的基本配置" tabindex="-1"><a class="header-anchor" href="#分包策略的基本配置" aria-hidden="true">#</a> 分包策略的基本配置</h1><p>webpack提供了<code>optimization</code>配置项，用于配置一些优化信息</p><p>其中<code>splitChunks</code>是分包策略的配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 分包策略</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，分包策略有其默认的配置，我们只需要轻微的改动，即可应对大部分分包场景</p><ol><li>chunks</li></ol><p>该配置项用于配置需要应用分包策略的chunk</p><p>我们知道，分包是从已有的chunk中分离出新的chunk，那么哪些chunk需要分离呢</p><p>chunks有三个取值，分别是：</p><ul><li>all: 对于所有的chunk都要应用分包策略</li><li>async：【默认】仅针对异步chunk应用分包策略</li><li>initial：仅针对普通chunk应用分包策略</li></ul><p>所以，你只需要配置<code>chunks</code>为<code>all</code>即可</p><ol start="2"><li>maxSize</li></ol><p>该配置可以控制包的最大字节数</p><p>如果某个包（包括分出来的包）超过了该值，则webpack会尽可能的将其分离成多个包</p><p>但是不要忽略的是，分包的<strong>基础单位是模块</strong>，如果一个完整的模块超过了该体积，它是无法做到再切割的，因此，尽管使用了这个配置，完全有可能某个包还是会超过这个体积</p><p>另外，该配置看上去很美妙，实际意义其实不大</p><p>因为分包的目的是<strong>提取大量的公共代码</strong>，从而减少总体积和充分利用浏览器缓存</p><p>虽然该配置可以把一些包进行再切分，但是实际的总体积和传输量并没有发生变化</p><blockquote><p>如果要进一步减少公共模块的体积，只能是压缩和<code>tree shaking</code></p></blockquote><h1 id="分包策略的其他配置" tabindex="-1"><a class="header-anchor" href="#分包策略的其他配置" aria-hidden="true">#</a> 分包策略的其他配置</h1><p>如果不想使用其他配置的默认值，可以手动进行配置：</p><ul><li>automaticNameDelimiter：新chunk名称的分隔符，默认值~</li><li>minChunks：一个模块被多少个chunk使用时，才会进行分包，默认值1</li><li>minSize：当分包达到多少字节后才允许被真正的拆分，默认值30000</li></ul><h1 id="缓存组" tabindex="-1"><a class="header-anchor" href="#缓存组" aria-hidden="true">#</a> 缓存组</h1><p>之前配置的分包策略是全局的</p><p>而实际上，分包策略是基于缓存组的</p><p>每个缓存组提供一套独有的策略，webpack按照缓存组的优先级依次处理每个缓存组，被缓存组处理过的分包不需要再次分包</p><p>默认情况下，webpack提供了两个缓存组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//全局配置</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 属性名是缓存组名称，会影响到分包的chunk名</span>
        <span class="token comment">// 属性值是缓存组的配置，缓存组继承所有的全局配置，也有自己特殊的配置</span>
        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 当匹配到相应模块时，将这些模块进行单独打包</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token comment">// 缓存组优先级，优先级越高，该策略越先进行处理，默认值为0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">// 覆盖全局配置，将最小chunk引用数改为2</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 优先级</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 重用已经被分离出去的chunk</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很多时候，缓存组对于我们来说没什么意义，因为默认的缓存组就已经够用了</p><p>但是我们同样可以利用缓存组来完成一些事情，比如对公共样式的抽离</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">styles</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配样式模块</span>
          <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 覆盖默认的最小尺寸，这里仅仅是作为测试</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">// 覆盖默认的最小chunk引用数</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].[hash:5].css&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// chunkFilename是配置来自于分割chunk的文件名</span>
      <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;common.[hash:5].css&quot;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="配合多页应用" tabindex="-1"><a class="header-anchor" href="#配合多页应用" aria-hidden="true">#</a> 配合多页应用</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会自动的找到被<code>index</code>分离出去的chunk，并完成引用</p><h1 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h1><p>自动分包的原理其实并不复杂，主要经过以下步骤：</p><ol><li>检查每个chunk编译的结果</li><li>根据分包策略，找到那些满足策略的模块</li><li>根据分包策略，生成新的chunk打包这些模块（代码有所变化）</li><li>把打包出去的模块从原始包中移除，并修正原始包代码</li></ol><p>在代码层面，有以下变动</p><ol><li>分包的代码中，加入一个全局变量，类型为数组，其中包含公共模块的代码</li><li>原始包的代码中，使用数组中的公共代码</li></ol>`,48),l=[o];function c(i,r){return s(),a("div",null,l)}const k=n(t,[["render",c],["__file","autoSplitChunk.html.vue"]]);export{k as default};
