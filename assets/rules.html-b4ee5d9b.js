import{_ as a,o as e,c as r,a as p}from"./app-d4c6289a.js";const h={},d=p('<h2 id="模式是什么" tabindex="-1"><a class="header-anchor" href="#模式是什么" aria-hidden="true">#</a> 模式是什么</h2><p>模式是值从生产经验和生活经验中经过抽象和升华提炼出来的核心知识体系。是解决某一类问题的方法论</p><h2 id="设计模式的目的" tabindex="-1"><a class="header-anchor" href="#设计模式的目的" aria-hidden="true">#</a> 设计模式的目的</h2><p>为了代码可重用性、代码更易被人理解、保证代码可靠性。设计模式使代码编写真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样</p><h2 id="六大原则" tabindex="-1"><a class="header-anchor" href="#六大原则" aria-hidden="true">#</a> 六大原则</h2><p>减少耦合，增强复用性，降低代码的开发维护扩展成本</p><p>耦合度和复杂度的危害</p><blockquote><p>复杂度：高，代码质量不高，可维护性差，复用性差，不易扩展</p><p>耦合度：无是不可能的；低，合理；过高不容易维护</p></blockquote><h3 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则" aria-hidden="true">#</a> 单一职责原则</h3><p>一个方法只做一件事情</p><h3 id="开闭原则ocp" tabindex="-1"><a class="header-anchor" href="#开闭原则ocp" aria-hidden="true">#</a> 开闭原则OCP</h3><p>一个软体实体如类、模块和函数应该<strong>对扩展开放，对修改关闭</strong></p><p>面向扩展开放，面向修改关闭，同时增强代码复用性</p><h3 id="里氏代换原则" tabindex="-1"><a class="header-anchor" href="#里氏代换原则" aria-hidden="true">#</a> 里氏代换原则</h3><p>任何基类出现的地方，子类一定可以出现；就是<strong>子类可以扩展父类的功能，但不能够改变父类原有的功能</strong></p><h3 id="接口分离原则isp" tabindex="-1"><a class="header-anchor" href="#接口分离原则isp" aria-hidden="true">#</a> 接口分离原则ISP</h3><p>把大接口拆分小接口，不能一个接口全部实现增删改查</p><h3 id="迪米特原则ld" tabindex="-1"><a class="header-anchor" href="#迪米特原则ld" aria-hidden="true">#</a> 迪米特原则LD</h3><p>一个接口和一个方法，传入的<strong>参数越少越好</strong>，降低耦合度的同事也户让复杂度降低</p><p>形成的关联越少越好，依赖最少</p><h3 id="依赖倒置原则dip" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则dip" aria-hidden="true">#</a> 依赖倒置原则DIP</h3><p>依赖接口，不依赖方法，底层的东西不用了解，只需知道表现就行。降低耦合度</p><p>前端应用中可以理解成多者之的<strong>依赖状态，而不依赖彼此</strong></p><h2 id="开发时的流程" tabindex="-1"><a class="header-anchor" href="#开发时的流程" aria-hidden="true">#</a> 开发时的流程</h2><p>优先降低复杂度，尽量降低耦合度</p><ol><li>利用单一职责原则，开闭原则，里氏代换原则降低复杂度</li><li>通过迪米特法则减少耦合度</li><li>通过依赖倒置原则消除可以没有的耦合</li></ol><h2 id="创建型" tabindex="-1"><a class="header-anchor" href="#创建型" aria-hidden="true">#</a> 创建型</h2><p><a href="./singleton">单例模式</a></p><p>抽象工厂模式</p><p>建造者模式</p><p><a href="./factory">工厂模式</a></p><p>原型模式</p><h2 id="结构型" tabindex="-1"><a class="header-anchor" href="#结构型" aria-hidden="true">#</a> 结构型</h2><p>适配器模式</p><p>桥接模式</p><p>装饰模式</p><p>组合模式</p><p>外观模式</p><p>享元模式</p><p><a href="./proxy">代理模式</a></p><h2 id="行为型" tabindex="-1"><a class="header-anchor" href="#行为型" aria-hidden="true">#</a> 行为型</h2><p>模板方法模式</p><p>命令模式</p><p>迭代器模式</p><p>观察者模式</p><p>中介者模式</p><p>备忘录模式</p><p>解释器模式</p><p>状态模式</p><p><a href="./strategy">策略模式</a></p><p>职责链模式</p><p>访问者模式</p>',52),i=[d];function n(t,s){return e(),r("div",null,i)}const o=a(h,[["render",n],["__file","rules.html.vue"]]);export{o as default};
