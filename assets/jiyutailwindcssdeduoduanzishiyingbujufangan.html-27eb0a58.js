import{_ as e,r as p,o as c,c as i,b as n,d as s,e as t,a as o}from"./app-d4c6289a.js";const l={},u={href:"http://ksria.com/simpread/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/7265129339195424827",target:"_blank",rel:"noopener noreferrer"},r=o(`<p>近期，我在做一个项目。老板希望我们的产品在不同的设备上都能有良好的用户体验，同时，为了节省人力成本，希望在同一套代码上去针对不同的屏幕尺寸去做样式适配。因为我选择了 tailwindcss 作为 css 框架，所以我就想能不能基于 tailwindcss 去做一套多端自适应的布局方案呢？经过一番研究，我发现，tailwindcss 的响应式断点设置非常灵活，可以满足我们的需求。使用断点工具类，可以避免在写大量的媒体查询 css, 使用下来发现还是非常方便的。下面，我就来介绍一下我是如何基于 tailwindcss 去做一套多端自适应的布局方案的。</p><h2 id="响应式断点设置" tabindex="-1"><a class="header-anchor" href="#响应式断点设置" aria-hidden="true">#</a> 响应式断点设置</h2><p>以下是 tailwindcss 默认的 5 个断点：</p><table><thead><tr><th>断点前缀</th><th>宽度</th><th>css</th></tr></thead><tbody><tr><td>sm</td><td>640px</td><td>@media (min-width: 640px) { ... }</td></tr><tr><td>md</td><td>768px</td><td>@media (min-width: 768px) { ... }</td></tr><tr><td>lg</td><td>1024px</td><td>@media (min-width: 1024px) { ... }</td></tr><tr><td>xl</td><td>1280px</td><td>@media (min-width: 1280px) { ... }</td></tr><tr><td>2xl</td><td>1536px</td><td>@media (min-width: 1536px) { ... }</td></tr></tbody></table><p>tailwindcss 采用 <code>Mobile First</code>的策略，即不加前缀的工具类都是针对小屏幕的，加了前缀的工具类都是针对大屏幕的。比如，<code>text-center</code>是针对小屏幕的，<code>md:text-center</code>是针对大屏幕的。因为 tailwindcss 的第一个断点屏幕尺寸是 640px, 但其实最大的手机屏幕宽度也不过 480px, 所以，如果你有一些针对手机端的特殊布局，可以考虑加一个断点：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// tailwind.config.js
module.exports = {
    ...,// 其他配置
    theme: {
        screens: {
            xs: &#39;480px&#39;,
            ...defaultTheme.screens,
        },
    },

}


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对以上断点，我和设计师讨论后达成一致，针对每个页面，设计师一般至少出 3 套布局设计，分别应用于手机端、平板端、PC 端。我们认为屏幕尺寸小于 480px 为手机端，480px 到 1024px 为平板端，1024px 到 1280px 之间为大 pad 尺寸和小笔记本屏幕的混合区。大于 1280px 为 PC 端。设计师可以选择在任意断点上做布局变化，以细粒度的控制自适应的布局效果。</p><h2 id="页面整体布局" tabindex="-1"><a class="header-anchor" href="#页面整体布局" aria-hidden="true">#</a> 页面整体布局</h2><p>设计师给出的布局方案是这样的：</p><p>手机和 pad 端：上中下布局，上下固定高度，中间自适应</p><p>pc 端：左右布局，左边固定宽度，右边自适应</p><p>效果如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b36e440a42d4b309217031da7537f6e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1748&amp;h=980&amp;s=2381644&amp;e=gif&amp;f=132&amp;b=f66042" alt=""></p><p>要实现这样的效果，我们一开始就要把使用这样的布局方案：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29721becd02443a4a9c302309d7485fc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1328&amp;h=264&amp;s=12526&amp;e=png&amp;b=7dbbea" alt=""></p><p>在手机端，我们把侧边栏（Sider) 隐藏掉，只显示主内容区（Content）, 在 pc 端，我们把 Header 和 Footer 隐藏，将 Sider 展示。伪代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;Layout&gt;
  &lt;Header class&gt;&lt;/Header&gt;
  &lt;Layout&gt;
    &lt;Sider class /&gt;
    &lt;Content&gt;&lt;/Content&gt;
  &lt;/Layout&gt;
  &lt;Footer class&gt;&lt;/Footer&gt;
&lt;/Layout&gt;


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-flex-做局部的布局调整" tabindex="-1"><a class="header-anchor" href="#使用-flex-做局部的布局调整" aria-hidden="true">#</a> 使用 flex 做局部的布局调整</h2><p>在布局框架定下来后，就是局部的布局变化了，常见的就是在某个断点后，需要把原来的水平布局变成垂直布局，或者反过来。如下图：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c35b6dbc4cc49a18301c0378121c639~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=791&amp;h=649&amp;s=1457416&amp;e=gif&amp;f=155&amp;b=fdfdfd" alt=""></p><p>这时候，我们可以使用 flex 布局来实现。可以这样做：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div class&gt;
  &lt;div class&gt;&lt;/div&gt;
  &lt;div class&gt;&lt;/div&gt;
&lt;/div&gt;


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-grid-flex-做水平列表自适应" tabindex="-1"><a class="header-anchor" href="#使用-grid-flex-做水平列表自适应" aria-hidden="true">#</a> 使用 grid/flex 做水平列表自适应</h2><p>在某些场景下，我们需要实现水平列表的自适应，要求如下：</p><ol><li>列表项个数不定，支持多行排列</li><li>在不同断点下，同一行展示不同的列数</li><li>在同一个断点下，列表的宽度自适应</li></ol><p>如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4da831f1b12a40c59471598cced7da1f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1437&amp;h=975&amp;s=2266935&amp;e=gif&amp;f=167&amp;b=f65644" alt=""></p><p>可以使用 flex + 百分比 来实现：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div class&gt;
  {items.map((item) =&gt; (
    &lt;div class&gt;&lt;/div&gt;
  ))}
&lt;/div&gt;


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外也可以使用 grid 布局来实现：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div class&gt;
  {items.map((item) =&gt; (
    &lt;div&gt;&lt;/div&gt;
  ))}
&lt;/div&gt;


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-获取布局情况" tabindex="-1"><a class="header-anchor" href="#js-获取布局情况" aria-hidden="true">#</a> js 获取布局情况</h2><p>某些情况下，我们可能需要在事件回调中获取当前所处的断点和布局情况，比如，我们需要在点击某个按钮后，获取当前的布局情况，然后根据布局情况做一些处理。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const handleClick = () =&gt; {
  if (window.innerWidth &lt; 480) {
    // do something for mobile
  } else if (window.innerWidth &lt; 1024) {
    // do something for pad
  } else {
    // do something for pc
  }
};


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>480</code>和<code>1024</code>是我们自己定义的断点，可以保存成常量，并与 tailwindcss 的断点保持一致。</p><p>但是这种方式有个问题，就是当我们在浏览器中调整窗口大小时，断点和布局情况是会变化的，js 执行的时候，可能已经不是我们当前的断点和布局情况了。</p><p>可能的场景是 pad 旋转屏幕和 开发过程中调整浏览器窗口大小来模拟不同端的设备，这时候，我们需要在窗口大小变化时，重新获取当前的断点和布局情况。</p><p>我们可以实现一个 Context Provider 来提供当前屏幕宽度和断点信息，然后在窗口大小变化时，更新这些信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ScreenContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">ScreenProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>screenWidth<span class="token punctuation">,</span> setScreenWidth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>screenBreakpoint<span class="token punctuation">,</span> setScreenBreakpoint<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setScreenWidth</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;=</span> <span class="token number">1536</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScreenBreakpoint</span><span class="token punctuation">(</span><span class="token string">&quot;2xl&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;=</span> <span class="token number">1280</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScreenBreakpoint</span><span class="token punctuation">(</span><span class="token string">&quot;xl&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;=</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScreenBreakpoint</span><span class="token punctuation">(</span><span class="token string">&quot;lg&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;=</span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScreenBreakpoint</span><span class="token punctuation">(</span><span class="token string">&quot;md&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;=</span> <span class="token number">640</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScreenBreakpoint</span><span class="token punctuation">(</span><span class="token string">&quot;sm&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;=</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScreenBreakpoint</span><span class="token punctuation">(</span><span class="token string">&quot;xs&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">setScreenBreakpoint</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>ScreenContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> screenWidth<span class="token punctuation">,</span> screenBreakpoint <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ScreenContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">useScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> screenWidth<span class="token punctuation">,</span> screenBreakpoint <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ScreenContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> screenWidth<span class="token punctuation">,</span> screenBreakpoint <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> ScreenContext<span class="token punctuation">,</span> ScreenProvider<span class="token punctuation">,</span> useScreen <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以在任意组件中通过 useScreen hook 获取当前的屏幕宽度和断点信息了。</p><p>但是这个方案还有一个小缺点就是我们维护了两份断点的信息，分别放在 tailwind.config.js 中和 ScreenProvider 中，如果我们修改了 tailwind.config.js 中的断点信息，那么 ScreenProvider 中的断点信息也要做相应的修改。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ol><li><p>交互设计</p><p>大屏情况下，页面有足够的地方容纳元素，但是，适配到手机端，有些区域就没地方显示了，一般会采用弹框的形式来显示被隐藏的区域。</p></li><li><p>关于 hover</p><p>hover 效果应该只应用在 PC 端，因为手机端点击会触发 hover 效果，而且必须点击其他位置，才能取消掉 hover 效果，所以，如果我们要实现一个在 PC 上有 hover 效果，在手机上没有 hover 效果的按钮，可以这样做：</p><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>&lt;button className=&quot; lg:hover:bg-blue-500&quot;&gt;&lt;/button&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>code split</p><p>大多数情况下，一个用户只会看到某个断点下的页面，所以，我们可以根据当前的断点，来决定加载哪些组件，这样可以减少不必要的代码加载，减少 js 体积，提高页面加载速度。比如，我们的 Sider 内的侧边导航栏组件只在<code>lg</code>断点后显示，那么我们可以这样做：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> SiderMenu <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./SiderMenu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> screenBreakpoint <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token attr-name">class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Header</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Sider</span></span> <span class="token attr-name">class</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&quot;lg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2xl&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>screenBreakpoint<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SiderMenu</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Sider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Content</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Content</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Footer</span></span> <span class="token attr-name">class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Footer</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>基于 tailwindcss 的多端自适应布局方案，可以让我们在同一套代码上去针对不同的屏幕尺寸去做样式适配，可以大大减少我们的开发成本。但是，这要求前端开发和设计师能够协同工作，设计师需要提供不同断点下的布局设计，前端开发需要根据设计稿去实现不同断点下的布局。这样，我们才能实现一套代码，多端自适应的布局方案。</p>`,45);function k(v,m){const a=p("ExternalLinkIcon");return c(),i("div",null,[n("blockquote",null,[n("p",null,[s("本文由 "),n("a",u,[s("简悦 SimpRead"),t(a)]),s(" 转码， 原文地址 "),n("a",d,[s("juejin.cn"),t(a)])])]),r])}const g=e(l,[["render",k],["__file","jiyutailwindcssdeduoduanzishiyingbujufangan.html.vue"]]);export{g as default};
