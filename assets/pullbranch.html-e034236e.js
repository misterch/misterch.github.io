import{_ as s,o as t,c as l,a as n,b as a,d as e}from"./app-d4c6289a.js";const o={},r=n(`<h2 id="本地仓库有其他分支代码" tabindex="-1"><a class="header-anchor" href="#本地仓库有其他分支代码" aria-hidden="true">#</a> 本地仓库有其他分支代码</h2><p>查看所有的远程分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-r</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),i=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"TIP"),a("p",null,[e("当运行"),a("code",null,"git branch -a"),e("时无法查看远程最新分支时，可以通过以下办法解决")]),a("ol",null,[a("li",null,[a("p",null,"更新远程分支信息"),a("p",null,"同步远程所有分支信息到本地仓库"),a("p",null,[a("code",null,"git fetch --all")])]),a("li",null,[a("p",null,"强制刷新本地引用"),a("p",null,[a("code",null,"git remote update origin --prune")])])])],-1),c=n(`<h3 id="需要本地分支和远程分支建立映射关系" tabindex="-1"><a class="header-anchor" href="#需要本地分支和远程分支建立映射关系" aria-hidden="true">#</a> 需要本地分支和远程分支建立映射关系</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span> origin/<span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行该命令会在本地仓库新建&lt;本地分支名&gt;，并且自动切换到新建的分支，并把远程分支的代码也拉取到&lt;本地分支名&gt;的分支中。通过这个方法建立本地分支和远程分支的关系</p><h3 id="不需要本地分支和远程分支建立映射关系" tabindex="-1"><a class="header-anchor" href="#不需要本地分支和远程分支建立映射关系" aria-hidden="true">#</a> 不需要本地分支和远程分支建立映射关系</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch origin <span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行该命令会在本地仓库新建一个本地分支，但不会切换到新建的分支，需要手动checkout，并且远程分支的代码也拉取到了新建的本地分支中。</p><h2 id="本地没有其他分支的代码仓库" tabindex="-1"><a class="header-anchor" href="#本地没有其他分支的代码仓库" aria-hidden="true">#</a> 本地没有其他分支的代码仓库</h2><p>即本地没有该仓库，需要<code>clone</code>远程仓库到本地，但<strong>并不是拉取main分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>仓库地址<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行该命令会将远程的指定分支拉取到本地，而且拉取的本地分支自动和远程同名分支建立追踪关系</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li><code>git fetch -all</code>可以将远程仓库所有分支拷贝到本地仓库</li><li><code>git remote update origin --prune</code>可以强制刷新本地引用，当本地<code>git branch -a</code>查看到仓库所有分支，如果分支不一致时使用这个命令</li><li><code>git clone -b 分支名 仓库地址</code>可以拉取远程指定分支到本地仓库（本地没有该仓库）</li><li><code>git checkout -b 本地分支名 origin/远程分支名</code>可以拉取远程指定分支到本地仓库（本地已有仓库）</li></ol>`,12),d=[r,i,c];function p(h,u){return t(),l("div",null,d)}const b=s(o,[["render",p],["__file","pullbranch.html.vue"]]);export{b as default};
