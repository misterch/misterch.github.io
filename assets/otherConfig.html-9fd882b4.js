import{_ as n,o as s,c as a,a as e}from"./app-d4c6289a.js";const t={},p=e(`<h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  context<span class="token operator">:</span> path.resolve(__dirname<span class="token punctuation">,</span>&#39;./src&#39;)<span class="token punctuation">,</span>
  entry<span class="token operator">:</span> <span class="token punctuation">{</span>
    main<span class="token operator">:</span> &#39;./main.js&#39;
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置会影响<strong>入口</strong>和<strong>loader</strong>的解析，它们的相对路径会以<strong>context</strong>的配置作为<strong>基准路径</strong>，这样，你的配置会独立于CWD（当前执行路径）</p><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> output</h2><h3 id="library" tabindex="-1"><a class="header-anchor" href="#library" aria-hidden="true">#</a> library</h3><p>设置该配置以后，打包后的结果中，会将自执行函数的执行结果暴露给配置后的变量</p><p>一般是项目作为<strong>库</strong>，向外提供API使用</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  library<span class="token operator">:</span><span class="token string">&quot;jquery&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置后，打包的结果中，会将自执行函数的执行结果返回给jquery，这样就可以使用jquery这个库了</p><h3 id="librarytarget" tabindex="-1"><a class="header-anchor" href="#librarytarget" aria-hidden="true">#</a> libraryTarget</h3><p>该配置可以更加精细控制如何暴露入口包的导出结果</p><p>可用的值有：</p><ul><li>var：默认值，暴露给一个普通变量</li><li>window：暴露给window对象的一个属性</li><li>this：暴露给this的一个属性</li><li>global：暴露给global的一个属性</li><li>commonjs：暴露给export的一个属性</li></ul><h2 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> target</h2><p>设置打包结果最终运行的环境，常用值有：</p><ul><li>web：打包后的代码运行在web环境中</li><li>node：打包后的代码运行在node环境中</li></ul><h2 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> resolve</h2><h3 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> modules</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>modules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当解析模块时，如果遇到导入语句（<code>require(&quot;jquery&quot;)</code>），webpack会从下面的位置寻找依赖的模块</p><ul><li>当前目录下的<code>node_modules</code>目录</li><li>上一级目录下的<code>node_modules</code>目录</li><li>......</li></ul><h3 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions" aria-hidden="true">#</a> extensions</h3><p>当解析模块是，遇到无具体后缀的导入语句，会根据这个配置来测试它的后缀名</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  extensions<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ts&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias</h3><p>设置这个配置后，就可以更加方便地导入依赖，特别是遇到深层次的目录结构</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  alias<span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;@&quot;</span><span class="token operator">:</span>path.resolve(__dirname<span class="token punctuation">,</span>&#39;src&#39;)
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样配置后就可以使用<code>@</code>来替代<code>../../</code>这样的写法</p><p><code>require(&quot;@/test&quot;)相当于require(&quot;/project/src/test&quot;)</code></p><h2 id="externals" tabindex="-1"><a class="header-anchor" href="#externals" aria-hidden="true">#</a> externals</h2><p>如果希望打包的结果中不需要包含某些包的代码（缩减包的体积），而是使用cdn的方式引入包，可以配置这个插件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  externals<span class="token operator">:</span><span class="token punctuation">{</span>
    jquery<span class="token operator">:</span><span class="token string">&quot;$&quot;</span><span class="token punctuation">,</span>
    lodash<span class="token operator">:</span><span class="token string">&quot;_&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包的结果将变成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">)</span>
        <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> $<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> _<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只是简单的exports一个属性</p><h2 id="webpack内置插件" tabindex="-1"><a class="header-anchor" href="#webpack内置插件" aria-hidden="true">#</a> webpack内置插件</h2><p>webpack的内置插件是作为webpack的静态属性存在的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span></span><span class="token function">插件名</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="defineplugin" tabindex="-1"><a class="header-anchor" href="#defineplugin" aria-hidden="true">#</a> DefinePlugin</h3><p>全局常量定义插件，使用该插件通常定义一些常量值，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token constant">PI</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Math.PI</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// PI = Math.PI</span>
    <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;1.0.0&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// VERSION = &quot;1.0.0&quot;</span>
    <span class="token constant">DOMAIN</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&quot;duyi.com&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，在源码中，我们可以直接使用插件中提供的常量，当webpack编译完成后，会自动替换为常量的值</p><h3 id="provideplugin" tabindex="-1"><a class="header-anchor" href="#provideplugin" aria-hidden="true">#</a> ProvidePlugin</h3><p>自动加载模块，而不必到处 import 或 require</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">_</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bannerplugin" tabindex="-1"><a class="header-anchor" href="#bannerplugin" aria-hidden="true">#</a> BannerPlugin</h3><p>它可以为每个chunk生成的文件头部添加一行注释，一般用于添加作者、公司、版权等信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">banner</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  hash:[hash]
  chunkhash:[chunkhash]
  name:[name]
  author:yuanjin
  corporation:duyi
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","otherConfig.html.vue"]]);export{u as default};
