import{_ as n,o as s,c as a,a as e}from"./app-d4c6289a.js";const t={},o=e(`<h2 id="涉及到的配置" tabindex="-1"><a class="header-anchor" href="#涉及到的配置" aria-hidden="true">#</a> 涉及到的配置</h2><table><thead><tr><th>配置名称</th><th>含义</th></tr></thead><tbody><tr><td>module</td><td>设置编译结果中使用的模块标准</td></tr><tr><td>moduleResolution</td><td>设置解析模块的模式</td></tr><tr><td>noImplicitUseStrict</td><td>编译结果中不包含“use strict”</td></tr><tr><td>removeComments</td><td>编译结果已出注释</td></tr><tr><td>noEmitOnError</td><td>错误时不生成编译结果</td></tr><tr><td>esModuleInterop</td><td>启用es模块化交互非es模块导出</td></tr></tbody></table><h2 id="ts中使用的模块化标准" tabindex="-1"><a class="header-anchor" href="#ts中使用的模块化标准" aria-hidden="true">#</a> TS中使用的模块化标准</h2><p>在TS中，导入和导出模块，统一使用ES6的模块化标准</p><h2 id="编译结果中的模块化" tabindex="-1"><a class="header-anchor" href="#编译结果中的模块化" aria-hidden="true">#</a> 编译结果中的模块化</h2><p><code>compilerOptions.module</code>配置编译结果使用的模块化标准</p><ul><li>ES6：没有区别</li><li>commonjs：导出的声明会变成<code>exports</code>的属性，默认导出变成exports的default属性</li></ul><h2 id="在ts中使用commonjs标准模块" tabindex="-1"><a class="header-anchor" href="#在ts中使用commonjs标准模块" aria-hidden="true">#</a> 在TS中使用commonjs标准模块</h2><p>例如<code>fs</code>是使用<code>commonjs</code>模块标准写的，使用<code>module.exports = {}</code>导出，如果使用ES6模块标准默认引入，将会报错</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译结果：<code>fs.default.readFileSync()</code></p><h3 id="正确方式1" tabindex="-1"><a class="header-anchor" href="#正确方式1" aria-hidden="true">#</a> 正确方式1</h3><p>正确引入<code>commonjs</code>模块标准的模块</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>readFileSync<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//或者</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正确方式2" tabindex="-1"><a class="header-anchor" href="#正确方式2" aria-hidden="true">#</a> 正确方式2</h3><p>如果一定要使用<code>import fs from &#39;fs&#39;</code>，需要配置<code>tsconfig</code>的<code>compilerOptions.esModuleInterrop:true</code></p><h2 id="在ts中书写commonjs模块化代码" tabindex="-1"><a class="header-anchor" href="#在ts中书写commonjs模块化代码" aria-hidden="true">#</a> 在TS中书写commonjs模块化代码</h2><p><code>module.exports={}</code>将没有办法获得类型检查，要获得类型检查要使用<code>export = {}</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//在TS中使用commonjs方法导出模块，将无法获得类型检查</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello fn&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//正确导出</span>
<span class="token keyword">export</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token string">&#39;ben&#39;</span><span class="token punctuation">,</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello fn&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>commonjs</code>标准导入<code>import myModule = require(&#39;./myModule&#39;)</code></p><p>需要开启<code>esModuleInterop</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//使用ES6导入</span>
<span class="token keyword">import</span> myModule <span class="token keyword">from</span> <span class="token string">&#39;./myModule&#39;</span>

<span class="token comment">//依然使用commonjs导入</span>
<span class="token keyword">import</span> myModule <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myModule&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块解析" tabindex="-1"><a class="header-anchor" href="#模块解析" aria-hidden="true">#</a> 模块解析</h2><p>从什么位置寻找模块</p><p>配置<code>compilerOptions.moduleResolution</code></p><p>TS中有两种模块解析策略</p><ul><li>classic</li><li>node <ul><li>相对路径<code>require(&#39;./module&#39;)</code>：当前目录-&gt;package.json的main字段-&gt;module当成文件夹查找main字段-&gt;module当成文件夹查找index.js-&gt;</li><li>非相对路径<code>require(&#39;module&#39;)</code>：逐级<code>node_modules</code>寻找</li></ul></li></ul>`,27),c=[o];function p(i,d){return s(),a("div",null,c)}const r=n(t,[["render",p],["__file","module.html.vue"]]);export{r as default};
