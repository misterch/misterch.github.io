import{_ as n,o as e,c as s,a}from"./app-d4c6289a.js";const p={},o=a(`<h2 id="nvm" tabindex="-1"><a class="header-anchor" href="#nvm" aria-hidden="true">#</a> nvm</h2><p>使用nvm来管理nodejs版本，可以根据需要切换nodejs的版本，每个版本的nodejs也有对应的npm包管理器。</p><p>使用npm安装全局的包会安装到指定版本nodejs所在目录。</p><p>npm安装的包默认安装在c盘，可以使用npm config set修改全局依赖包的安装位置</p><h2 id="修改全局依赖位置" tabindex="-1"><a class="header-anchor" href="#修改全局依赖位置" aria-hidden="true">#</a> 修改全局依赖位置</h2><p>全局依赖的默认安装路径在C盘，为了不占用C盘空间，一般会修改安装位置</p><p>使用 <code>npm config list --global</code>查看全局配置</p><p>修改步骤：</p><ol><li><p>在需要存放全局依赖的位置新建文件夹（node_global和node_cache）</p></li><li><p>使用npm修改全局依赖位置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">&quot;e:<span class="token entity" title="\\n">\\n</span>odejs<span class="token entity" title="\\n">\\n</span>ode_global&quot;</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">&quot;e:<span class="token entity" title="\\n">\\n</span>odejs<span class="token entity" title="\\n">\\n</span>ode_cache&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改环境变量</p><p>⚠️注意：如果不设置的话，当执行命令时会出现<strong>不是内部命令</strong>的错误</p><p>在系统变量中新增 <code>NODE_PATH</code>，指向 <code>e:\\nodejs\\node_global</code>，指向安装依赖的目录位置node_modules</p></li><li><p>这样就完成了全局依赖安装的位置，可以安装全局依赖测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">pnpm</span> <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看发现pnpm已经安装在了 <code>e:\\nodejs\\node_global\\node_modules</code>，并在node_global下创建了命令脚本</p></li></ol><h2 id="设置pnpm" tabindex="-1"><a class="header-anchor" href="#设置pnpm" aria-hidden="true">#</a> 设置pnpm</h2><p>刚刚使用npm安装了全局的pnpm包，所有在切换不同版本的node时，不会出现找不到pnpm而报不是内部命令的错误，但pnpm对node版本有一定要求，需要注意</p><p>global-bin-dir：允许设置全局安装包的 <strong>bin 文件</strong>的目标目录。</p><p>global-dir：指定储存全局依赖的目录，即pnpm全局node_modules所在位置</p><p>store-dir：所有包被保存在磁盘上的位置</p><p>state-dir：pnpm 创建的当前仅由更新检查器使用的 <code>pnpm-state.json</code> 文件的目录。</p><p>cache-dir：包元数据缓存的位置。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm config set global-bin-dir &quot;e:\\nodejs\\node_global&quot;

pnpm config set global-dir &quot;e:\\nodejs\\pnpm\\pnpm-global&quot;

pnpm config set cache-dir &quot;e:\\nodejs\\pnpm\\cache&quot;

pnpm config set store-dir &quot;e:\\nodejs\\pnpm\\pnpm-store&quot;

pnpm config set state-dir &quot;e:\\nodejs\\pnpm&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置后使用pnpm安装的全局依赖包将保存在 <code>e:\\nodejs\\pnpm\\pnpm-global</code>中</p><p>pnpm也可以代替nvm来管理node版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">env</span> use <span class="token parameter variable">--global</span> <span class="token operator">&lt;</span>node version<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),i=[o];function d(l,t){return e(),s("div",null,i)}const r=n(p,[["render",d],["__file","pnpm.html.vue"]]);export{r as default};
