import{_ as p,r as o,o as c,c as u,b as n,d as s,e as t,a as e}from"./app-d4c6289a.js";const l={},i=e('<h2 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h2><p>简单来说所谓的<strong>Buffer</strong>就是Node在<strong>V8堆内存</strong>之外分配的<strong>一块固定大小</strong>的内存空间。当<strong>Buffer</strong>被<strong>console.log</strong>打印出来时，会以<strong>字节</strong>为单位，打印出一串以<strong>十六进制</strong>表示的值。</p>',2),r=n("strong",null,"Buffer",-1),d={href:"https://web.nodejs.cn/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"Uint8Array",-1),f=n("p",null,[s("可以将Buffer看成是一个储存"),n("strong",null,"二进制的数组"),s("，数组中的每一项，可以保存"),n("strong",null,"8位二进制"),s("：0000 0000")],-1),b=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"Q: 为什么是8位呢？"),n("p",null,"A:"),n("ol",null,[n("li",null,"在计算机中，很少情况会直接操作一位二进制，因为一位二进制储存的数据是非常有限的"),n("li",null,"通常会将8位二进制合成一个单元，这个单元称之为一个字节（byte）"),n("li",null,"1Byte=8bit，1KB=1024B(2^10)=8192bit，1MB = 1024KB = 1024 * 1024B = 1024 * 1024B * 8bit"),n("li",null,"很多变成语言中int类型是4个字节，long类型是8个字节"),n("li",null,"TCP传输的字节流，在写入和读取时都需要说明字节的个数"),n("li",null,[s("RGB的值分别都是"),n("code",null,"2^8"),s("，一个像素占3Byte（3*8bit=24bit），所以本质上在计算机中都是用一个字节储存的")])])],-1),v=e(`<h2 id="创建buffer" tabindex="-1"><a class="header-anchor" href="#创建buffer" aria-hidden="true">#</a> 创建Buffer</h2><h3 id="buffer-alloc" tabindex="-1"><a class="header-anchor" href="#buffer-alloc" aria-hidden="true">#</a> Buffer.alloc()</h3><p>创建指定长度的buffer对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span> <span class="token comment">//&lt;Buffer 00 00 00&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span> <span class="token comment">//&lt;Buffer 00 00 00&gt;</span>
buf1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span> <span class="token comment">//&lt;Buffer 01 00 00&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span> <span class="token comment">//&lt;Buffer 00 00 00&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过向Buffer.from传入指定长度的buffer，并非共享一段内存空间 ，而是对旧内存空间的值的拷贝或者利用了旧空间的长度创建出一段新空间</p><h2 id="buffer实例方法" tabindex="-1"><a class="header-anchor" href="#buffer实例方法" aria-hidden="true">#</a> Buffer实例方法</h2><h3 id="fill-value-start-end-使用数据填充buffer" tabindex="-1"><a class="header-anchor" href="#fill-value-start-end-使用数据填充buffer" aria-hidden="true">#</a> fill(value,start,end)：使用数据填充buffer</h3><ol><li>字符串填充</li></ol><p>如果传递的参数值的字节小于创建buffer的字节长度，就会重复写入数据直到填满</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
buf<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 31 32 33 31 32 33&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//123123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fill的第二个参数start，表示从第几个下标开始填充，第三个参数end，表示结束位置，结束位置无法填充</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
buf<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 00 31 32 00 00 00&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>数字填充</li></ol><p>将数字转换为utf8中对应的符号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
buf<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 7b 7b 7b 7b 7b 7b&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//{{{{{{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write-value-start-length-向buffer中写入数据" tabindex="-1"><a class="header-anchor" href="#write-value-start-length-向buffer中写入数据" aria-hidden="true">#</a> write(value,start,length)：向buffer中写入数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 31 32 33 00 00 00&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置从下标位1的位置开始写入，写入的长度为3</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 00 31 32 33 00 00&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tostring-encoding-start-end-从buffer中提取数据" tabindex="-1"><a class="header-anchor" href="#tostring-encoding-start-end-从buffer中提取数据" aria-hidden="true">#</a> toString(encoding,start,end)：从buffer中提取数据</h3><p>end：不包括end位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;你好世界&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer e4 bd a0 e5 a5 bd e4 b8 96 e7 95 8c&gt;</span>
<span class="token comment">// 使用默认utf8编码将buffer转换成字符</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//你好世界</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slice-start-end-截取buffer" tabindex="-1"><a class="header-anchor" href="#slice-start-end-截取buffer" aria-hidden="true">#</a> slice(start,end)：截取buffer</h3><p>不含end位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;你好世界&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b1 <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer e5 a5 bd&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 好</span>
<span class="token comment">//从后往前开始数3个下标的位置</span>
<span class="token keyword">let</span> b2 <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//界</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="indexof-value-在buffer中查找数据" tabindex="-1"><a class="header-anchor" href="#indexof-value-在buffer中查找数据" aria-hidden="true">#</a> indexOf(value)：在buffer中查找数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;你好世界，我是世一&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b1 <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;世&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
<span class="token keyword">let</span> b2 <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;世&#39;</span><span class="token punctuation">,</span>b1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="copy-target-targetstart-sourcestart-sourceend-拷贝buffer中的数据" tabindex="-1"><a class="header-anchor" href="#copy-target-targetstart-sourcestart-sourceend-拷贝buffer中的数据" aria-hidden="true">#</a> copy(target,targetStart,sourceStart,sourceEnd)：拷贝buffer中的数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 将buf2拷贝到buf1</span>
buf2<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="buffer静态方法" tabindex="-1"><a class="header-anchor" href="#buffer静态方法" aria-hidden="true">#</a> Buffer静态方法</h2><h3 id="concat-buffer-length" tabindex="-1"><a class="header-anchor" href="#concat-buffer-length" aria-hidden="true">#</a> concat(buffer[],length)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;世界&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//你好世</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isbuffer" tabindex="-1"><a class="header-anchor" href="#isbuffer" aria-hidden="true">#</a> isBuffer</h3><p>判断传入的数据是否是buffer对象</p><h3 id="自定义split" tabindex="-1"><a class="header-anchor" href="#自定义split" aria-hidden="true">#</a> 自定义split</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">ArrayBuffer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">split</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sep</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token comment">//分割符号的长度</span>
  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//从哪个位置开始截取</span>
  <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//偏移量</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>offset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>sep<span class="token punctuation">,</span>start<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>
    start <span class="token operator">=</span> offset <span class="token operator">+</span> len
  <span class="token punctuation">}</span>
  ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="buffer和字符串" tabindex="-1"><a class="header-anchor" href="#buffer和字符串" aria-hidden="true">#</a> Buffer和字符串</h2><p>Buffer相当于是一个字节的数组，数组中的<strong>每一项对应一个字节</strong>的大小，Buffer中的<strong>每一项用16进制</strong>表示</p><p><code>Buffer.from(data,encoding)</code>，<code>data</code>可能的类型有<code>string</code>、<code>number[]</code>、<code>buffer</code>、<code>ArrayBuffer</code> ，<code>encoding</code>默认是<code>utf8编码</code></p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>给<code>from</code>传入字符串类型时，会根据字符串编码生成该字符串对应的二进制表示</p><p>一个字节就能储存所有英语符号，所以一个英语字符可以用一个字节表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer 77 68 79&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//why</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要表示中文</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;你好世界&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// &lt;Buffer e4 bd a0 e5 a5 bd e4 b8 96 e7 95 8c&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 你好世界</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，4个中文字符，需要12个字节来表示，即1个中文字符需要用3个字节来表示，这是默认的utf8编码方式</p><h3 id="数字类型数组" tabindex="-1"><a class="header-anchor" href="#数字类型数组" aria-hidden="true">#</a> 数字类型数组</h3><p>给<code>from</code>传入一个<code>number[]</code>，其实相当于传入一个buffer对象类似，数组中的每一项表示一个字节，每项可以用你想用的进制来表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span>e4<span class="token punctuation">,</span> bd<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> e5<span class="token punctuation">,</span> a5<span class="token punctuation">,</span> bd<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> b8<span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> e7<span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> 8c<span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 你好世界</span>
<span class="token comment">// 十六进制e4bda0：你</span>
<span class="token comment">// 十六进制e5a5bd：好</span>
<span class="token comment">// 十六进制e4b896：世</span>
<span class="token comment">// 十六进制e7958c：界</span>

<span class="token comment">//十进制数组</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// why</span>

<span class="token comment">//二进制数组</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0b1110111</span><span class="token punctuation">,</span> <span class="token number">0b1101000</span><span class="token punctuation">,</span> <span class="token number">0b1111001</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// why</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码" aria-hidden="true">#</a> 字符编码</h2><h3 id="ascii码" tabindex="-1"><a class="header-anchor" href="#ascii码" aria-hidden="true">#</a> ASCII码</h3><p>计算机内部所有信息最终都是一个二进制值，每个二进制位有两种状态<code>0</code>和<code>1</code>，8个二进制位可以表示有2^8=256种状态，每个状态可以对应一个符号，从<code>00000000</code>到<code>11111111</code>。</p><p>由美国制定的一套字符编码，对英语字符与二进制位之间的关系做了统一的规定，被称为ASCII码。</p><p><code>ASCII码</code>一共规定了128个字符的编码（无符号正整数，二进制第一位始终为0），比如空格<code>SPACE</code>是32（二进制<code>00100000</code>），大写字母<code>A</code>是65（二进制<code>01000001</code>）。</p><h3 id="非ascii编码" tabindex="-1"><a class="header-anchor" href="#非ascii编码" aria-hidden="true">#</a> 非ASCII编码</h3><p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。不同语言有分别有不同的字符编码方式</p><h3 id="unicode" tabindex="-1"><a class="header-anchor" href="#unicode" aria-hidden="true">#</a> Unicode</h3><p>世界上存在多种编码方式，同一个二进制数字可以被解析成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。</p><p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失，这就是<code>Unicode</code>。</p><p><code>Unicode</code>是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如<code>U+0639</code>表示阿拉伯字母<code>Ain</code>，<code>U+0041</code>表示英语的大写字符A，<code>U+4E25</code>表示汉字<code>严</code>。</p><h3 id="unicode的问题" tabindex="-1"><a class="header-anchor" href="#unicode的问题" aria-hidden="true">#</a> Unicode的问题</h3><p>需要注意的是，<code>Unicode</code> 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p><p>比如，汉字<code>严</code>的 Unicode 是十六进制数<code>4E25</code>，转换成二进制数足足有15位（<code>100111000100101</code>），也就是说，这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p><p>这里就有两个严重的问题</p><p>第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？</p><p>第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是<code>0</code>，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p><p>它们造成的结果是：</p><ol><li>出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。</li><li>Unicode 在很长一段时间内无法推广，直到互联网的出现。</li></ol><h3 id="utf-8" tabindex="-1"><a class="header-anchor" href="#utf-8" aria-hidden="true">#</a> UTF-8</h3><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。其他实现方式还包括 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示），不过在互联网上基本不用。<strong>重复一遍，这里的关系是，UTF-8 是 Unicode 的实现方式之一。</strong></p><p>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8 的编码规则很简单，只有二条：</p><p>1）对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p><p>2）对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p><p>下表总结了编码规则，字母<code>x</code>表示可用编码的位。</p><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Unicode符号范围      |        UTF-8编码方式
(十六进制)           |              （二进制）
----------------------+---------------------------------------------
0000 0000-0000 007F | 0xxxxxxx
0000 0080-0000 07FF | 110xxxxx 10xxxxxx
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节。</p><p>下面，还是以汉字<code>严</code>为例，演示如何实现 UTF-8 编码。</p><p><code>严</code>的 Unicode 是<code>4E25</code>（<code>100111000100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最后一个二进制位开始，依次从后向前填入格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4B8A5</code>。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,80),m={href:"https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html",target:"_blank",rel:"noopener noreferrer"};function h(g,x){const a=o("ExternalLinkIcon");return c(),u("div",null,[i,n("p",null,[r,s(" 类是 JavaScript "),n("a",d,[k,t(a)]),s(" 类的子类")]),f,b,v,n("p",null,[n("a",m,[s("字符编码笔记：ASCII，Unicode 和 UTF-8 - 阮一峰的网络日志"),t(a)])])])}const w=p(l,[["render",h],["__file","buffer.html.vue"]]);export{w as default};
